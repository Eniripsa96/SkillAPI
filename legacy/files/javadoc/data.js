var NAME = 'SkillAPI v3.95';
var AUTHORS = ['Eniripsa96'];
var DESCRIPTION;
var DEPENDS = [
'MCCore'];
var SOFTDEPENDS = [
'Vault'];
var LOAD_BEFORE = [
'Quests'];
var PACKAGES = ['be.maximvdw.titlemotd.ui', 'com.sucy.skill.api.classes', 'com.sucy.skill.api.enums', 'com.sucy.skill.api.event', 'com.sucy.skill.api.exception', 'com.sucy.skill.api.player', 'com.sucy.skill.api.projectile', 'com.sucy.skill.api.skills', 'com.sucy.skill.api.util', 'com.sucy.skill.api', 'com.sucy.skill.cmd', 'com.sucy.skill.data.io', 'com.sucy.skill.data', 'com.sucy.skill.dynamic.condition', 'com.sucy.skill.dynamic.mechanic', 'com.sucy.skill.dynamic.target', 'com.sucy.skill.dynamic', 'com.sucy.skill.gui', 'com.sucy.skill.hook', 'com.sucy.skill.language', 'com.sucy.skill.listener', 'com.sucy.skill.log', 'com.sucy.skill.manager', 'com.sucy.skill.task', 'com.sucy.skill.tree.basic', 'com.sucy.skill.tree.map', 'com.sucy.skill.tree', 'com.sucy.skill'];
var CLASSES = [
    [
        {name: 'Title', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Minecraft 1.8 (1.9) Title <br><br', ext: 0, impl: [], constructors: [{name: 'Title', description: 'Copy 1.8 title <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'title', type: 'Title', description: 'Title'}]}, {name: 'Title', description: 'Create a new 1.8 title <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: []}, {name: 'Title', description: 'Create a new 1.8 title <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'title', type: 'String', description: 'Title text'}, {name: 'subtitle', type: 'String', description: 'Subtitle text'}]}, {name: 'Title', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: []}, {name: 'Title', description: 'Create a new 1.8 title <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'title', type: 'String', description: 'Title'}]}], methods: [{name: 'broadcast', description: 'Broadcast the title to all players', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'clearTitle', description: 'Clear the title <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'Player'}]}, {name: 'getFadeInTime', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getFadeOutTime', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getStayTime', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getSubtitle', description: 'Get subtitle text <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'Subtitle text'}, params: []}, {name: 'getSubtitleColor', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ChatColor', description: ''}, params: []}, {name: 'getTitle', description: 'Get title text <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'Title text'}, params: []}, {name: 'getTitleColor', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ChatColor', description: ''}, params: []}, {name: 'isTicks', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'resetTitle', description: 'Reset the title settings <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'Player'}]}, {name: 'send', description: 'Send the title to a player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'Player'}]}, {name: 'setFadeInTime', description: 'Set title fade in time <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'time', type: 'int', description: 'Time'}]}, {name: 'setFadeOutTime', description: 'Set title fade out time <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'time', type: 'int', description: 'Time'}]}, {name: 'setStayTime', description: 'Set title stay time <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'time', type: 'int', description: 'Time'}]}, {name: 'setSubtitle', description: 'Set subtitle text <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'subtitle', type: 'String', description: 'Subtitle text'}]}, {name: 'setSubtitleColor', description: 'Set the subtitle color <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'color', type: 'ChatColor', description: 'Chat color'}]}, {name: 'setTimingsToSeconds', description: 'Set timings to seconds', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'setTimingsToTicks', description: 'Set timings to ticks', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'setTitle', description: 'Set title text <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'title', type: 'String', description: 'Title'}]}, {name: 'setTitleColor', description: 'Set the title color <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'color', type: 'ChatColor', description: 'Chat color'}]}, {name: 'updateSubtitle', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: ''}]}, {name: 'updateTimes', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: ''}]}, {name: 'updateTitle', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: ''}]}], fields: [{name: 'Title', description: 'Minecraft 1.8 (1.9) Title <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'ClassAttribute', type: 'class', isStatic: 0, isFinal: 1, isAbstract: 0, description: '<p>Attribute names for class attributes</p>', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'ClassAttribute', description: '<p>Attribute names for class attributes</p>', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'HEALTH', description: 'Maximum health for a class', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'MANA', description: 'Maximum mana for a class', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}], scope: 'public'},
        {name: 'RPGClass', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 1, description: 'Represents a template for a class used in the RPG system. This is the class to extend when creating your own classes.', ext: 0, impl: [], constructors: [{name: 'RPGClass', description: 'Initializes a class template that can profess from the parent class when that class reaches its max level. The group is the category for the class which determines which classes can be professed into simultaneously. Classes in the same group will not be able to both be professed into at the same time while classes in different groups are able to. For example, a class "Warrior" in the "class" group and an "Elf" class in the "race" group can both be professed as by a player at the same time, giving the player the stats and skills from both. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: '', description: ''}, params: [{name: 'name', type: 'String', description: 'name of the class'}, {name: 'icon', type: 'ItemStack', description: 'icon representing the class in menus'}, {name: 'maxLevel', type: 'int', description: 'max level the class can reach'}, {name: 'group', type: 'String', description: 'class group'}, {name: 'parent', type: 'String', description: 'parent class to profess from'}]}, {name: 'RPGClass', description: 'Initializes a class template that can profess from the parent class when that class reaches its max level. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: '', description: ''}, params: [{name: 'name', type: 'String', description: 'name of the class'}, {name: 'icon', type: 'ItemStack', description: 'icon representing the class in menus'}, {name: 'maxLevel', type: 'int', description: 'max level the class can reach'}, {name: 'parent', type: 'String', description: 'parent class to profess from'}]}, {name: 'RPGClass', description: 'Initializes a class template that does not profess from other classes but is rather a starting class. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: '', description: ''}, params: [{name: 'name', type: 'String', description: 'name of the class'}, {name: 'icon', type: 'ItemStack', description: 'icon representing the class in menus'}, {name: 'maxLevel', type: 'int', description: 'max level the class can reach'}]}], methods: [{name: 'addSkill', description: 'Adds a skill to the class by name. This will not add it to the skill tree or to players who are already professed as the class. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'name', type: 'String', description: 'name of the skill'}]}, {name: 'addSkills', description: 'Adds multiple skills to the class by name. This will not add it to the skill tree or to players who are already professed as the class. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'names', type: 'String...', description: 'names of the skills'}]}, {name: 'allowExpSource', description: 'Adds an experience source to the list of allowed sources for the class. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'source', type: 'ExpSource', description: 'allowed source of experience'}]}, {name: 'arrange', description: 'Arranges the skill tree for the class', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'disallowExpSource', description: 'Removes an experience source from the list of allowed sources for the class. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'source', type: 'ExpSource', description: 'disallowed source of experience'}]}, {name: 'getAttribute', description: 'Gets the class attribute amount for the given level <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'attribute amount'}, params: [{name: 'key', type: 'String', description: 'attribute key'}, {name: 'level', type: 'int', description: 'class level'}]}, {name: 'getBaseHealth', description: 'Retrieves the base amount of health for the class <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'base amount of health for the class'}, params: []}, {name: 'getBaseMana', description: 'Retrieves the base amount of mana for the class <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'base amount of mana for the class'}, params: []}, {name: 'getGroup', description: 'Retrieves the group this class falls in <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'class group'}, params: []}, {name: 'getGroupSettings', description: 'Retrieves the settings for the class\'s group <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'GroupSettings', description: 'settings for the class\'s group'}, params: []}, {name: 'getHealth', description: 'Retrieves the amount of max health this class provides <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'amount of max health the class provides'}, params: [{name: 'level', type: 'int', description: 'current level of the class'}]}, {name: 'getHealthScale', description: 'Retrieves the amount of health gained per level for the class <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'health gained per level'}, params: []}, {name: 'getIcon', description: 'Retrieves the icon representing this class for menus <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: 'icon representation of the class'}, params: []}, {name: 'getMana', description: 'Retrieves the amount of max mana this class provides <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'amount of max mana the class provides'}, params: [{name: 'level', type: 'int', description: 'current level of the class'}]}, {name: 'getManaName', description: 'Retrieves the alias for mana this class uses <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'mana alias for the class'}, params: []}, {name: 'getManaRegen', description: 'Retrieves the amount of mana regeneration this class has <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'mana regeneration per update or a non-positive number if no regeneration'}, params: []}, {name: 'getManaScale', description: 'Retrieves the amount of mana gained per level for the class <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'mana gained per level'}, params: []}, {name: 'getMaxLevel', description: 'Retrieves the max level in which this class can reach <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'max level this class can reach'}, params: []}, {name: 'getName', description: 'Retrieves the name of the class <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'class name'}, params: []}, {name: 'getOptions', description: 'Retrieves the list of child classes that the player has as options to profess into upon reaching max level. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ArrayList<RPGClass>', description: 'list of child classes'}, params: []}, {name: 'getParent', description: 'Retrieves the parent of this class <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'RPGClass', description: 'parent of the class or null if none'}, params: []}, {name: 'getPrefix', description: 'Retrieves the prefix of the class <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'class prefix'}, params: []}, {name: 'getPrefixColor', description: 'Retrieves the color of the class\'s prefix <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ChatColor', description: 'prefix color'}, params: []}, {name: 'getRequiredExp', description: 'Retrieves the required amount of experience this class need to level <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'required amount of experience to reach the next level'}, params: [{name: 'level', type: 'int', description: 'current level of the class'}]}, {name: 'getSettings', description: 'Retrieves the settings for the class in a read-only format <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ReadOnlySettings', description: 'settings for the class in a read-only format'}, params: []}, {name: 'getSkills', description: 'Retrieves the list of skills this class provides a player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ArrayList<Skill>', description: 'list of skills provided by the class'}, params: []}, {name: 'getSkillTree', description: 'Retrieves the skill tree representing the class skills <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'SkillTree', description: 'class skill tree'}, params: []}, {name: 'hasManaRegen', description: 'Checks whether or not this class has mana regeneration <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if has mana regeneration, false otherwise'}, params: []}, {name: 'hasParent', description: 'Checks whether or not the class professes from another class <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if professes from another class, false otherwise'}, params: []}, {name: 'isNeedsPermission', description: 'Checks whether or not the class needs permission in order to profess as it <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if needs permission, false otherwise'}, params: []}, {name: 'load', description: 'Loads class template data from the configuration <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'DataSection', description: 'config to load from'}]}, {name: 'receivesExp', description: 'Checks whether or not the class receives experience from the given source <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if receives experience from the source, false otherwise'}, params: [{name: 'source', type: 'ExpSource', description: 'source of experience to check'}]}, {name: 'save', description: 'Saves the class template data to the config <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'DataSection', description: 'config to save to'}]}, {name: 'setAllowedExpSources', description: 'Sets the experience sources this class can receive experience from. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'sources', type: 'ExpSource...', description: 'allowed sources of experience'}]}, {name: 'setManaName', description: 'Sets the mana alias for the class <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'name', type: 'String', description: 'mana alias'}]}, {name: 'setManaRegen', description: 'Sets the amount of mana regen this class has <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'double', description: 'amount of mana regen'}]}, {name: 'setPrefix', description: 'Sets the prefix for the class <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'prefix', type: 'String', description: 'class prefix'}]}, {name: 'softSave', description: 'Saves some of the class template data to the config, avoiding overwriting any existing data. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'DataSection', description: 'config to save to'}]}], fields: [{name: 'needsPermission', description: 'Whether or not the class requires permissions in order to be professed into', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'boolean', scope: 'protected'}, {name: 'RPGClass', description: 'Represents a template for a class used in the RPG system. This is the class to extend when creating your own classes.', isStatic: 0, isFinal: 0, isAbstract: 1, type: '', scope: 'public'}, {name: 'settings', description: 'The settings for your class. This will include the health and mana scaling for the class.', isStatic: 0, isFinal: 1, isAbstract: 0, type: 'Settings', scope: 'protected'}], scope: 'public'}    ],
    [
    ],
    [
        {name: 'FlagApplyEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event called when a flag is applied to an entity', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'FlagApplyEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'the entity the flag was on'}, {name: 'flag', type: 'String', description: 'the flag that is to be applied'}, {name: 'ticks', type: 'int', description: ''}]}], methods: [{name: 'getEntity', description: 'Retrieves the entity that the flag is being applied to <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'LivingEntity', description: 'the entity having the flag applied to'}, params: []}, {name: 'getFlag', description: 'Retrieves the flag that is to be applied <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'the flag being applied'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getTicks', description: 'Retrieves the number of ticks the flag is to be applied for <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'the number of ticks'}, params: []}, {name: 'isCancelled', description: 'Checks whether or not the event is cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if cancelled, false otherwise'}, params: []}, {name: 'setCancelled', description: 'Sets whether or not the event is cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cancelled', type: 'boolean', description: 'true if cancelled, false otherwise'}]}], fields: [{name: 'FlagApplyEvent', description: 'Event called when a flag is applied to an entity', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'FlagExpireEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event called when a flag expired on an entity', ext: 'Event', impl: [], constructors: [{name: 'FlagExpireEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'the entity the flag was on'}, {name: 'flag', type: 'String', description: 'the flag that expired'}, {name: 'reason', type: 'ExpireReason', description: ''}]}], methods: [{name: 'getEntity', description: 'Retrieves the entity that the flag was on <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'LivingEntity', description: 'the entity that the flag was on'}, params: []}, {name: 'getFlag', description: 'Retrieves the expired flag <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'the flag that expired'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getReason', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ExpireReason', description: 'reason for the flag expiring'}, params: []}], fields: [{name: 'ExpireReason', description: 'The reason the flag expired', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'FlagExpireEvent', description: 'Event called when a flag expired on an entity', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ItemProjectileHitEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>An event for when an item projectile hits something.</p>', ext: 'Event', impl: [], constructors: [{name: 'ItemProjectileHitEvent', description: '<p>Initializes a new event.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'projectile', type: 'ItemProjectile', description: 'the projectile that hit something'}, {name: 'target', type: 'LivingEntity', description: 'the thing that the projectile hit'}]}], methods: [{name: 'getHandlerList', description: '<p>Bukkit method for taking care of the event handlers.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getHandlers', description: '<p>Bukkit method for taking care of the event handlers.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getProjectile', description: '<p>Retrieves the projectile that hit something.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemProjectile', description: 'the projectile that hit something'}, params: []}, {name: 'getTarget', description: '<p>Retrieves the thing that was hit by the projectile.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'LivingEntity', description: 'the thing hit by the projectile'}, params: []}], fields: [{name: 'ItemProjectileHitEvent', description: '<p>An event for when an item projectile hits something.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ItemProjectileLandEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>An event for when an item projectile lands on the ground</p>', ext: 'Event', impl: [], constructors: [{name: 'ItemProjectileLandEvent', description: '<p>Initializes a new event.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'projectile', type: 'ItemProjectile', description: 'the projectile that hit something'}]}], methods: [{name: 'getHandlerList', description: '<p>Bukkit method for taking care of the event handlers.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getHandlers', description: '<p>Bukkit method for taking care of the event handlers.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getProjectile', description: '<p>Retrieves the projectile</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemProjectile', description: 'the projectile that hit something'}, params: []}], fields: [{name: 'ItemProjectileLandEvent', description: '<p>An event for when an item projectile lands on the ground</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ItemProjectileLaunchEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>An event for when an item projectile is launched</p>', ext: 'Event', impl: [], constructors: [{name: 'ItemProjectileLaunchEvent', description: '<p>Initializes a new event.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'projectile', type: 'ItemProjectile', description: 'the projectile that hit something'}]}], methods: [{name: 'getHandlerList', description: '<p>Bukkit method for taking care of the event handlers.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getHandlers', description: '<p>Bukkit method for taking care of the event handlers.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getProjectile', description: '<p>Retrieves the projectile</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemProjectile', description: 'the projectile that hit something'}, params: []}], fields: [{name: 'ItemProjectileLaunchEvent', description: '<p>An event for when an item projectile is launched</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ParticleProjectileExpireEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>An event for when a particle projectile expires from flying too long.</p>', ext: 'Event', impl: [], constructors: [{name: 'ParticleProjectileExpireEvent', description: '<p>Initializes a new event.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'projectile', type: 'ParticleProjectile', description: 'the projectile that hit something'}]}], methods: [{name: 'getHandlerList', description: '<p>Bukkit method for taking care of the event handlers.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getHandlers', description: '<p>Bukkit method for taking care of the event handlers.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getProjectile', description: '<p>Retrieves the projectile</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ParticleProjectile', description: 'the projectile that hit something'}, params: []}], fields: [{name: 'ParticleProjectileExpireEvent', description: '<p>An event for when a particle projectile expires from flying too long.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ParticleProjectileHitEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>An event for when a particle projectile hits something.</p>', ext: 'Event', impl: [], constructors: [{name: 'ParticleProjectileHitEvent', description: '<p>Initializes a new event.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'projectile', type: 'ParticleProjectile', description: 'the projectile that hit something'}, {name: 'target', type: 'LivingEntity', description: 'the thing that the projectile hit'}]}], methods: [{name: 'getHandlerList', description: '<p>Bukkit method for taking care of the event handlers.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getHandlers', description: '<p>Bukkit method for taking care of the event handlers.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getProjectile', description: '<p>Retrieves the projectile that hit something.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ParticleProjectile', description: 'the projectile that hit something'}, params: []}, {name: 'getTarget', description: '<p>Retrieves the thing that was hit by the projectile.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'LivingEntity', description: 'the thing hit by the projectile'}, params: []}], fields: [{name: 'ParticleProjectileHitEvent', description: '<p>An event for when a particle projectile hits something.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ParticleProjectileLandEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>An event for when a particle projectile projectile hits terrain.</p>', ext: 'Event', impl: [], constructors: [{name: 'ParticleProjectileLandEvent', description: '<p>Initializes a new event.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'projectile', type: 'ParticleProjectile', description: 'the projectile that hit something'}]}], methods: [{name: 'getHandlerList', description: '<p>Bukkit method for taking care of the event handlers.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getHandlers', description: '<p>Bukkit method for taking care of the event handlers.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getProjectile', description: '<p>Retrieves the projectile</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ParticleProjectile', description: 'the projectile that hit something'}, params: []}], fields: [{name: 'ParticleProjectileLandEvent', description: '<p>An event for when a particle projectile projectile hits terrain.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ParticleProjectileLaunchEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>An event for when a particle projectile is launched.</p>', ext: 'Event', impl: [], constructors: [{name: 'ParticleProjectileLaunchEvent', description: '<p>Initializes a new event.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'projectile', type: 'ParticleProjectile', description: 'the projectile that hit something'}]}], methods: [{name: 'getHandlerList', description: '<p>Bukkit method for taking care of the event handlers.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getHandlers', description: '<p>Bukkit method for taking care of the event handlers.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getProjectile', description: '<p>Retrieves the projectile</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ParticleProjectile', description: 'the projectile that hit something'}, params: []}], fields: [{name: 'ParticleProjectileLaunchEvent', description: '<p>An event for when a particle projectile is launched.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PhysicalDamageEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'An event for when an entity is damaged by another entity without the use of skills such as melee attacks or projectiles.', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'PhysicalDamageEvent', description: 'Initializes a new event <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'damager', type: 'LivingEntity', description: 'entity dealing the damage'}, {name: 'target', type: 'LivingEntity', description: 'entity receiving the damage'}, {name: 'damage', type: 'double', description: 'the amount of damage dealt'}, {name: 'projectile', type: 'boolean', description: 'whether or not it was a projectile attack'}]}], methods: [{name: 'getDamage', description: 'Retrieves the amount of damage dealt <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'amount of damage dealt'}, params: []}, {name: 'getDamager', description: 'Retrieves the entity that dealt the damage <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'LivingEntity', description: 'entity that dealt the damage'}, params: []}, {name: 'getHandlerList', description: 'Retrieves the handlers for the event <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getHandlers', description: 'Retrieves the handlers for the event <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getTarget', description: 'Retrieves the entity that received the damage <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'LivingEntity', description: 'entity that received the damage'}, params: []}, {name: 'isCancelled', description: 'Checks whether or not the event is cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if cancelled, false otherwise'}, params: []}, {name: 'isProjectile', description: 'Checks whether or not it was a projectile attack <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if a projectile attack, false otherwise'}, params: []}, {name: 'setCancelled', description: 'Sets the cancelled state of the event <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cancelled', type: 'boolean', description: 'the cancelled state of the event'}]}, {name: 'setDamage', description: 'Sets the amount of damage dealt <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'double', description: 'amount of damage dealt'}]}], fields: [{name: 'PhysicalDamageEvent', description: 'An event for when an entity is damaged by another entity without the use of skills such as melee attacks or projectiles.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerAccountChangeEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event called when a player changes classes', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'PlayerAccountChangeEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'accounts', type: 'PlayerAccounts', description: 'player accounts data'}, {name: 'prevId', type: 'int', description: 'previous account ID'}, {name: 'newId', type: 'int', description: 'new account ID'}]}], methods: [{name: 'getAccountData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerAccounts', description: 'player\'s account data'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getNewAccount', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'account the player is switching to'}, params: []}, {name: 'getNewID', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'new active account ID of the player'}, params: []}, {name: 'getPreviousAccount', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'account the player is switching from'}, params: []}, {name: 'getPreviousId', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'previously active account ID of the player'}, params: []}, {name: 'isCancelled', description: 'Checks whether or not the event is cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if cancelled, false otherwise'}, params: []}, {name: 'setCancelled', description: 'Sets whether or not the switch should be cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cancelled', type: 'boolean', description: 'cancelled state of the event'}]}], fields: [{name: 'PlayerAccountChangeEvent', description: 'Event called when a player changes classes', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerCastSkillEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'SkillAPI com.sucy.skill.api.event.PlayerCastSkillEvent <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'PlayerCastSkillEvent', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'playerData', type: 'PlayerData', description: ''}, {name: 'skill', type: 'PlayerSkill', description: ''}, {name: 'player', type: 'Player', description: ''}]}], methods: [{name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: ''}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: ''}, params: []}, {name: 'getPlayer', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player', description: ''}, params: []}, {name: 'getPlayerData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: ''}, params: []}, {name: 'getSkill', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerSkill', description: ''}, params: []}, {name: 'isCancelled', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'setCancelled', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cancelled', type: 'boolean', description: ''}]}], fields: [{name: 'PlayerCastSkillEvent', description: 'SkillAPI com.sucy.skill.api.event.PlayerCastSkillEvent <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerClassChangeEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event called when a player changes classes', ext: 'Event', impl: [], constructors: [{name: 'PlayerClassChangeEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'playerClass', type: 'PlayerClass', description: 'data of the player changing classes'}, {name: 'previousClass', type: 'RPGClass', description: 'previous class of the player (null if wasn\'t a profession)'}, {name: 'newClass', type: 'RPGClass', description: 'new class of the player (null if using the reset command)'}]}], methods: [{name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getNewClass', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'RPGClass', description: 'new class of the player'}, params: []}, {name: 'getPlayerClass', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerClass', description: 'modified player class'}, params: []}, {name: 'getPlayerData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'Data of the player changing classes'}, params: []}, {name: 'getPreviousClass', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'RPGClass', description: 'previous class of the player'}, params: []}], fields: [{name: 'PlayerClassChangeEvent', description: 'Event called when a player changes classes', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerComboFinishEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event called when a player changes classes', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'PlayerComboFinishEvent', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'PlayerData', description: 'player performing the combo'}, {name: 'combo', type: 'int', description: 'combo that was performed'}, {name: 'skill', type: 'String', description: ''}]}], methods: [{name: 'getCombo', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'the combo performed'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getPlayer', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player', description: 'player performing the combo'}, params: []}, {name: 'getPlayerData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'data of the player performing the combo'}, params: []}, {name: 'getSkill', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Skill', description: 'skill to cast from the combo'}, params: []}, {name: 'getSkillName', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'name of the skill to cast from the combo'}, params: []}, {name: 'isCancelled', description: 'Checks whether or not the event is cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if cancelled, false otherwise'}, params: []}, {name: 'setCancelled', description: 'Sets whether or not the switch should be cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cancelled', type: 'boolean', description: 'cancelled state of the event'}]}], fields: [{name: 'PlayerComboFinishEvent', description: 'Event called when a player changes classes', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerExperienceGainEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event called when a player gains class experience', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'PlayerExperienceGainEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'playerClass', type: 'PlayerClass', description: 'class of the player gaining experience'}, {name: 'amount', type: 'double', description: 'amount of experience being gained'}, {name: 'source', type: 'ExpSource', description: 'source of the experience'}]}], methods: [{name: 'getExp', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'amount of experience being gained'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getPlayerClass', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerClass', description: 'player\'s class that is receiving the experience'}, params: []}, {name: 'getPlayerData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'data of the player gaining experience'}, params: []}, {name: 'getSource', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ExpSource', description: 'where the experience came from'}, params: []}, {name: 'isCancelled', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'whether or not the gain in experience is cancelled'}, params: []}, {name: 'setCancelled', description: 'Sets whether or not the gain in experience is cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cancelled', type: 'boolean', description: 'true/false'}]}, {name: 'setExp', description: 'Sets the amount of experience being gained <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'int', description: 'new amount of experience'}]}], fields: [{name: 'PlayerExperienceGainEvent', description: 'Event called when a player gains class experience', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerExperienceLostEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event called when a player loses class experience', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'PlayerExperienceLostEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'playerClass', type: 'PlayerClass', description: 'class of the player losing experience'}, {name: 'amount', type: 'double', description: 'amount of experience being lost'}]}], methods: [{name: 'getExp', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'amount of experience being lost'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getPlayerClass', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerClass', description: 'player\'s class that is receiving the experience'}, params: []}, {name: 'getPlayerData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'data of the player losing experience'}, params: []}, {name: 'isCancelled', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'whether or not the gain in experience is cancelled'}, params: []}, {name: 'setCancelled', description: 'Sets whether or not the gain in experience is cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cancelled', type: 'boolean', description: 'true/false'}]}, {name: 'setExp', description: 'Sets the amount of experience being gained <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'int', description: 'new amount of experience'}]}], fields: [{name: 'PlayerExperienceLostEvent', description: 'Event called when a player loses class experience', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerGainSkillPointsEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event called when a player gains class experience', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'PlayerGainSkillPointsEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'playerClass', type: 'PlayerClass', description: 'class of the player gaining skill points'}, {name: 'amount', type: 'double', description: 'amount of skill points being gained'}, {name: 'source', type: 'PointSource', description: 'source of the points'}]}], methods: [{name: 'getAmount', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'amount of experience being gained'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getPlayerClass', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerClass', description: 'player\'s class that is receiving the experience'}, params: []}, {name: 'getPlayerData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'data of the player gaining experience'}, params: []}, {name: 'getSource', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PointSource', description: 'where the experience came from'}, params: []}, {name: 'isCancelled', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'whether or not the gain in experience is cancelled'}, params: []}, {name: 'setAmount', description: 'Sets the amount of experience being gained <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'int', description: 'new amount of experience'}]}, {name: 'setCancelled', description: 'Sets whether or not the gain in experience is cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cancelled', type: 'boolean', description: 'true/false'}]}], fields: [{name: 'PlayerGainSkillPointsEvent', description: 'Event called when a player gains class experience', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerLandEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event for when a player lands on the ground after falling/jumping', ext: 'Event', impl: [], constructors: [{name: 'PlayerLandEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'Player', description: 'the player who landed on the ground'}, {name: 'distance', type: 'double', description: 'how far they fell'}]}], methods: [{name: 'getDistance', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'the distance the player fell'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getPlayer', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player', description: 'player who landed on the ground'}, params: []}], fields: [{name: 'PlayerLandEvent', description: 'Event for when a player lands on the ground after falling/jumping', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerLevelUpEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event called when a player leveled up', ext: 'Event', impl: [], constructors: [{name: 'PlayerLevelUpEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'playerClass', type: 'PlayerClass', description: 'data of the player leveling up'}, {name: 'amount', type: 'int', description: ''}]}], methods: [{name: 'getAmount', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'how many levels the player\'s class gained'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getLevel', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'new level of the player\'s class'}, params: []}, {name: 'getPlayerClass', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerClass', description: 'the player\'s class that is leveling up'}, params: []}, {name: 'getPlayerData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'data of the player whose class leveled up'}, params: []}], fields: [{name: 'PlayerLevelUpEvent', description: 'Event called when a player leveled up', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerManaGainEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event called when a player regenerates mana via natural regeneration', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'PlayerManaGainEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'PlayerData', description: 'class of the player gaining experience'}, {name: 'amount', type: 'double', description: 'amount of mana regenerated'}, {name: 'source', type: 'ManaSource', description: 'the source of the gained mana'}]}], methods: [{name: 'getAmount', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'amount of experience being gained'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getPlayerData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'data of the player gaining experience'}, params: []}, {name: 'getSource', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ManaSource', description: 'source of the gained mana'}, params: []}, {name: 'isCancelled', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'whether or not the gain in experience is cancelled'}, params: []}, {name: 'setAmount', description: 'Sets the amount of experience being gained <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'double', description: 'new amount of experience'}]}, {name: 'setCancelled', description: 'Sets whether or not the gain in experience is cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cancelled', type: 'boolean', description: 'true/false'}]}], fields: [{name: 'PlayerManaGainEvent', description: 'Event called when a player regenerates mana via natural regeneration', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerManaLossEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event called when a player regenerates mana via natural regeneration', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'PlayerManaLossEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'PlayerData', description: 'class of the player gaining experience'}, {name: 'amount', type: 'double', description: 'amount of mana regenerated'}, {name: 'source', type: 'ManaCost', description: 'the cause of the mana loss'}]}], methods: [{name: 'getAmount', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'amount of experience being gained'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getPlayerData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'data of the player gaining experience'}, params: []}, {name: 'getSource', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ManaCost', description: 'source of the gained mana'}, params: []}, {name: 'isCancelled', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'whether or not the gain in experience is cancelled'}, params: []}, {name: 'setAmount', description: 'Sets the amount of experience being gained <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'double', description: 'new amount of experience'}]}, {name: 'setCancelled', description: 'Sets whether or not the gain in experience is cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cancelled', type: 'boolean', description: 'true/false'}]}], fields: [{name: 'PlayerManaLossEvent', description: 'Event called when a player regenerates mana via natural regeneration', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerRefundAttributeEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event called when a player refunds an attribute point', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'PlayerRefundAttributeEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'playerData', type: 'PlayerData', description: 'data of the player upgrading the skill'}, {name: 'attribute', type: 'String', description: 'the name of the attribute that was raised'}]}], methods: [{name: 'getAttribute', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'name of the refunded attribute'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getPlayerData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'data of the player refunding the attribute'}, params: []}, {name: 'isCancelled', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if cancelled, false otherwise'}, params: []}, {name: 'setCancelled', description: 'Sets whether or not the event is cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'value', type: 'boolean', description: 'true if cancelled, false otherwise'}]}], fields: [{name: 'PlayerRefundAttributeEvent', description: 'Event called when a player refunds an attribute point', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerSkillDowngradeEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event called when a player downgrades a skill', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'PlayerSkillDowngradeEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'playerData', type: 'PlayerData', description: 'data of the player downgrading the skill'}, {name: 'downgradedSkill', type: 'PlayerSkill', description: 'the skill that was downgraded'}, {name: 'refund', type: 'int', description: 'the amount of refunded skill points'}]}], methods: [{name: 'getDowngradedSkill', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerSkill', description: 'skill that was unlocked'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getPlayerData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'data of the player unlocking the skill'}, params: []}, {name: 'getRefund', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'amount of refunded points from the downgrade'}, params: []}, {name: 'isCancelled', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if cancelled, false otherwise'}, params: []}, {name: 'setCancelled', description: 'Sets whether or not the event is cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'value', type: 'boolean', description: 'true if cancelled, false otherwise'}]}], fields: [{name: 'PlayerSkillDowngradeEvent', description: 'Event called when a player downgrades a skill', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerSkillUnlockEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event called when a player initially unlocks a skill', ext: 'Event', impl: [], constructors: [{name: 'PlayerSkillUnlockEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'playerData', type: 'PlayerData', description: 'data of the player unlocking the skill'}, {name: 'unlockedSkill', type: 'PlayerSkill', description: 'the skill that was unlocked'}]}], methods: [{name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getPlayerData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'data of the player unlocking the skill'}, params: []}, {name: 'getUnlockedSkill', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerSkill', description: 'skill that was unlocked'}, params: []}], fields: [{name: 'PlayerSkillUnlockEvent', description: 'Event called when a player initially unlocks a skill', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerSkillUpgradeEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event called when a player upgrades a skill', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'PlayerSkillUpgradeEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'playerData', type: 'PlayerData', description: 'data of the player upgrading the skill'}, {name: 'upgradedSkill', type: 'PlayerSkill', description: 'the skill that was upgraded'}, {name: 'cost', type: 'int', description: 'the cost for the upgrade'}]}], methods: [{name: 'getCost', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'cost of the upgrade'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getPlayerData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'data of the player unlocking the skill'}, params: []}, {name: 'getUpgradedSkill', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerSkill', description: 'skill that was unlocked'}, params: []}, {name: 'isCancelled', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if cancelled, false otherwise'}, params: []}, {name: 'setCancelled', description: 'Sets whether or not the event is cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'value', type: 'boolean', description: 'true if cancelled, false otherwise'}]}], fields: [{name: 'PlayerSkillUpgradeEvent', description: 'Event called when a player upgrades a skill', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerUpAttributeEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event called when a player upgrades a skill', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'PlayerUpAttributeEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'playerData', type: 'PlayerData', description: 'data of the player raising the attribute'}, {name: 'attribute', type: 'String', description: 'the name of the attribute that was raised'}]}], methods: [{name: 'getAttribute', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'name of the raised attribute'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'gets the handlers for the event'}, params: []}, {name: 'getPlayerData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'data of the player raising the attribute'}, params: []}, {name: 'isCancelled', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if cancelled, false otherwise'}, params: []}, {name: 'setCancelled', description: 'Sets whether or not the event is cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'value', type: 'boolean', description: 'true if cancelled, false otherwise'}]}], fields: [{name: 'PlayerUpAttributeEvent', description: 'Event called when a player upgrades a skill', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'SkillDamageEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'An event for when an entity is damaged by another entity with the use of a skill.', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'SkillDamageEvent', description: 'Initializes a new event <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'damager', type: 'LivingEntity', description: 'entity dealing the damage'}, {name: 'target', type: 'LivingEntity', description: 'entity receiving the damage'}, {name: 'damage', type: 'double', description: 'the amount of damage dealt'}]}], methods: [{name: 'getDamage', description: 'Retrieves the amount of damage dealt <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'amount of damage dealt'}, params: []}, {name: 'getDamager', description: 'Retrieves the entity that dealt the damage <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'LivingEntity', description: 'entity that dealt the damage'}, params: []}, {name: 'getHandlerList', description: 'Retrieves the handlers for the event <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getHandlers', description: 'Retrieves the handlers for the event <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getTarget', description: 'Retrieves the entity that received the damage <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'LivingEntity', description: 'entity that received the damage'}, params: []}, {name: 'isCancelled', description: 'Checks whether or not the event is cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if cancelled, false otherwise'}, params: []}, {name: 'setCancelled', description: 'Sets the cancelled state of the event <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cancelled', type: 'boolean', description: 'the cancelled state of the event'}]}, {name: 'setDamage', description: 'Sets the amount of damage dealt <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'double', description: 'amount of damage dealt'}]}], fields: [{name: 'SkillDamageEvent', description: 'An event for when an entity is damaged by another entity with the use of a skill.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'SkillHealEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'An event for when an entity is healed by another entity with the use of a skill.', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'SkillHealEvent', description: 'Initializes a new event <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'healer', type: 'LivingEntity', description: 'entity dealing the damage'}, {name: 'target', type: 'LivingEntity', description: 'entity receiving the damage'}, {name: 'damage', type: 'double', description: 'the amount of damage dealt'}]}], methods: [{name: 'getAmount', description: 'Retrieves the amount of damage dealt <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'amount of damage dealt'}, params: []}, {name: 'getHandlerList', description: 'Retrieves the handlers for the event <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getHandlers', description: 'Retrieves the handlers for the event <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getHealer', description: 'Retrieves the entity that dealt the damage <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'LivingEntity', description: 'entity that dealt the damage'}, params: []}, {name: 'getTarget', description: 'Retrieves the entity that received the damage <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'LivingEntity', description: 'entity that received the damage'}, params: []}, {name: 'isCancelled', description: 'Checks whether or not the event is cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if cancelled, false otherwise'}, params: []}, {name: 'setAmount', description: 'Sets the amount of damage dealt <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'double', description: 'amount of damage dealt'}]}, {name: 'setCancelled', description: 'Sets the cancelled state of the event <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cancelled', type: 'boolean', description: 'the cancelled state of the event'}]}], fields: [{name: 'SkillHealEvent', description: 'An event for when an entity is healed by another entity with the use of a skill.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'TrueDamageEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event for when true damage is dealt (damage ignoring armor)', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'TrueDamageEvent', description: 'Initializes a new event <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'damager', type: 'LivingEntity', description: 'entity dealing the damage'}, {name: 'target', type: 'LivingEntity', description: 'entity receiving the damage'}, {name: 'damage', type: 'double', description: 'the amount of damage dealt'}]}], methods: [{name: 'getDamage', description: 'Retrieves the amount of damage dealt <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'amount of damage dealt'}, params: []}, {name: 'getDamager', description: 'Retrieves the entity that dealt the damage <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'LivingEntity', description: 'entity that dealt the damage'}, params: []}, {name: 'getHandlerList', description: 'Retrieves the handlers for the event <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getHandlers', description: 'Retrieves the handlers for the event <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'list of event handlers'}, params: []}, {name: 'getTarget', description: 'Retrieves the entity that received the damage <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'LivingEntity', description: 'entity that received the damage'}, params: []}, {name: 'isCancelled', description: 'Checks whether or not the event is cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if cancelled, false otherwise'}, params: []}, {name: 'setCancelled', description: 'Sets the cancelled state of the event <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cancelled', type: 'boolean', description: 'the cancelled state of the event'}]}, {name: 'setDamage', description: 'Sets the amount of damage dealt <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'double', description: 'amount of damage dealt'}]}], fields: [{name: 'TrueDamageEvent', description: 'Event for when true damage is dealt (damage ignoring armor)', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
        {name: 'PlayerAccounts', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Represents the collection of accounts owned by a single player. Most of the time, this class won\'t be used by other plugins as you can skip directly to a player\'s active data using the SkillAPI.getPlayerData methods. This would be if you want to extend functionality for handling the inactive accounts.', ext: 0, impl: [], constructors: [{name: 'PlayerAccounts', description: 'Initializes a new container for player account data. This shouldn\'t be used by other plugins as the API provides one for each player already. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'OfflinePlayer', description: 'player to store data for'}]}], methods: [{name: 'getAccountLimit', description: 'Retrieves the max amount of accounts the owner can use <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'available account number'}, params: []}, {name: 'getActiveData', description: 'Retrieves the active account data for the player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'active account data'}, params: []}, {name: 'getActiveId', description: 'Retrieves the active account ID for the player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'active account ID'}, params: []}, {name: 'getAllData', description: 'Retrieves all of the data for the owner. Modifying this map will alter the player\'s actual data. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HashMap<Integer,PlayerData>', description: 'all account data for the player'}, params: []}, {name: 'getData', description: 'Gets the account data by ID for the owner. If no data exists under the given ID, new data is created as long as the ID is a positive integer (not necessarily in bounds for the player\'s allowed accounts). <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'account data or null if invalid id or player'}, params: [{name: 'id', type: 'int', description: 'account ID'}, {name: 'player', type: 'OfflinePlayer', description: 'offline player reference'}, {name: 'init', type: 'boolean', description: 'whether or not the data is being initialized'}]}, {name: 'getData', description: 'Gets the account data by ID for the owner <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'account data or null if not found'}, params: [{name: 'id', type: 'int', description: 'account ID'}]}, {name: 'getOfflinePlayer', description: 'Gets the Bukkit offline player object for the owner of the data <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'OfflinePlayer', description: 'Bukkit offline player object'}, params: []}, {name: 'getPlayer', description: 'Gets the Bukkit player object for the owner of the data <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player', description: 'Bukkit player object or null if offline/dead'}, params: []}, {name: 'getPlayerName', description: 'Gets the name of the owner of the data <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'owner\'s name'}, params: []}, {name: 'hasData', description: 'Checks whether or not there is any data for the given account ID. If the player has not switched to the account, there will be no data unless the setting to initialize one account for each class is enabled. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if data exists, false otherwise'}, params: [{name: 'id', type: 'int', description: 'account ID'}]}, {name: 'setAccount', description: 'Switches the active account for the player by ID. This will not accept IDs outside the player\'s account limits. If the player is offline or dead, this will not do anything. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'id', type: 'int', description: 'ID of the account to switch to'}, {name: 'apply', type: 'boolean', description: 'whether or not to apply the switch'}]}, {name: 'setAccount', description: 'Switches the active account for the player by ID. This will not accept IDs outside the player\'s account limits. If the player is offline or dead, this will not do anything. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'id', type: 'int', description: 'ID of the account to switch to'}]}], fields: [{name: 'PlayerAccounts', description: 'Represents the collection of accounts owned by a single player. Most of the time, this class won\'t be used by other plugins as you can skip directly to a player\'s active data using the SkillAPI.getPlayerData methods. This would be if you want to extend functionality for handling the inactive accounts.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerClass', type: 'class', isStatic: 0, isFinal: 1, isAbstract: 0, description: '<p>Represents a player\'s class progress.</p> <p/> <p>This class if for handling individual players.</p> <p/> <p>This does not include information about the class specifically, rather what the player has within the class. For more general information about the class, you should use the RPGClass class.</p>', ext: 0, impl: [], constructors: [{name: 'PlayerClass', description: 'Initializes a new PlayerClass. This should not be used by other plugins as the API provides the data. Get instances from the PlayerData object. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'PlayerData', description: 'owning player data'}, {name: 'classData', type: 'RPGClass', description: 'class template'}]}], methods: [{name: 'getData', description: '<p>Retrieves the generic data for the class.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'RPGClass', description: 'generic data for the class'}, params: []}, {name: 'getExp', description: '<p>Retrieves the experience of the class towards the next level.</p> <p>This should not ever be higher than the required experience.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'the current experience of the class towards the next level'}, params: []}, {name: 'getHealth', description: 'Retrieves the amount of health this class provides the player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'health provided for the player by this class'}, params: []}, {name: 'getLevel', description: '<p>Retrieves the current level of the class.</p> <p>This should never be less than 1 or greater than the maximum level.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'current level of the class'}, params: []}, {name: 'getMana', description: 'Retrieves the amount of mana this class provides the player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'mana provided for the player by this class'}, params: []}, {name: 'getPlayerData', description: '<p>Retrieves the data of the player owning this class.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'data of owning player'}, params: []}, {name: 'getPoints', description: '<p>Retrieves the number of skill points the class has currently available.</p> <p>This should never be a negative number.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'number of available skill points'}, params: []}, {name: 'getRequiredExp', description: '<p>Retrieves the required experience to level up to the next level.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'the current required experience'}, params: []}, {name: 'getTotalExp', description: '<p>Retrieves the total amount of experience the player has accumulated for this class since professing as it.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'total accumulated experience for the class'}, params: []}, {name: 'giveExp', description: '<p>Gives experience to the class under the context of the experience source.</p> <p>This will also check for leveling up after the experience is added.</p> <p>If the class does not normally receive experience from the source, it will still launch an experience event, just it will start off as cancelled in case it should still be given in select circumstances.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'double', description: 'amount of experience to give'}, {name: 'source', type: 'ExpSource', description: 'type of the source of the experience'}]}, {name: 'giveLevels', description: '<p>Gives levels to the player\'s class, leveling it up.</p> <p>The amount of levels must be a positive number.</p> <p>This will launch a level event for the gained levels.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'int', description: 'amount of levels to give'}]}, {name: 'givePoints', description: '<p>Gives skill points to be used for the class.</p> <p>The number of points cannot be negative.</p> <p>This calls an event that can be cancelled or have the number of points modified.</p> <p>This treats the points as coming from the source "SPECIAL".</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'int', description: 'amount of points to give'}]}, {name: 'givePoints', description: '<p>Gives skill points to be used for the class.</p> <p>The number of points cannot be negative.</p> <p>This calls an event that can be cancelled or have the number of points modified.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'int', description: 'amount of points to give'}, {name: 'source', type: 'PointSource', description: 'source of the points'}]}, {name: 'isLevelMaxed', description: '<p>Checks whether or not the class has reached the max level.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if max level, false otherwise'}, params: []}, {name: 'loseExp', description: 'Causes the player to lose experience as a penalty (generally for dying). This does not lower experience below 0 and will launch an event before taking the experience. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'percent', type: 'double', description: 'percent of experience to lose'}]}, {name: 'setClassData', description: 'Sets the class data this player class is based off of, optionally resetting the class progress. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'classData', type: 'RPGClass', description: 'class data to switch to'}]}, {name: 'setLevel', description: 'Sets the level for the class <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'level', type: 'int', description: 'level to set to'}]}, {name: 'setPoints', description: '<p>Sets the amount of points the player\'s class has without launching an event.</p> <p>This cannot be less than 0.</p> <p>This is used primarily for initialization. You should generally use givePoints(int, PointSource) instead.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'int', description: 'number of points to set it to'}]}, {name: 'setTotalExp', description: '<p>Sets the total experience the player has gained.</p> <p>This should only be used when loading player data.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'total', type: 'double', description: 'total amount of experience the player has earned'}]}, {name: 'usePoints', description: 'Uses points from the player for skill upgrades. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'int', description: 'amount of points to use'}]}], fields: [{name: 'PlayerClass', description: '<p>Represents a player\'s class progress.</p> <p/> <p>This class if for handling individual players.</p> <p/> <p>This does not include information about the class specifically, rather what the player has within the class. For more general information about the class, you should use the RPGClass class.</p>', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerCombos', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Represents the click combos available for a player to use along with their current click pattern', ext: 0, impl: [], constructors: [{name: 'PlayerCombos', description: 'Initializes a new empty combo set <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'data', type: 'PlayerData', description: 'owning player\'s data'}]}], methods: [{name: 'addSkill', description: 'Adds a skill to the available combos. This will not do anything if the skill is already added. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'skill', type: 'Skill', description: 'skill to add'}]}, {name: 'applyClick', description: 'Applies a click for the player, counting towards their current combo and casts the skill if the combo is completed. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'click', type: 'Click', description: 'click to apply for the player'}]}, {name: 'clearCombo', description: 'Clears the player\'s current click combo, causing them to not count their recent clicks towards a combo', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'getComboCount', description: 'Retrieves the number of clicks in the player\'s active combo. Once this reaches the size of a combo, the combo will activate and try to cast a skill. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'current number of clicks in the active combo'}, params: []}, {name: 'getComboString', description: 'Retrieves the combo string for the skill according to the player\'s personal settings. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'combo string'}, params: [{name: 'skill', type: 'Skill', description: 'skill to get the string for'}]}, {name: 'getConflicts', description: 'Checks whether or not there would be a conflict with the given combo ID if it were to be added <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<Integer>', description: 'ID of conflict or -1 if no conflict'}, params: [{name: 'id', type: 'int', description: 'combo ID'}]}, {name: 'getCurrentComboString', description: 'Retrieves the current combo string for the player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'current combo string'}, params: []}, {name: 'getPlayerData', description: 'Retrieves the data of the owning player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'owning player\'s data'}, params: []}, {name: 'getSkillMap', description: 'Retrieves the map of combo IDs to skills. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HashMap<Integer,String>', description: 'map of combo IDs to skills'}, params: []}, {name: 'getSkillName', description: 'Retrieves the name of the skill bound to the combo ID. If no skill is bound to the ID, this will instead return null. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'skill name bound to the ID or null if none'}, params: [{name: 'id', type: 'int', description: 'combo ID to get the bound skill for'}]}, {name: 'hasCombo', description: 'Checks whether or not the skill has a combo associated with it <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if has a combo, false otherwise'}, params: [{name: 'skill', type: 'Skill', description: 'the skill to check'}]}, {name: 'hasConflict', description: 'Checks whether or not there would be a conflict with the given combo ID if it were to be added <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if conflict, false otherwise'}, params: [{name: 'id', type: 'int', description: 'combo ID'}]}, {name: 'isComboUsed', description: 'Checks if a combo is currently active with any skill for the player. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if active, false otherwise'}, params: [{name: 'id', type: 'int', description: 'ID of the combo'}]}, {name: 'isValidCombo', description: 'Checks if the combo ID is a valid combo <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if valid, false otherwise'}, params: [{name: 'id', type: 'int', description: 'ID of the combo'}]}, {name: 'removeSkill', description: 'Removes a skill from the available combos <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'skill', type: 'Skill', description: 'skill to remove'}]}, {name: 'setSkill', description: 'Sets the combo for a skill, overriding any previous combo for the skill. If the skill didn\'t have a combo before, this will add it anyway. If the combo ID is already in use, it will reassign the conflicting skill. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if set successfully, false otherwise'}, params: [{name: 'skill', type: 'Skill', description: 'skill to set the combo for'}, {name: 'id', type: 'int', description: 'ID of the combo to use'}]}], fields: [{name: 'PlayerCombos', description: 'Represents the click combos available for a player to use along with their current click pattern', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerData', type: 'class', isStatic: 0, isFinal: 1, isAbstract: 0, description: 'Represents one account for a player which can contain one class from each group and the skills in each of those classes. You should not instantiate this class yourself and instead get it from the SkillAPI static methods.', ext: 0, impl: [], constructors: [{name: 'PlayerData', description: 'Initializes a new account data representation for a player. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'OfflinePlayer', description: 'player to store the data for'}, {name: 'init', type: 'boolean', description: ''}]}], methods: [{name: 'addBonusAttributes', description: 'Adds bonus attributes to the player. These do not count towards the max invest amount and cannot be refunded. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'attribute key'}, {name: 'amount', type: 'int', description: 'amount to add'}]}, {name: 'addMaxHealth', description: 'Gives max health to the player. This does not carry over to other accounts and will reset when SkillAPI is disabled. This does however carry over through death and professions. This will accept negative values. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'double', description: 'amount of bonus health to give'}]}, {name: 'addMaxMana', description: 'Gives max mana to the player. This does not carry over to other accounts and will reset when SkillAPI is disabled. This does however carry over through death and professions. This will accept negative values. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'double', description: 'amount of bonus mana to give'}]}, {name: 'autoLevel', description: 'Attempts to auto-level any skills that are able to do so', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'bind', description: 'Binds a skill to a material for the player. The bind will not work if the skill was already bound to the material. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if was able to bind the skill, false otherwise'}, params: [{name: 'mat', type: 'Material', description: 'material to bind the skill to'}, {name: 'skill', type: 'PlayerSkill', description: 'skill to bind to the material'}]}, {name: 'canProfess', description: 'Checks whether or not the player can profess into the given class. This checks to make sure the player is currently professed as the parent of the given class and is high enough of a level to do so. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if can profess, false otherwise'}, params: [{name: 'rpgClass', type: 'RPGClass', description: 'class to check'}]}, {name: 'cast', description: 'Casts a skill by name for the player. In order to cast the skill, the player must be online, have the skill unlocked, have enough mana, have the skill off cooldown, and have a proper target if applicable. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if successfully cast the skill, false otherwise'}, params: [{name: 'skillName', type: 'String', description: 'name of the skill ot cast'}]}, {name: 'cast', description: 'Casts a skill for the player. In order to cast the skill, the player must be online, have the skill unlocked, have enough mana, have the skill off cooldown, and have a proper target if applicable. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if successfully cast the skill, false otherwise'}, params: [{name: 'skill', type: 'PlayerSkill', description: 'skill to cast'}]}, {name: 'check', description: 'Checks the cooldown and mana requirements for a skill <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if can use'}, params: [{name: 'skill', type: 'PlayerSkill', description: 'skill to check for'}, {name: 'cooldown', type: 'boolean', description: 'whether or not to check cooldowns'}, {name: 'mana', type: 'boolean', description: 'whether or not to check mana requirements'}]}, {name: 'clearAllBinds', description: 'Clears all binds the player currently has', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'clearBind', description: 'Clears a skill binding on the material. If there is no binding on the material, this will do nothing. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if a binding was cleared, false otherwise'}, params: [{name: 'mat', type: 'Material', description: 'material to clear bindings from'}]}, {name: 'clearBinds', description: 'Clears the skill binding for the given skill. This will remove the bindings on all materials involving the skill. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'skill', type: 'Skill', description: 'skill to unbind'}]}, {name: 'clearBonuses', description: 'Clears bonus health/mana', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'downgradeSkill', description: 'Downgrades a skill owned by the player. The player must own the skill and it must not currently be level 0 for the player to downgrade the skill. This will refund the skill point cost when downgrading the skill. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if successfully downgraded, false otherwise'}, params: [{name: 'skill', type: 'Skill', description: 'skill to downgrade'}]}, {name: 'endInit', description: 'Ends the initialization flag for the data. Used by the API to avoid async issues. Do not use this in other plugins.', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'getAttribute', description: 'Gets the number of attribute points the player has between invested and bonus sources. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'number of total points'}, params: [{name: 'key', type: 'String', description: 'attribute key'}]}, {name: 'getAttributeData', description: 'Retrieves the player\'s attribute data. Modifying this will modify the player\'s actual data. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HashMap<String,Integer>', description: 'the player\'s attribute data'}, params: []}, {name: 'getAttributePoints', description: 'Retrieves the current number of attribute points the player has <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'attribute point total'}, params: []}, {name: 'getAttributes', description: 'Retrieves a map of all player attribute totals. Modifying the map will not change actual player attributes. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HashMap<String,Integer>', description: 'attribute totals'}, params: []}, {name: 'getBinds', description: 'Retrieves the bound data for the player. Modifying this map will modify the bindings the player has. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HashMap<Material,PlayerSkill>', description: 'the skill binds data for the player'}, params: []}, {name: 'getBoundSkill', description: 'Retrieves a skill the player has bound by material <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerSkill', description: 'skill bound to the material or null if none are bound'}, params: [{name: 'mat', type: 'Material', description: 'material to get the bind for'}]}, {name: 'getClass', description: 'Retrieves the data of a class the player professed as by group. This is case-sensitive. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerClass', description: 'professed class data or null if not professed for the group'}, params: [{name: 'group', type: 'String', description: 'group to get the profession for'}]}, {name: 'getClasses', description: 'Retrieves the collection of the data for classes the player has professed as. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Collection<PlayerClass>', description: 'collection of the data for professed classes'}, params: []}, {name: 'getComboData', description: 'Returns the data for the player\'s combos <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerCombos', description: 'combo data for the player'}, params: []}, {name: 'getInvestedAttribute', description: 'Gets the number of attribute points invested in the given attribute <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'number of invested points'}, params: [{name: 'key', type: 'String', description: 'attribute key'}]}, {name: 'getInvestedAttributes', description: 'Retrieves a map of all attributes the player invested. This doesn\'t count base attributes from classes or bonus attributes from effects. Modifying the map will not change actual player attributes. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HashMap<String,Integer>', description: 'attribute totals'}, params: []}, {name: 'getLastHealth', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'health during last logout'}, params: []}, {name: 'getMainClass', description: 'Retrieves the data of the professed class under the main class group. The "main" group is determined by the setting in the config. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerClass', description: 'main professed class data or null if not professed for the main group'}, params: []}, {name: 'getMana', description: 'Retrieves the amount of mana the player currently has. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'current player mana'}, params: []}, {name: 'getMaxMana', description: 'Retrieves the max amount of mana the player can have including bonus mana <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'max amount of mana the player can have'}, params: []}, {name: 'getPlayer', description: 'Retrieves the Bukkit player object of the owner <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player', description: 'Bukkit player object of the owner or null if offline'}, params: []}, {name: 'getPlayerName', description: 'Retrieves the name of the owner <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'name of the owner'}, params: []}, {name: 'getScheme', description: 'Retrieves the name of the active map menu scheme for the player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'map menu scheme name'}, params: []}, {name: 'getShownClassName', description: 'Retrieves the name of the class shown in the skill tree <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'class name'}, params: []}, {name: 'getSkill', description: 'Retrieves a skill of the owner by name. This is not case-sensitive. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerSkill', description: 'data for the skill or null if the player doesn\'t have the skill'}, params: [{name: 'name', type: 'String', description: 'name of the skill'}]}, {name: 'getSkillBar', description: 'Retrieves the skill bar data for the owner <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerSkillBar', description: 'skill bar data of the owner'}, params: []}, {name: 'getSkillLevel', description: 'Retrieves the level of a skill for the owner. This is not case-sensitive. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'level of the skill or 0 if not found'}, params: [{name: 'name', type: 'String', description: 'name of the skill'}]}, {name: 'getSkills', description: 'Retrieves all of the skill data the player has. Modifying this collection will not modify the player\'s owned skills but modifying one of the elements will change that element\'s data for the player. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Collection<PlayerSkill>', description: 'collection of skill data for the owner'}, params: []}, {name: 'giveAttribPoints', description: 'Gives the player attribute points <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'int', description: 'amount of attribute points'}]}, {name: 'giveAttribute', description: 'Gives the player attribute points without costing attribute points. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'attribute to give points for'}, {name: 'amount', type: 'int', description: 'amount to give'}]}, {name: 'giveExp', description: 'Gives experience to the player from the given source <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'double', description: 'amount of experience to give'}, {name: 'source', type: 'ExpSource', description: 'source of the experience'}]}, {name: 'giveLevels', description: 'Gives levels to the player for all classes matching the experience source <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'int', description: 'amount of levels to give'}, {name: 'source', type: 'ExpSource', description: 'source of the levels'}]}, {name: 'giveMana', description: 'Gives mana to the player from the given mana source. This will not cause the player\'s mana to go above the max amount. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'double', description: 'amount of mana to give'}, {name: 'source', type: 'ManaSource', description: 'source of the mana'}]}, {name: 'giveMana', description: 'Gives mana to the player from an unknown source. This will not cause the player\'s mana to go above their max amount. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'double', description: 'amount of mana to give'}]}, {name: 'givePoints', description: 'Gives skill points to the player for all classes matching the experience source <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'int', description: 'amount of levels to give'}, {name: 'source', type: 'ExpSource', description: 'source of the levels'}]}, {name: 'giveSkill', description: 'Gives the player a skill outside of the normal class skills. This skill will not show up in a skill tree. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'skill', type: 'Skill', description: 'skill to give the player'}]}, {name: 'giveSkill', description: 'Gives the player a skill using the class data as a parent. This skill will not show up in a skill tree. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'skill', type: 'Skill', description: 'skill to give the player'}, {name: 'parent', type: 'PlayerClass', description: 'parent class data'}]}, {name: 'hasAttribute', description: 'Checks whether or not the player has any points invested in a given attribute <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if any points are invested, false otherwise'}, params: [{name: 'key', type: 'String', description: 'attribute key'}]}, {name: 'hasClass', description: 'Checks whether or not a player has a class within the given group <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if has a class in the group, false otherwise'}, params: [{name: 'group', type: 'String', description: 'class group to check'}]}, {name: 'hasClass', description: 'Checks whether or not the player has as least one class they have professed as. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if professed, false otherwise'}, params: []}, {name: 'hasMana', description: 'Checks whether or not the player has at least the specified amount of mana <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if has the amount of mana, false otherwise'}, params: [{name: 'amount', type: 'double', description: 'required mana amount'}]}, {name: 'hasSkill', description: 'Checks if the owner has a skill by name. This is not case-sensitive and does not check to see if the skill is unlocked. It only checks if the skill is available to upgrade/use. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if has the skill, false otherwise'}, params: [{name: 'name', type: 'String', description: 'name of the skill'}]}, {name: 'init', description: 'Initializes the application of the data for the player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to set up for'}]}, {name: 'isBound', description: 'Checks whether or not the material has a skill bound to it <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if a skill is bound to it, false otherwise'}, params: [{name: 'mat', type: 'Material', description: 'material to check'}]}, {name: 'isClass', description: 'Checks whether or not the player is professed as the class or any of its children. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if professed as the class or one of its children, false otherwise'}, params: [{name: 'rpgClass', type: 'RPGClass', description: 'class to check'}]}, {name: 'isExactClass', description: 'Checks whether or not the player is professed as the class without checking child classes. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if professed as the specific class, false otherwise'}, params: [{name: 'rpgClass', type: 'RPGClass', description: 'class to check'}]}, {name: 'loseExp', description: 'Causes the player to lose experience as a penalty (generally for dying)', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'openAttributeMenu', description: 'Opens the attribute menu', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'profess', description: 'Professes the player into the class if they are able to. This will reset the class data if the group options are set to reset upon profession. Otherwise, all skills, experience, and levels of the current class under the group will be retained and carried over into the new profession. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if successfully professed, false otherwise'}, params: [{name: 'rpgClass', type: 'RPGClass', description: 'class to profess into'}]}, {name: 'record', description: 'Records any data to save with class data <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to record for'}]}, {name: 'refundAttribute', description: 'Refunds an attribute point from the given attribute if there are any points invested in it. If there are none, this will do nothing. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'attribute key'}]}, {name: 'refundAttributes', description: 'Refunds all spent attribute points for a specific attribute', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: ''}]}, {name: 'refundAttributes', description: 'Refunds all spent attribute points', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'regenMana', description: 'Regenerates mana for the player based on the regen amounts of professed classes', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'reset', description: 'Resets the class data for the owner under the given group. This will remove the profession entirely, leaving no remaining data until the player professes again to a starting class. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'group', type: 'String', description: 'group to reset'}]}, {name: 'resetAll', description: 'Resets all profession data for the player. This clears all professions the player has, leaving no remaining data until the player professes again to a starting class.', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'resetAttribs', description: 'Resets attributes for the player', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'scaleDynamic', description: 'Scales a dynamic skill\'s value using global modifiers <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'the modified value'}, params: [{name: 'component', type: 'EffectComponent', description: 'component holding the value'}, {name: 'key', type: 'String', description: 'key of the value'}, {name: 'value', type: 'double', description: 'unmodified value'}, {name: 'self', type: 'boolean', description: 'whether or not the player is the target'}]}, {name: 'scaleStat', description: 'Scales a stat value using the player\'s attributes <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'modified value'}, params: [{name: 'stat', type: 'String', description: 'stat key'}, {name: 'value', type: 'double', description: 'base value'}]}, {name: 'setAttribPoints', description: 'Sets the current amount of attribute points <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'int', description: 'amount of points to have'}]}, {name: 'setClass', description: 'Sets the professed class for the player for the corresponding group. This will not save any skills, experience, or levels of the previous class if there was any. The new class will start at level 1 with 0 experience. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerClass', description: 'the player-specific data for the new class'}, params: [{name: 'rpgClass', type: 'RPGClass', description: 'class to assign to the player'}]}, {name: 'setLastHealth', description: 'Used by the API for restoring health - do not use this. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'health', type: 'double', description: 'health logged off with'}]}, {name: 'setMana', description: 'Sets the player\'s amount of mana without launching events <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'double', description: 'current mana'}]}, {name: 'setScheme', description: 'Sets the active scheme name for the player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'name', type: 'String', description: 'name of the scheme'}]}, {name: 'showSkills', description: 'Shows the skill tree for the player. If the player has multiple trees, this will show the list of skill trees they can view. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if able to show the player, false otherwise'}, params: [{name: 'player', type: 'Player', description: 'player to show the skill tree for'}]}, {name: 'showSkills', description: 'Shows the skill tree for the player. If the player has multiple trees, this will show the list of skill trees they can view.', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'showSkills', description: 'Shows the skill tree to the player for the given class <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if succeeded, false otherwise'}, params: [{name: 'player', type: 'Player', description: 'player to show'}, {name: 'playerClass', type: 'PlayerClass', description: 'class to look for'}]}, {name: 'startPassives', description: 'Starts passive abilities for the player if they are online. This is already called by the API and shouldn\'t be called by other plugins. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to set the passive skills up for'}]}, {name: 'stopPassives', description: 'Stops passive abilities for the player if they are online. This is already called by the API and shouldn\'t be called by other plugins. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to stop the passive skills for'}]}, {name: 'upAttribute', description: 'Invests a point in the attribute if the player has any remaining attribute points. If the player has no remaining points, this will do nothing. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'attribute key'}]}, {name: 'updateHealthAndMana', description: 'Updates the player\'s max health and mana using class data. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to update the health and mana for'}]}, {name: 'updateScoreboard', description: 'Updates the scoreboard with the player\'s current class. This is already done by the API and doesn\'t need to be done by other plugins.', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'upgradeSkill', description: 'Upgrades a skill owned by the player. The player must own the skill, have enough skill points, meet the level and skill requirements, and not have maxed out the skill already in order to upgrade the skill. This will consume the skill point cost while upgrading the skill. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if successfully was upgraded, false otherwise'}, params: [{name: 'skill', type: 'Skill', description: 'skill to upgrade'}]}, {name: 'useMana', description: 'Takes mana away from the player for the specified reason. This will not cause the player to fall below 0 mana. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'double', description: 'amount of mana to take away'}, {name: 'cost', type: 'ManaCost', description: 'source of the mana cost'}]}, {name: 'useMana', description: 'Takes mana away from the player for an unknown reason. This will not cause the player to fall below 0 mana. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'double', description: 'amount of mana to take away'}]}], fields: [{name: 'PlayerData', description: 'Represents one account for a player which can contain one class from each group and the skills in each of those classes. You should not instantiate this class yourself and instead get it from the SkillAPI static methods.', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerSkill', type: 'class', isStatic: 0, isFinal: 1, isAbstract: 0, description: 'Represents player-specific data for a skill such as the player\'s current level for the skill, the cooldown, and other related data.', ext: 0, impl: [], constructors: [{name: 'PlayerSkill', description: 'Constructs a new PlayerSkill. You should not need to use this constructor as it is provided by the API. Get instances through the PlayerData object. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'PlayerData', description: 'owning player data'}, {name: 'skill', type: 'Skill', description: 'skill template'}, {name: 'parent', type: 'PlayerClass', description: 'owning player class'}]}], methods: [{name: 'addCooldown', description: 'Adds to the current cooldown time, lengthening the time until it can be cast again. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'seconds', type: 'double', description: 'number of seconds to add to the cooldown'}]}, {name: 'addLevels', description: 'Adds levels to the skill. This will not update passive effects. To level up/down the skill properly, use the upgrade and downgrade methods in PlayerData. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'int', description: 'number of levels to add'}]}, {name: 'addPoints', description: 'Adds to the number of invested points in the skill. This shouldn\'t be used by other plugins as it is just for keeping track of points for when it is reset. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'int', description: 'amount of invested points to add'}]}, {name: 'getBind', description: 'Retrieves the material this skill is currently bound to. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Material', description: 'the current material bound to or null if not bound'}, params: []}, {name: 'getCooldown', description: 'Gets the current cooldown of the skill in seconds. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'current cooldown in seconds or 0 if not on cooldown'}, params: []}, {name: 'getCost', description: 'Retrieves the cost to upgrade the skill to the next level <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'cost to upgrade the skill to the next level'}, params: []}, {name: 'getData', description: 'Retrieves the template data for this skill. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Skill', description: 'skill template data'}, params: []}, {name: 'getLevel', description: 'Retrieves the current level the player has the skill at <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'current skill level'}, params: []}, {name: 'getLevelReq', description: 'Retrieves the level requirement of the skill to get to the next level <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'the level requirement to get to the next level'}, params: []}, {name: 'getManaCost', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'mana cost to use the skill'}, params: []}, {name: 'getPlayerClass', description: 'Retrieves the owning player class. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerClass', description: 'owning player class'}, params: []}, {name: 'getPlayerData', description: 'Retrieves the owning player\'s data. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'owning player\'s data'}, params: []}, {name: 'getPoints', description: 'Retrieves the number of points invested in upgrading this skill <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'invested points'}, params: []}, {name: 'getStatus', description: 'Retrieves the current ready status of the skill which could be on cooldown, missing mana, or ready. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'SkillStatus', description: 'the ready status of the skill'}, params: []}, {name: 'isMaxed', description: 'Checks whether or not the skill is at its maximum level <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if at max level, false otherwise'}, params: []}, {name: 'isOnCooldown', description: 'Checks whether or not the skill is currently on cooldown <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if on cooldown, false otherwise'}, params: []}, {name: 'isUnlocked', description: 'Checks whether or not the skill is currently unlocked for the player. This requires the skill to be at least level 1. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if unlocked, false otherwise'}, params: []}, {name: 'refreshCooldown', description: 'Refreshes the cooldown of the skill, allowing the player to cast the skill again.', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'revert', description: 'Reverts the skill back to level 0, locking it from casting and refunding invested skill points', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'setBind', description: 'Sets the bind material of the skill <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'mat', type: 'Material', description: 'new bind material'}]}, {name: 'setLevel', description: 'Sets the level of the skill. This will not update passive effects. To level up/down the skill properly, use the upgrade and downgrade methods in PlayerData. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'level', type: 'int', description: 'new level of the skill'}]}, {name: 'setPoints', description: 'Sets the number of invested points in the skill. This shouldn\'t be used by other plugins as it is just for keeping track of points for when it is reset. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'points', type: 'int', description: 'new point amount'}]}, {name: 'startCooldown', description: 'Starts the cooldown of the skill', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'subtractCooldown', description: 'Subtracts from the current cooldown time, shortening the time until it can be cast again. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'seconds', type: 'double', description: 'number of seconds to subtract from the cooldown'}]}], fields: [{name: 'PlayerSkill', description: 'Represents player-specific data for a skill such as the player\'s current level for the skill, the cooldown, and other related data.', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerSkillBar', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A skill bar for a player', ext: 0, impl: [], constructors: [{name: 'PlayerSkillBar', description: 'Initial constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'PlayerData', description: 'owning player data'}]}], methods: [{name: 'apply', description: 'Applies an action for the item slot <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'slot', type: 'int', description: 'slot to apply to'}]}, {name: 'applySettings', description: 'Applies setting data to the skill bar, applying locked slots if they aren\'t matching.', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'assign', description: 'Assigns the skill to the slot <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'skill', type: 'PlayerSkill', description: 'skill to assign'}, {name: 'slot', type: 'int', description: 'slot to assign to'}]}, {name: 'clear', description: 'Clears the skill bar icons for the player and prevents them from dropping on death <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerDeathEvent', description: 'death event of the player to clear for'}]}, {name: 'clear', description: 'Clears the skill bar icons for the player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'HumanEntity', description: 'player to clear for'}]}, {name: 'countOpenSlots', description: '<p>Counts the number of open slots in the player\'s inventory besides skill slots</p> <p>This returns -1 if the player is offline</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'open slots in the players inventory'}, params: []}, {name: 'getData', description: '<p>Retrieves the data for the skill bar.</p> <p>The key is the slot of the hotbar.</p> <p>The value is the skill assigned to the slot.</p> <p>Modifying this map will change the player\'s skill bar data.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HashMap<Integer,String>', description: 'skill bar data'}, params: []}, {name: 'getFirstWeaponSlot', description: 'Retrieves the slot for the first weapon slot <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'first weapon slot'}, params: []}, {name: 'getItemsInSkillSlots', description: '<p>Counts the item in the owning player\'s inventory in the skill slots</p> <p>If the player is offline, this returns -1</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'number of items in the skill slots'}, params: []}, {name: 'getPlayer', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player', description: 'name of the player owning the skill bar'}, params: []}, {name: 'getPlayerData', description: '<p>Retrieves the owner of the skill bar represented as a VersionPlayer</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'VersionPlayer of the owner'}, params: []}, {name: 'isEnabled', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'whether or not the skill bar is enabled'}, params: []}, {name: 'isSetup', description: 'Whether or not the skill bar has been set up recently <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if setup recently, false otherwise'}, params: []}, {name: 'isWeaponSlot', description: 'Checks if the slot is the weapon slot for the player <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if weapon slot, false otherwise'}, params: [{name: 'slot', type: 'int', description: 'slot to check'}]}, {name: 'reset', description: 'Resets the skill bar', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'setup', description: 'Sets up the player for the skill bar <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'HumanEntity', description: 'player to set up for'}]}, {name: 'toggleEnabled', description: 'Toggles the enabled state of the skill bar', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'toggleSlot', description: 'Toggles a slot between weapon and skill <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'slot', type: 'int', description: 'slot to toggle'}]}, {name: 'unlock', description: 'Adds an unlocked skill to the skill bar <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'skill', type: 'PlayerSkill', description: 'unlocked skill'}]}, {name: 'update', description: 'Updates the player\'s skill bar icons', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'HumanEntity', description: ''}]}, {name: 'updateCooldowns', description: 'Updates the displayed cooldown for the skill bar', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'PlayerSkillBar', description: 'A skill bar for a player', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'CustomProjectile', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 1, description: 'Base class for custom projectiles', ext: 'BukkitRunnable', impl: ['Metadatable'], constructors: [{name: 'CustomProjectile', description: 'Constructs a new custom projectile and starts its timer task <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'thrower', type: 'LivingEntity', description: 'entity firing the projectile'}]}], methods: [{name: 'calcRain', description: 'Calculates the locations to spawn projectiles to rain them down over a given location. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ArrayList<Location>', description: 'list of locations to spawn projectiles'}, params: [{name: 'loc', type: 'Location', description: 'the center location to rain on'}, {name: 'radius', type: 'double', description: 'radius of the circle'}, {name: 'height', type: 'double', description: 'height above the target to use'}, {name: 'amount', type: 'int', description: 'amount of locations to calculate'}]}, {name: 'calcSpread', description: 'Calculates the directions for projectiles spread from the centered direction using the given angle and number of projectiles to be fired. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ArrayList<Vector>', description: 'the list of calculated directions'}, params: [{name: 'dir', type: 'Vector', description: 'center direction of the spread'}, {name: 'angle', type: 'double', description: 'angle which to spread at'}, {name: 'amount', type: 'int', description: 'amount of directions to calculate'}]}, {name: 'checkCollision', description: 'Checks if the projectile collides with a given list of entities', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'void', description: ''}, params: []}, {name: 'dSq', description: 'Segment distance squared <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'segment distance to the point squared'}, params: [{name: 'p', type: 'Location', description: 'some point'}, {name: 'a', type: 'Location', description: 'first point of the segment'}, {name: 'b', type: 'Location', description: 'second point of the segment'}]}, {name: 'expire', description: 'Handles expiring due to range or leaving loaded chunks', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'protected', returnValue: {type: 'Event', description: ''}, params: []}, {name: 'getCollisionRadius', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'protected', returnValue: {type: 'double', description: 'squared radius for colliding'}, params: []}, {name: 'getLocation', description: 'Retrieves the location of the projectile <br><br', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'public', returnValue: {type: 'Location', description: 'location of the projectile'}, params: []}, {name: 'getMetadata', description: '<p>Retrieves a metadata value from the projectile.</p> <p>If no metadata was set with the key, this will instead return null</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<MetadataValue>', description: 'the metadata value'}, params: [{name: 'key', type: 'String', description: 'the key for the metadata'}]}, {name: 'getNearbyEntities', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'List<LivingEntity>', description: 'list of nearby living entities'}, params: []}, {name: 'getShooter', description: 'Retrieves the entity that shot the projectile <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'LivingEntity', description: 'the entity that shot the projectile'}, params: []}, {name: 'hasMetadata', description: '<p>Checks whether or not this has a metadata set for the key.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'whether or not there is metadata set for the key'}, params: [{name: 'key', type: 'String', description: 'the key for the metadata'}]}, {name: 'hit', description: 'Handles hitting an entity <br><br', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'protected', returnValue: {type: 'Event', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity the projectile hit'}]}, {name: 'isValid', description: 'Checks whether or not the projectile is still valid. Invalid would mean landing on the ground or leaving the loaded chunks.', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'land', description: 'Handles landing on terrain', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'protected', returnValue: {type: 'Event', description: ''}, params: []}, {name: 'removeMetadata', description: '<p>Removes a metadata value from the object.</p> <p>If no metadata is set for the key, this will do nothing.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'the key for the metadata'}, {name: 'plugin', type: 'Plugin', description: 'plugin to remove the metadata for'}]}, {name: 'setAllyEnemy', description: 'Sets whether or not the projectile can hit allies or enemies <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'ally', type: 'boolean', description: 'whether or not allies can be hit'}, {name: 'enemy', type: 'boolean', description: 'whether or not enemies can be hit'}]}, {name: 'setCallback', description: 'Sets the callback handler for the projectile <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'callback', type: 'ProjectileCallback', description: 'callback handler'}]}, {name: 'setMetadata', description: '<p>Sets a bit of metadata onto the projectile.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'the key for the metadata'}, {name: 'meta', type: 'MetadataValue', description: 'the metadata to set'}]}], fields: [{name: 'ally', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'boolean', scope: 'protected'}, {name: 'callback', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'ProjectileCallback', scope: 'protected'}, {name: 'CustomProjectile', description: 'Base class for custom projectiles', isStatic: 0, isFinal: 0, isAbstract: 1, type: '', scope: 'public'}, {name: 'enemy', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'boolean', scope: 'protected'}, {name: 'thrower', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'LivingEntity', scope: 'protected'}], scope: 'public'},
        {name: 'ItemProjectile', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Represents a projectile that uses an item as the actual projectile.</p>', ext: 'CustomProjectile', impl: [], constructors: [{name: 'ItemProjectile', description: '<p>Constructs a new item projectile.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'thrower', type: 'LivingEntity', description: 'the entity throwing the projectile'}, {name: 'loc', type: 'Location', description: 'the location to shoot from'}, {name: 'item', type: 'ItemStack', description: 'the item to represent the projectile'}, {name: 'vel', type: 'Vector', description: 'the velocity of the projectile'}]}], methods: [{name: 'cancel', description: 'Removes the item on cancelling the task', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'expire', description: 'Handles expiring due to range or leaving loaded chunks', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'Event', description: ''}, params: []}, {name: 'getCollisionRadius', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'double', description: 'squared radius for colliding'}, params: []}, {name: 'getLocation', description: 'Retrieves the location of the projectile <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Location', description: 'location of the projectile'}, params: []}, {name: 'hit', description: 'Handles hitting an entity <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'Event', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity the projectile hit'}]}, {name: 'land', description: 'Handles landing on terrain', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'Event', description: ''}, params: []}, {name: 'rain', description: 'Fires a spread of projectiles from the location. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ArrayList<ItemProjectile>', description: 'list of fired projectiles'}, params: [{name: 'shooter', type: 'LivingEntity', description: 'entity shooting the projectiles'}, {name: 'center', type: 'Location', description: 'the center location to rain on'}, {name: 'item', type: 'ItemStack', description: 'the item to use for the projectile'}, {name: 'radius', type: 'double', description: 'radius of the circle'}, {name: 'height', type: 'double', description: 'height above the center location'}, {name: 'speed', type: 'double', description: 'speed of the projectiles'}, {name: 'amount', type: 'int', description: 'number of projectiles to fire'}, {name: 'callback', type: 'ProjectileCallback', description: 'optional callback for when projectiles hit'}]}, {name: 'run', description: '<p>Updates the projectile\'s position.</p> <p>This is for the repeating task and if you call it yourself, it will move faster than it should.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'spread', description: 'Fires a spread of projectiles from the location. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ArrayList<ItemProjectile>', description: 'list of fired projectiles'}, params: [{name: 'shooter', type: 'LivingEntity', description: 'entity shooting the projectiles'}, {name: 'center', type: 'Vector', description: 'the center velocity of the spread'}, {name: 'loc', type: 'Location', description: 'location to shoot from'}, {name: 'item', type: 'ItemStack', description: 'the item to use for the projectile'}, {name: 'angle', type: 'double', description: 'angle of the spread'}, {name: 'amount', type: 'int', description: 'number of projectiles to fire'}, {name: 'callback', type: 'ProjectileCallback', description: 'optional callback for when projectiles hit'}]}], fields: [{name: 'ItemProjectile', description: '<p>Represents a projectile that uses an item as the actual projectile.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ParticleProjectile', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A fake projectile that plays particles along its path', ext: 'CustomProjectile', impl: [], constructors: [{name: 'ParticleProjectile', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'shooter', type: 'LivingEntity', description: 'entity that shot the projectile'}, {name: 'level', type: 'int', description: 'level to use for scaling the speed'}, {name: 'loc', type: 'Location', description: 'initial location of the projectile'}, {name: 'settings', type: 'Settings', description: 'settings for the projectile'}]}], methods: [{name: 'expire', description: 'Handles expiring due to range or leaving loaded chunks', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'Event', description: ''}, params: []}, {name: 'getCollisionRadius', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'double', description: 'squared radius for colliding'}, params: []}, {name: 'getLocation', description: 'Retrieves the location of the projectile <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Location', description: 'location of the projectile'}, params: []}, {name: 'getVelocity', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Vector', description: 'velocity of the projectile'}, params: []}, {name: 'hit', description: 'Handles hitting an entity <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'Event', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity the projectile hit'}]}, {name: 'land', description: 'Handles landing on terrain', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'Event', description: ''}, params: []}, {name: 'rain', description: 'Fires a spread of projectiles from the location. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ArrayList<ParticleProjectile>', description: 'list of fired projectiles'}, params: [{name: 'shooter', type: 'LivingEntity', description: 'entity shooting the projectiles'}, {name: 'level', type: 'int', description: 'level to use for scaling the speed'}, {name: 'center', type: 'Location', description: 'the center location to rain on'}, {name: 'settings', type: 'Settings', description: 'settings to use when firing'}, {name: 'radius', type: 'double', description: 'radius of the circle'}, {name: 'height', type: 'double', description: 'height above the center location'}, {name: 'amount', type: 'int', description: 'number of projectiles to fire'}, {name: 'callback', type: 'ProjectileCallback', description: 'optional callback for when projectiles hit'}]}, {name: 'run', description: 'Updates the projectiles position and checks for collisions', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'setCallback', description: 'Sets the callback handler for the projectile <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'callback', type: 'ProjectileCallback', description: 'callback handler'}]}, {name: 'setVelocity', description: 'Sets the velocity of the projectile <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'vel', type: 'Vector', description: 'new velocity'}]}, {name: 'spread', description: 'Fires a spread of projectiles from the location. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ArrayList<ParticleProjectile>', description: 'list of fired projectiles'}, params: [{name: 'shooter', type: 'LivingEntity', description: 'entity shooting the projectiles'}, {name: 'level', type: 'int', description: 'level to use for scaling the speed'}, {name: 'center', type: 'Vector', description: 'the center direction of the spread'}, {name: 'loc', type: 'Location', description: 'location to shoot from'}, {name: 'settings', type: 'Settings', description: 'settings to use when firing'}, {name: 'angle', type: 'double', description: 'angle of the spread'}, {name: 'amount', type: 'int', description: 'number of projectiles to fire'}, {name: 'callback', type: 'ProjectileCallback', description: 'optional callback for when projectiles hit'}]}, {name: 'teleport', description: 'Teleports the projectile to a location <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'loc', type: 'Location', description: 'location to teleport to'}]}], fields: [{name: 'FREQUENCY', description: 'Settings key for the projectile\'s frequency of playing particles', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'LIFESPAN', description: 'Settings key for the projectile lifespan', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'ParticleProjectile', description: 'A fake projectile that plays particles along its path', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SPEED', description: 'Settings key for the projectile speed', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'Skill', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 1, description: 'Represents a template for a skill used in the RPG system. This is the class to extend when creating your own custom skills.', ext: 0, impl: [], constructors: [{name: 'Skill', description: 'Initializes a new skill that doesn\'t require any other skill. The indicator\'s display name and lore will be used as the layout for the skill tree display. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'name', type: 'String', description: 'name of the skill'}, {name: 'type', type: 'String', description: 'descriptive type of the skill'}, {name: 'indicator', type: 'ItemStack', description: 'indicator to respresent the skill'}, {name: 'maxLevel', type: 'int', description: 'max level the skill can reach'}]}, {name: 'Skill', description: 'Initializes a skill that requires another skill to be upgraded before it can be upgraded itself. The indicator\'s display name and lore will be used as the layout for the skill tree display. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'name', type: 'String', description: 'name of the skill'}, {name: 'type', type: 'String', description: 'descriptive type of the skill'}, {name: 'indicator', type: 'ItemStack', description: 'indicator to represent the skill'}, {name: 'maxLevel', type: 'int', description: 'max level the skill can reach'}, {name: 'skillReq', type: 'String', description: 'name of the skill required to raise this one'}, {name: 'skillReqLevel', type: 'int', description: 'level of the required skill needed'}]}, {name: 'Skill', description: 'Initializes a new skill that doesn\'t require any other skill. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'name', type: 'String', description: 'name of the skill'}, {name: 'type', type: 'String', description: 'descriptive type of the skill'}, {name: 'indicator', type: 'Material', description: 'indicator to represent the skill'}, {name: 'maxLevel', type: 'int', description: 'max level the skill can reach'}]}, {name: 'Skill', description: 'Initializes a skill that requires another skill to be upgraded before it can be upgraded itself. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'name', type: 'String', description: 'name of the skill'}, {name: 'type', type: 'String', description: 'descriptive type of the skill'}, {name: 'indicator', type: 'Material', description: 'indicator to represent the skill'}, {name: 'maxLevel', type: 'int', description: 'max level the skill can reach'}, {name: 'skillReq', type: 'String', description: 'name of the skill required to raise this one'}, {name: 'skillReqLevel', type: 'int', description: 'level of the required skill needed'}]}], methods: [{name: 'canAutoLevel', description: 'Checks whether or not the skill can automatically level up to the next stage. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if can level up automatically, false otherwise'}, params: []}, {name: 'canCast', description: 'Checks whether or not this skill can be cast by players <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if can be cast, false otherwise'}, params: []}, {name: 'clearCombo', description: 'Clears the set combo for the skill. Only the API should call this.', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'getCombo', description: 'Retrieves the ID of the skill\'s combo <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'combo ID'}, params: []}, {name: 'getCooldown', description: 'Retrieves the cooldown of the skill in seconds <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'cooldown'}, params: [{name: 'level', type: 'int', description: 'current level of the skill'}]}, {name: 'getCost', description: 'Retrieves the skill point cost of the skill <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'skill point cost'}, params: [{name: 'level', type: 'int', description: 'current level of the skill'}]}, {name: 'getDescription', description: 'Retrieves the skill\'s description <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'description of the skill'}, params: []}, {name: 'getIndicator', description: 'Retrieves the indicator representing the skill for menus <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: 'indicator for the skill'}, params: []}, {name: 'getIndicator', description: 'Retrieves the indicator for the skill while applying filters to match the player-specific data. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: 'filtered skill indicator'}, params: [{name: 'skillData', type: 'PlayerSkill', description: 'player data'}]}, {name: 'getKey', description: 'Retrieves the configuration key for the skill <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'configuration key for the skill'}, params: []}, {name: 'getLevelReq', description: 'Retrieves the level requirement for the skill to reach the next level <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'level requirement for the next level'}, params: [{name: 'level', type: 'int', description: 'current level of the skill'}]}, {name: 'getManaCost', description: 'Retrieves the mana cost of the skill <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'mana cost'}, params: [{name: 'level', type: 'int', description: 'current level of the skill'}]}, {name: 'getMaxLevel', description: 'Retrieves the max level the skill can reach <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'max skill level'}, params: []}, {name: 'getMessage', description: 'Retrieves the message for the skill to display when cast. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'cast message of the skill'}, params: []}, {name: 'getName', description: 'Retrieves the name of the skill <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'skill name'}, params: []}, {name: 'getRange', description: 'Retrieves the range of the skill in blocks <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'target range'}, params: [{name: 'level', type: 'int', description: 'current level of the skill'}]}, {name: 'getSettings', description: 'Retrieves the settings for the skill in a read-only format <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ReadOnlySettings', description: 'settings for the skill in a read-only format'}, params: []}, {name: 'getSkillReq', description: 'Retrieves the skill required to be upgraded before this one <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'required skill'}, params: []}, {name: 'getSkillReqLevel', description: 'Retrieves the level of the required skill needed to be obtained before this one can be upgraded. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'required skill level'}, params: []}, {name: 'getType', description: 'Retrieves the descriptive type of the skill <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'descriptive type of the skill'}, params: []}, {name: 'hasCombo', description: 'Checks whether or not the skill has been assigned a click combination. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if has a combo, false otherwise'}, params: []}, {name: 'hasMessage', description: 'Checks whether or not the skill has a message to display when cast. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if has a message, false otherwise'}, params: []}, {name: 'hasSkillReq', description: 'Checks whether or not the skill requires another before leveling up <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if requires another skill, false otherwise'}, params: []}, {name: 'needsPermission', description: 'Checks whether or not the skill needs a permission for a player to use it. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if requires a permission, false otherwise'}, params: []}, {name: 'setCombo', description: 'Sets the click combo for the skill <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'combo', type: 'int', description: 'new combo'}]}], fields: [{name: 'settings', description: 'The settings for the skill which include configurable stats for your mechanics and the defaults such as mana cost, level requirement, skill point cost, and cooldown.', isStatic: 0, isFinal: 1, isAbstract: 0, type: 'Settings', scope: 'protected'}, {name: 'Skill', description: 'Represents a template for a skill used in the RPG system. This is the class to extend when creating your own custom skills.', isStatic: 0, isFinal: 0, isAbstract: 1, type: '', scope: 'public'}], scope: 'public'},
        {name: 'SkillAttribute', type: 'class', isStatic: 0, isFinal: 1, isAbstract: 0, description: '<p>Names of default attributes for skills</p>', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'COOLDOWN', description: '<p>Cooldown attribute of a skill</p> <p>This is not required by passive abilities</p>', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'COST', description: '<p>Skill point cost attribute of a skill</p>', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'LEVEL', description: '<p>Level requirement attribute of a skill</p>', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'MANA', description: '<p>Mana cost attribute of a skill</p> <p>This is not required by passive abilities</p>', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'RANGE', description: 'Range of a target skill', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'SkillAttribute', description: '<p>Names of default attributes for skills</p>', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'ActionBar', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles sending text to players using the action bar.', ext: 0, impl: [], constructors: [], methods: [{name: 'isSupported', description: 'Checks whether or not the action bar is supported <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if supported, false otherwise'}, params: []}, {name: 'show', description: 'Shows an action bar message to the given player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to show the message to'}, {name: 'message', type: 'String', description: 'message to show'}]}], fields: [{name: 'ActionBar', description: 'Handles sending text to players using the action bar.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Buff', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Represents a buff given to an entity', ext: 0, impl: [], constructors: [{name: 'Buff', description: 'Constructs a new buff <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'key', type: 'String', description: 'unique identifier for the buff to prevent overlap'}, {name: 'value', type: 'double', description: 'value of the buff'}, {name: 'multiplier', type: 'boolean', description: 'whether the value is a multiplier or a flat bonus'}]}, {name: 'Buff', description: 'Constructs a new buff <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'value', type: 'double', description: 'value of the buff'}, {name: 'multiplier', type: 'boolean', description: 'whether the value is a multiplier or a flat bonus'}]}], methods: [{name: 'getId', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getKey', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: ''}, params: []}, {name: 'getValue', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: ''}, params: []}, {name: 'isPercent', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'setId', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'id', type: 'int', description: ''}]}], fields: [{name: 'Buff', description: 'Represents a buff given to an entity', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'type', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'BuffType', scope: 'protected'}], scope: 'public'},
        {name: 'BuffData', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Represents buffs set on an entity', ext: 0, impl: [], constructors: [{name: 'BuffData', description: 'Initializes new buff data for the entity <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to initialize for'}]}], methods: [{name: 'addDamageBuff', description: 'Adds an offensive buff to the entity <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'buff', type: 'Buff', description: 'buff to add'}, {name: 'ticks', type: 'int', description: 'ticks to apply the buff for'}]}, {name: 'addDefenseBuff', description: 'Adds a defensive buff to the entity <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'buff', type: 'Buff', description: 'buff to add'}, {name: 'ticks', type: 'int', description: 'ticks to apply the buff for'}]}, {name: 'addSkillDamageBuff', description: 'Adds an offensive buff to the entity <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'buff', type: 'Buff', description: 'buff to add'}, {name: 'ticks', type: 'int', description: 'ticks to apply the buff for'}]}, {name: 'addSkillDefenseBuff', description: 'Adds a defensive buff to the entity <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'buff', type: 'Buff', description: 'buff to add'}, {name: 'ticks', type: 'int', description: 'ticks to apply the buff for'}]}, {name: 'clear', description: 'Clears all buffs on the entity and stops associated tasks.', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'modifyDealtDamage', description: 'Modifies the amount of dealt damage using damage buff multipliers and bonuses. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'modified damage amount'}, params: [{name: 'damage', type: 'double', description: 'base damage amount to modify'}]}, {name: 'modifySkillDealtDamage', description: 'Modifies the amount of dealt damage using damage buff multipliers and bonuses. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'modified damage amount'}, params: [{name: 'damage', type: 'double', description: 'base damage amount to modify'}]}, {name: 'modifySkillTakenDamage', description: 'Modifies the amount of taken damage using defense buff multipliers and bonuses. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'modified damage amount'}, params: [{name: 'damage', type: 'double', description: 'base damage amount to modify'}]}, {name: 'modifyTakenDamage', description: 'Modifies the amount of taken damage using defense buff multipliers and bonuses. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'modified damage amount'}, params: [{name: 'damage', type: 'double', description: 'base damage amount to modify'}]}], fields: [{name: 'BuffData', description: 'Represents buffs set on an entity', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'BuffManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'The manager for temporary entity buff data', ext: 0, impl: [], constructors: [], methods: [{name: 'addDamageBuff', description: 'Adds an offensive buff to the entity <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to give the buff to'}, {name: 'buff', type: 'Buff', description: 'buff to add'}, {name: 'ticks', type: 'int', description: 'ticks to apply the buff for'}]}, {name: 'addDefenseBuff', description: 'Adds a defensive buff to the entity <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to give the buff to'}, {name: 'buff', type: 'Buff', description: 'buff to add'}, {name: 'ticks', type: 'int', description: 'ticks to apply the buff for'}]}, {name: 'addSkillDamageBuff', description: 'Adds an offensive buff to the entity <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to give the buff to'}, {name: 'buff', type: 'Buff', description: 'buff to add'}, {name: 'ticks', type: 'int', description: 'ticks to apply the buff for'}]}, {name: 'addSkillDefenseBuff', description: 'Adds a defensive buff to the entity <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to give the buff to'}, {name: 'buff', type: 'Buff', description: 'buff to add'}, {name: 'ticks', type: 'int', description: 'ticks to apply the buff for'}]}, {name: 'clearData', description: 'Clears the buffs for an entity <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to clear the buffs for'}]}, {name: 'getBuffData', description: 'Retrieves the buff data for an entity. This returns null if no existing data is found. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'BuffData', description: 'the buff data for the entity'}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to retrieve the data for'}]}, {name: 'getBuffData', description: 'Retrieves the buff data for an entity, optionally creating new data if none currently exists. If set to false, this will return null if no data currently exists. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'BuffData', description: 'the buff data for an enemy'}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to get the buff data for'}, {name: 'create', type: 'boolean', description: 'whether or not to create new data if it doesn\'t exist'}]}, {name: 'modifyDealtDamage', description: 'Modifies the amount of dealt damage using damage buff multipliers and bonuses. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'modified damage amount'}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to use the data of'}, {name: 'damage', type: 'double', description: 'base damage amount to modify'}]}, {name: 'modifySkillDealtDamage', description: 'Modifies the amount of dealt damage using damage buff multipliers and bonuses. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'modified damage amount'}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to use the data of'}, {name: 'damage', type: 'double', description: 'base damage amount to modify'}]}, {name: 'modifySkillTakenDefense', description: 'Modifies the amount of taken damage using defense buff multipliers and bonuses. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'modified damage amount'}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to use the data of'}, {name: 'damage', type: 'double', description: 'base damage amount to modify'}]}, {name: 'modifyTakenDefense', description: 'Modifies the amount of taken damage using defense buff multipliers and bonuses. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'modified damage amount'}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to use the data of'}, {name: 'damage', type: 'double', description: 'base damage amount to modify'}]}], fields: [{name: 'BuffManager', description: 'The manager for temporary entity buff data', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Combat', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Helper method for checking whether or not an entity is in combat', ext: 0, impl: [], constructors: [], methods: [{name: 'applyCombat', description: 'Updates the combat status of the player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to mark as starting combat'}]}, {name: 'clearData', description: 'Clears the combat timer data for the given player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to clear for'}]}, {name: 'isInCombat', description: 'Checks whether or not the player is in combat or not <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if in combat, false otherwise'}, params: [{name: 'player', type: 'Player', description: 'player to check for'}, {name: 'seconds', type: 'double', description: 'seconds before being counted as in combat'}]}, {name: 'isOutOfCombat', description: 'Checks whether or not the player is out of combat or not <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if out of combat, false otherwise'}, params: [{name: 'player', type: 'Player', description: 'player to check for'}, {name: 'seconds', type: 'double', description: 'seconds before being counted as out of combat'}]}], fields: [{name: 'Combat', description: 'Helper method for checking whether or not an entity is in combat', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'DamageLoreRemover', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Utility class for removing vanilla damage lore lines from items.</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'removeAttackDmg', description: '<p>Removes the vanilla damage lore from tools.</p> <p>If you pass in something other than a tool this will do nothing.</p> <p>If there was some problem with setting up the reflection classes, this will also do nothing.</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: 'the tool without the damage lore'}, params: [{name: 'item', type: 'ItemStack', description: 'tool to remove the lore from'}]}], fields: [{name: 'DamageLoreRemover', description: '<p>Utility class for removing vanilla damage lore lines from items.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Data', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Helper class for managing loading/saving certain data', ext: 0, impl: [], constructors: [], methods: [{name: 'parseIcon', description: 'Parses an item icon from a configuration <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: 'parsed item icon or a plain Jack O\' Lantern if invalid'}, params: [{name: 'config', type: 'DataSection', description: 'config to load from'}]}, {name: 'parseIcon', description: 'Parses an item icon from a configuration <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: 'parsed item icon or a plain Jack O\' Lantern if invalid'}, params: [{name: 'config', type: 'ConfigurationSection', description: 'config to load from'}, {name: 'filters', type: 'CustomFilter...', description: ''}]}, {name: 'parseMat', description: 'Parses a material from a string <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Material', description: 'parsed material or null if invalid'}, params: [{name: 'name', type: 'String', description: 'material name string'}]}, {name: 'serializeIcon', description: 'Serializes an item icon into a configuration <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'item', type: 'ItemStack', description: 'item to serialize'}, {name: 'config', type: 'ConfigurationSection', description: 'config to serialize into'}]}, {name: 'serializeIcon', description: 'Serializes an item icon into a configuration <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'item', type: 'ItemStack', description: 'item to serialize'}, {name: 'config', type: 'DataSection', description: 'config to serialize into'}]}], fields: [{name: 'Data', description: 'Helper class for managing loading/saving certain data', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'FlagData', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Represents flags set on an entity', ext: 0, impl: [], constructors: [{name: 'FlagData', description: 'Initializes new flag data for the entity <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to initialize for'}]}], methods: [{name: 'addFlag', description: 'Adds a flag to the entity for the given number of ticks <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'flag', type: 'String', description: 'flag to set'}, {name: 'ticks', type: 'int', description: 'number of ticks to set the flag for'}]}, {name: 'clear', description: 'Clears all flags on the entity and stops associated tasks.', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'getMillisLeft', description: 'Retrieves the number of milliseconds left of an active flag on the entity. If the flag is not active, this will instead return 0. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'the number of milliseconds left or 0 if not set'}, params: [{name: 'flag', type: 'String', description: 'flag to check the time left for'}]}, {name: 'getSecondsLeft', description: 'Retrieves the number of seconds left of an active flag on the entity. If the flag is not active, this will instead return 0. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'the seconds left rounded up to the nearest second or 0 if not set'}, params: [{name: 'flag', type: 'String', description: 'flag to check the time left for'}]}, {name: 'hasFlag', description: 'Checks whether or not the entity currently has the flag set <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if set, false otherwise'}, params: [{name: 'flag', type: 'String', description: 'the flag to check if set or not'}]}, {name: 'removeFlag', description: 'Removes a flag from the entity <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'flag', type: 'String', description: 'flag to remove from the entity'}]}], fields: [{name: 'FlagData', description: 'Represents flags set on an entity', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'FlagManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'The manager for temporary entity flag data', ext: 0, impl: [], constructors: [], methods: [{name: 'addFlag', description: 'Adds a flag to an entity <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to add the flag to'}, {name: 'flag', type: 'String', description: 'the flag to add'}, {name: 'ticks', type: 'int', description: 'the duration to add the flag for'}]}, {name: 'clearFlags', description: 'Clears the flags for an entity <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to clear the flags for'}]}, {name: 'getFlagData', description: 'Retrieves the flag data for an entity. This creates new data if no existing data is found. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'FlagData', description: 'the flag data for the entity'}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to retrieve the data for'}]}, {name: 'getFlagData', description: 'Retrieves the flag data for an entity, optionally creating new data if none currently exists. If set to false, this will return null if no data currently exists. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'FlagData', description: 'the flag data for an enemy'}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to get the flag data for'}, {name: 'create', type: 'boolean', description: 'whether or not to create new data if it doesn\'t exist'}]}, {name: 'getTimeLeft', description: 'Retrieves the time left on a flag for an entity <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'time left on the flag in seconds for the entity'}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to get the time for'}, {name: 'flag', type: 'String', description: 'flag to get the time for'}]}, {name: 'hasFlag', description: 'Checks whether or not the entity has the given flag <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the flag is active on the entity, false otherwise'}, params: [{name: 'entity', type: 'LivingEntity', description: 'the entity to check for'}, {name: 'flag', type: 'String', description: 'the flag to check for'}]}, {name: 'removeFlag', description: 'Removes the flag from an entity <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to remove the flag from'}, {name: 'flag', type: 'String', description: 'flag to remove'}]}], fields: [{name: 'FlagManager', description: 'The manager for temporary entity flag data', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'NumberParser', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles number parsing for various locales', ext: 0, impl: [], constructors: [], methods: [{name: 'parseDouble', description: 'Parses a double value from a string <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'double value'}, params: [{name: 'value', type: 'String', description: 'string to parse'}]}, {name: 'parseInt', description: 'Parses an integer value from a string <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'integer value'}, params: [{name: 'value', type: 'String', description: 'string to parse'}]}], fields: [{name: 'NumberParser', description: 'Handles number parsing for various locales', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ParticleHelper', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Helper class for playing particles via config strings in various ways.', ext: 0, impl: [], constructors: [], methods: [{name: 'fillCircle', description: 'Plays several of a particle type randomly within a circle <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'loc', type: 'Location', description: 'center location of the circle'}, {name: 'particle', type: 'String', description: 'particle to play'}, {name: 'settings', type: 'Settings', description: 'data to play the particle with'}, {name: 'radius', type: 'double', description: 'radius of the circle'}, {name: 'amount', type: 'int', description: 'amount of particles to play'}, {name: 'direction', type: 'Direction', description: ''}]}, {name: 'fillHemisphere', description: 'Randomly plays particle effects within the hemisphere <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'loc', type: 'Location', description: 'location to center the effect around'}, {name: 'particle', type: 'String', description: 'the string value for the particle'}, {name: 'settings', type: 'Settings', description: 'data to play the particle with'}, {name: 'radius', type: 'double', description: 'radius of the sphere'}, {name: 'amount', type: 'int', description: 'amount of particles to use'}]}, {name: 'fillSphere', description: 'Randomly plays particle effects within the sphere <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'loc', type: 'Location', description: 'location to center the effect around'}, {name: 'particle', type: 'String', description: 'the string value for the particle'}, {name: 'settings', type: 'Settings', description: 'data to play the particle with'}, {name: 'radius', type: 'double', description: 'radius of the sphere'}, {name: 'amount', type: 'int', description: 'amount of particles to use'}]}, {name: 'play', description: 'Plays an entity effect at the given location <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'loc', type: 'Location', description: 'location to play the effect'}, {name: 'effect', type: 'EntityEffect', description: 'entity effect to play'}]}, {name: 'play', description: 'Plays particles about the given location using the given settings <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'loc', type: 'Location', description: 'location to center the effect around'}, {name: 'settings', type: 'Settings', description: 'data to play the particles with'}]}, {name: 'play', description: 'Plays a particle at the given location based on the string <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'loc', type: 'Location', description: 'location to play the effect'}, {name: 'particle', type: 'String', description: 'particle to play'}, {name: 'settings', type: 'Settings', description: 'data to play the particle with'}]}], fields: [{name: 'AMOUNT_KEY', description: 'Settings key for the amount of particles to play', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'ARRANGEMENT_KEY', description: 'Settings key for the arrangement type of particles', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'DATA_KEY', description: 'Settings key for the Bukkit effects\' data (default 0)', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'DIRECTION_KEY', description: 'Settings key for the particle arrangement direction (circles only)', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'DX_KEY', description: 'Settings key for the reflection particles\' X-offset (default 0)', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'DY_KEY', description: 'Settings key for the reflection particles\' Y-offset (default 0)', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'DZ_KEY', description: 'Settings key for the reflection particles\' Z-offset (default 0)', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'LEVEL', description: 'The level to use for scaling values', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'MATERIAL_KEY', description: 'Settings key for the material used by the particle (for block crack, icon crack, and block dust)', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'PARTICLE_KEY', description: 'Settings key for the type of particle', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'ParticleHelper', description: 'Helper class for playing particles via config strings in various ways.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'PARTICLES_KEY', description: 'Number of particles', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'RADIUS_KEY', description: 'Settings key for the radius of the particle arrangement', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'SPEED_KEY', description: 'Settings key for the reflection particles\' "speed" value (default 1)', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'TYPE_KEY', description: 'Settings key for the material data used by the particle (for block crack, icon crack, and block dust)', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'VISIBLE_RADIUS_KEY', description: 'Settings key for the reflection particles\' visible radius (default 25)', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}], scope: 'public'},
        {name: 'StatusFlag', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Flag keys used by statuses', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'ABSORB', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'ALL', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String[]', scope: 'public'}, {name: 'CHANNEL', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'CHANNELING', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'DISARM', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'INVINCIBLE', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'NEGATIVE', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String[]', scope: 'public'}, {name: 'POSITIVE', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String[]', scope: 'public'}, {name: 'ROOT', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'SILENCE', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'StatusFlag', description: 'Flag keys used by statuses', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'STUN', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'ReadOnlySettings', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A wrapper for the API settings that makes it read-only', ext: 0, impl: [], constructors: [{name: 'ReadOnlySettings', description: 'A wrapper for settings that makes it read-only <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'settings', type: 'Settings', description: 'settings to wrap'}]}], methods: [{name: 'dumpToConsole', description: 'Dumps the settings to the console for debugging purposes', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'getAttr', description: '<p>Calculates a value for a scaling setting at a given level.</p> <p>If the scaling setting does not exist, this will instead return 0.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'scaled setting value'}, params: [{name: 'key', type: 'String', description: 'scaling setting name'}, {name: 'level', type: 'int', description: 'level of scaling'}]}, {name: 'getAttr', description: '<p>Calculates a value for a scaling setting at a given level.</p> <p>If the scaling setting does not exist, this will instead return the provided default value.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'scaled setting value'}, params: [{name: 'key', type: 'String', description: 'scaling setting name'}, {name: 'level', type: 'int', description: 'level of scaling'}, {name: 'defaultValue', type: 'double', description: 'the default value in case not set'}]}, {name: 'getBase', description: '<p>Gets the base value of an attribute</p> <p>If the attribute is not set, this will return 0.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'base value'}, params: [{name: 'key', type: 'String', description: 'attribute name'}]}, {name: 'getBool', description: 'Retrieves a boolean value from the settings. If the setting is not set, this will instead return false. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'boolean setting value'}, params: [{name: 'key', type: 'String', description: 'setting key'}, {name: 'defaultValue', type: 'boolean', description: 'the default value in case not set'}]}, {name: 'getBool', description: 'Retrieves a boolean value from the settings. If the setting is not set, this will instead return false. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'boolean setting value'}, params: [{name: 'key', type: 'String', description: 'setting key'}]}, {name: 'getDouble', description: 'Retrieves a double value from the settings. If the setting is not set, this will instead return 0. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'double setting value'}, params: [{name: 'key', type: 'String', description: 'setting key'}]}, {name: 'getDouble', description: 'Retrieves a double value from the settings. If the setting is not set, this will instead return 0. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'double setting value'}, params: [{name: 'key', type: 'String', description: 'setting key'}, {name: 'defaultValue', type: 'double', description: 'the default value in case not set'}]}, {name: 'getInt', description: 'Retrieves an integer value from the settings. If the setting is not set, this will instead return 0. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'integer setting value'}, params: [{name: 'key', type: 'String', description: 'setting key'}]}, {name: 'getInt', description: 'Retrieves an integer value from the settings. If the setting is not set, this will instead return the default value. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'integer setting value'}, params: [{name: 'key', type: 'String', description: 'setting key'}, {name: 'defaultValue', type: 'int', description: 'the default value in case not set'}]}, {name: 'getObj', description: '<p>Retrieves a generic attribute.</p> <p>If the attribute is not set, this will return 0 instead.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Object', description: 'attribute value or 0 if not found'}, params: [{name: 'key', type: 'String', description: 'attribute name'}, {name: 'level', type: 'int', description: 'level of scaling'}]}, {name: 'getScale', description: '<p>Gets the scale value of an attribute</p> <p>If the attribute is not set, this will return 0.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'change in value per level'}, params: [{name: 'key', type: 'String', description: 'attribute name'}]}, {name: 'getString', description: 'Retrieves a string value from the settings. If the setting is not set, this will instead return null. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'String setting value'}, params: [{name: 'key', type: 'String', description: 'setting key'}]}, {name: 'getString', description: 'Retrieves a string value from the settings. If the setting is not set, this will instead return the default value. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'String setting value'}, params: [{name: 'key', type: 'String', description: 'setting key'}, {name: 'defaultValue', type: 'String', description: 'the default value in case not set'}]}, {name: 'getStringList', description: 'Retrieves a string list from the settings <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'string list or empty list if not found'}, params: [{name: 'key', type: 'String', description: 'settings key'}]}, {name: 'has', description: '<p>Checks whether or not the setting is defined.</p> <p>A setting is defined when it is set at any point using any of the setter methods or while loading from the configuration.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if defined, false otherwise'}, params: [{name: 'key', type: 'String', description: 'name of the setting'}]}, {name: 'save', description: '<p>Saves settings to a configuration section.</p> <p>If the config section is null, this does not do anything.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'DataSection', description: 'configuration section to save to'}]}], fields: [{name: 'ReadOnlySettings', description: 'A wrapper for the API settings that makes it read-only', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Settings', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Represents a set of settings that store configurable data for an object.</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'checkDefault', description: '<p>Checks to make sure the settings have a required scaling value.</p> <p>If the scaling setting is not set, the scaling setting will be created with the provided values.</p> <p>If the attribute already exists, this will do nothing.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key of the setting to check'}, {name: 'defaultBase', type: 'double', description: 'default base value'}, {name: 'defaultScale', type: 'double', description: 'default scale value'}]}, {name: 'dumpToConsole', description: 'Dumps the settings to the console for debugging purposes', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'getAttr', description: '<p>Calculates a value for a scaling setting at a given level.</p> <p>If the scaling setting does not exist, this will instead return 0.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'scaled setting value'}, params: [{name: 'key', type: 'String', description: 'scaling setting name'}, {name: 'level', type: 'int', description: 'level of scaling'}]}, {name: 'getAttr', description: '<p>Calculates a value for a scaling setting at a given level.</p> <p>If the scaling setting does not exist, this will instead return the provided default value.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'scaled setting value'}, params: [{name: 'key', type: 'String', description: 'scaling setting name'}, {name: 'level', type: 'int', description: 'level of scaling'}, {name: 'defaultValue', type: 'double', description: 'the default value in case not set'}]}, {name: 'getBase', description: '<p>Gets the base value of an attribute</p> <p>If the attribute is not set, this will return 0.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'base value'}, params: [{name: 'key', type: 'String', description: 'attribute name'}]}, {name: 'getBool', description: 'Retrieves a boolean value from the settings. If the setting is not set, this will instead return false. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'boolean setting value'}, params: [{name: 'key', type: 'String', description: 'setting key'}, {name: 'defaultValue', type: 'boolean', description: 'the default value in case not set'}]}, {name: 'getBool', description: 'Retrieves a boolean value from the settings. If the setting is not set, this will instead return false. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'boolean setting value'}, params: [{name: 'key', type: 'String', description: 'setting key'}]}, {name: 'getDouble', description: 'Retrieves a double value from the settings. If the setting is not set, this will instead return 0. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'double setting value'}, params: [{name: 'key', type: 'String', description: 'setting key'}]}, {name: 'getDouble', description: 'Retrieves a double value from the settings. If the setting is not set, this will instead return 0. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'double setting value'}, params: [{name: 'key', type: 'String', description: 'setting key'}, {name: 'defaultValue', type: 'double', description: 'the default value in case not set'}]}, {name: 'getInt', description: 'Retrieves an integer value from the settings. If the setting is not set, this will instead return 0. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'integer setting value'}, params: [{name: 'key', type: 'String', description: 'setting key'}]}, {name: 'getInt', description: 'Retrieves an integer value from the settings. If the setting is not set, this will instead return the default value. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'integer setting value'}, params: [{name: 'key', type: 'String', description: 'setting key'}, {name: 'defaultValue', type: 'int', description: 'the default value in case not set'}]}, {name: 'getObj', description: '<p>Retrieves a generic attribute.</p> <p>If the attribute is not set, this will return 0 instead.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Object', description: 'attribute value or 0 if not found'}, params: [{name: 'key', type: 'String', description: 'attribute name'}, {name: 'level', type: 'int', description: 'level of scaling'}]}, {name: 'getScale', description: '<p>Gets the scale value of an attribute</p> <p>If the attribute is not set, this will return 0.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'change in value per level'}, params: [{name: 'key', type: 'String', description: 'attribute name'}]}, {name: 'getString', description: 'Retrieves a string value from the settings. If the setting is not set, this will instead return null. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'String setting value'}, params: [{name: 'key', type: 'String', description: 'setting key'}]}, {name: 'getString', description: 'Retrieves a string value from the settings. If the setting is not set, this will instead return the default value. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'String setting value'}, params: [{name: 'key', type: 'String', description: 'setting key'}, {name: 'defaultValue', type: 'String', description: 'the default value in case not set'}]}, {name: 'getStringList', description: 'Retrieves a string list from the settings <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'string list or empty list if not found'}, params: [{name: 'key', type: 'String', description: 'settings key'}]}, {name: 'has', description: '<p>Checks whether or not the setting is defined.</p> <p>A setting is defined when it is set at any point using any of the setter methods or while loading from the configuration.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if defined, false otherwise'}, params: [{name: 'key', type: 'String', description: 'name of the setting'}]}, {name: 'load', description: '<p>Loads attributes from a configuration section</p> <p>If the section is null or has no keys, this will not do anything.</p> <p>Keys that do not point to valid sections for the base/scale values will not be loaded.</p> <p>Sections without a base or without a scale value will load what\'s present and default the missing one to 0.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'DataSection', description: 'configuration section to load from'}]}, {name: 'remove', description: '<p>Removes a setting.</p> <p>If the setting is not set, this will not do anything.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'name of the attribute'}]}, {name: 'save', description: '<p>Saves settings to a configuration section.</p> <p>If the config section is null, this does not do anything.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'DataSection', description: 'configuration section to save to'}]}, {name: 'set', description: 'Sets the value for a setting. You should only provide a String, int, boolean, or double as those are the only supported types. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'setting key'}, {name: 'value', type: 'Object', description: 'setting value'}]}, {name: 'set', description: '<p>Defines a new scaling setting</p> <p>Values are overwritten after the configuration is loaded. Using this method is simply to define the default values before configuration changes.</p> <p>You should not use this method after the initial setup.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'attribute name'}, {name: 'base', type: 'double', description: 'base value'}, {name: 'scale', type: 'double', description: 'value scale'}]}, {name: 'setBase', description: '<p>Sets the base value of a scaling setting</p> <p>If the scaling setting is not set, this will default the scale of the setting to 0.</p> <p>This is used to override the default values. You should not use this method. When defining scaling settings, use set(String, double, double)</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'scaling setting name'}, {name: 'value', type: 'double', description: 'new base value'}]}, {name: 'setScale', description: '<p>Sets the bonus value of a scaling setting</p> <p>If the scaling setting is not set, this will default the base of the setting to 0.</p> <p>This is used by the API to override the default values. You should not use this method. When defining scaling settings, use set(String, double, double)</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'scaling setting name'}, {name: 'value', type: 'double', description: 'new scale value'}]}], fields: [{name: 'Settings', description: '<p>Represents a set of settings that store configurable data for an object.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'CmdAccount', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Command to clear all bound skills', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Executes the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'command', type: 'ConfigurableCommand', description: 'owning command'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'arguments'}]}], fields: [{name: 'CmdAccount', description: 'Command to clear all bound skills', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdAP', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that gives a player class experience', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdAP', description: 'A command that gives a player class experience', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdAttribute', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that allows a player to view their skill tree', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdAttribute', description: 'A command that allows a player to view their skill tree', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdBackup', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Backs up SQL data into local config files', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Executes the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'command', type: 'ConfigurableCommand', description: 'owning command'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'arguments'}]}], fields: [{name: 'CmdBackup', description: 'Backs up SQL data into local config files', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdBar', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Command to toggle on/off the skill bar', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Executes the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'command', type: 'ConfigurableCommand', description: 'owning command'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'arguments'}]}], fields: [{name: 'CmdBar', description: 'Command to toggle on/off the skill bar', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdBind', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Command to bind a skill to an item', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Executes the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'command', type: 'ConfigurableCommand', description: 'owning command'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'arguments'}]}], fields: [{name: 'CmdBind', description: 'Command to bind a skill to an item', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdCast', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Command to bind a skill to an item', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Executes the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'command', type: 'ConfigurableCommand', description: 'owning command'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'arguments'}]}], fields: [{name: 'CmdCast', description: 'Command to bind a skill to an item', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdClearBinds', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Command to clear all bound skills', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Executes the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'command', type: 'ConfigurableCommand', description: 'owning command'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'arguments'}]}], fields: [{name: 'CmdClearBinds', description: 'Command to clear all bound skills', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdCombo', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Command to bind a skill to an item', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Executes the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'command', type: 'ConfigurableCommand', description: 'owning command'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'arguments'}]}], fields: [{name: 'CmdCombo', description: 'Command to bind a skill to an item', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdExp', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that gives a player class experience', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdExp', description: 'A command that gives a player class experience', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdForceAccount', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Command to clear all bound skills', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Executes the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'command', type: 'ConfigurableCommand', description: 'owning command'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'arguments'}]}], fields: [{name: 'CmdForceAccount', description: 'Command to clear all bound skills', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdForceAttr', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that resets the attributes of a player', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdForceAttr', description: 'A command that resets the attributes of a player', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdForceCast', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that makes a player cast a skill regardless of them owning it or not and also ignores cooldown/mana costs.', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdForceCast', description: 'A command that makes a player cast a skill regardless of them owning it or not and also ignores cooldown/mana costs.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdForceProfess', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that allows a player to profess through classes', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdForceProfess', description: 'A command that allows a player to profess through classes', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdForceReset', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Command to clear all bound skills', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Executes the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'command', type: 'ConfigurableCommand', description: 'owning command'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'arguments'}]}], fields: [{name: 'CmdForceReset', description: 'Command to clear all bound skills', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdInfo', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that displays a player\'s current class information', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdInfo', description: 'A command that displays a player\'s current class information', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdLevel', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that gives a player class levels', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdLevel', description: 'A command that gives a player class levels', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdList', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that displays a player\'s account information', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdList', description: 'A command that displays a player\'s account information', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdLore', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that gives a player class experience', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdLore', description: 'A command that gives a player class experience', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdMana', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that gives a player class experience', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdMana', description: 'A command that gives a player class experience', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdOptions', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that displays the list of available profess options', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdOptions', description: 'A command that displays the list of available profess options', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdPoints', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that gives a player class experience', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdPoints', description: 'A command that gives a player class experience', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdProfess', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that allows a player to profess through classes', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdProfess', description: 'A command that allows a player to profess through classes', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdReload', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that allows a player to profess through classes', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdReload', description: 'A command that allows a player to profess through classes', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdReset', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that allows a player to profess through classes', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdReset', description: 'A command that allows a player to profess through classes', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdScheme', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that allows a player to view their skill tree', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdScheme', description: 'A command that allows a player to view their skill tree', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdSkill', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that allows a player to view their skill tree', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdSkill', description: 'A command that allows a player to view their skill tree', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdSkillMap', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A command that allows a player to view their skill tree', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Runs the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cmd', type: 'ConfigurableCommand', description: 'command that was executed'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'argument list'}]}], fields: [{name: 'CmdSkillMap', description: 'A command that allows a player to view their skill tree', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdUnbind', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Command to bind a skill to an item', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', description: 'Executes the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'command', type: 'ConfigurableCommand', description: 'owning command'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'arguments'}]}], fields: [{name: 'CmdUnbind', description: 'Command to bind a skill to an item', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'ConfigIO', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'IO manager that saves/loads to a .yml configuration file', ext: 'IOManager', impl: [], constructors: [{name: 'ConfigIO', description: 'Initializes a new .yml config manager <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'SkillAPI', description: 'SkillAPI reference'}]}], methods: [{name: 'loadData', description: 'Loads data for the given player <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerAccounts', description: 'loaded player data'}, params: [{name: 'player', type: 'OfflinePlayer', description: 'player to load data for'}]}, {name: 'saveAll', description: 'Saves all player data to the config', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'saveData', description: 'Saves player data to the config <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'data', type: 'PlayerAccounts', description: 'data to save to the config'}]}], fields: [{name: 'ConfigIO', description: 'IO manager that saves/loads to a .yml configuration file', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'IOManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 1, description: 'Base class for managers that handle saving and loading player data', ext: 0, impl: [], constructors: [{name: 'IOManager', description: 'Initializes a new IO manager <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'SkillAPI reference'}]}], methods: [{name: 'load', description: 'Loads data from the DataSection for the given player <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'PlayerAccounts', description: 'the loaded player account data'}, params: [{name: 'player', type: 'OfflinePlayer', description: 'player to load for'}, {name: 'file', type: 'DataSection', description: 'DataSection containing the account info'}]}, {name: 'loadData', description: 'Loads data for the player <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'public', returnValue: {type: 'PlayerAccounts', description: 'loaded player data'}, params: [{name: 'player', type: 'OfflinePlayer', description: 'player to load for'}]}, {name: 'save', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'DataSection', description: ''}, params: [{name: 'data', type: 'PlayerAccounts', description: ''}]}, {name: 'saveAll', description: 'Saves all player data', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'saveData', description: 'Saves the player\'s data <br><br', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'data', type: 'PlayerAccounts', description: 'data to save'}]}], fields: [{name: 'api', description: 'API reference', isStatic: 0, isFinal: 1, isAbstract: 0, type: 'SkillAPI', scope: 'protected'}, {name: 'IOManager', description: 'Base class for managers that handle saving and loading player data', isStatic: 0, isFinal: 0, isAbstract: 1, type: '', scope: 'public'}], scope: 'public'},
        {name: 'SQLIO', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Loads player data from the SQL Database', ext: 'IOManager', impl: [], constructors: [{name: 'SQLIO', description: 'Initializes the SQL IO Manager <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'API reference'}]}], methods: [{name: 'cleanup', description: 'Closes the database connection', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'loadData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerAccounts', description: ''}, params: [{name: 'player', type: 'OfflinePlayer', description: ''}]}, {name: 'saveAll', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'saveData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'data', type: 'PlayerAccounts', description: ''}]}], fields: [{name: 'DATA', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'ID', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'SQLIO', description: 'Loads player data from the SQL Database', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'STRING', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'char', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'ExpFormula', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Represents an experience formula from the settings', ext: 0, impl: [], constructors: [{name: 'ExpFormula', description: 'Creates a new formula <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'x', type: 'int', description: 'quadratic coefficient'}, {name: 'y', type: 'int', description: 'linear coefficient'}, {name: 'z', type: 'int', description: 'intercept'}]}], methods: [{name: 'calculate', description: 'Calculates the required experience at a given level <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'required experience at the level'}, params: [{name: 'level', type: 'int', description: 'level to calculate for'}]}], fields: [{name: 'ExpFormula', description: 'Represents an experience formula from the settings', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Formula', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Represents a basic math equation read from left to right, ignoring order of operations. Currently this only supports addition, subtraction, multiplication, and division.', ext: 0, impl: [], constructors: [{name: 'Formula', description: 'Creates a new formula from a config string <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'equation', type: 'String', description: 'equation string'}]}], methods: [{name: 'compute', description: 'Calculates the formula using the given base value and attribute. If the formula is invalid, this returns the value. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'computed value'}, params: [{name: 'value', type: 'double', description: 'base value'}, {name: 'attr', type: 'double', description: 'attribute'}]}, {name: 'isValid', description: 'Whether or not the equation was valid when parsed. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'whether or not the equation was valid'}, params: []}, {name: 'negate', description: 'Negates the output of the formula for future computations <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Formula', description: 'the negated Formula'}, params: []}, {name: 'toString', description: 'Returns the equation string for toString <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'the equation string'}, params: []}], fields: [{name: 'Formula', description: 'Represents a basic math equation read from left to right, ignoring order of operations. Currently this only supports addition, subtraction, multiplication, and division.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'GroupSettings', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Settings for class groups', ext: 0, impl: [], constructors: [{name: 'GroupSettings', description: 'Initializes a default collection of group settings', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: []}, {name: 'GroupSettings', description: 'Initializes a new set of settings for a class group by loading settings from the config <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'config', type: 'DataSection', description: 'config to load from'}]}], methods: [{name: 'canReset', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the group is allowed to reset, false otherwise'}, params: []}, {name: 'getAttribsForLevels', description: 'Gets the number of attribute points to gain for a specified level <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'gained points'}, params: [{name: 'newLevel', type: 'int', description: 'level to check for'}, {name: 'oldLevel', type: 'int', description: 'level coming from'}]}, {name: 'getAttribsPerLevel', description: 'Retrieves the number of attribute points gained each level <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'attribute points gained each level'}, params: []}, {name: 'getDeathPenalty', description: 'Retrieves the death penalty for classes in this group <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'death penalty'}, params: []}, {name: 'getDefault', description: 'Retrieves the default class of the group <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'RPGClass', description: 'default class of the group or null/"none" if none'}, params: []}, {name: 'getPermission', description: 'Gets the permission required by the group <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'required permission or null if none'}, params: []}, {name: 'getPointsForLevels', description: 'Gets the number of skill points to gain for a specified level <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'gained points'}, params: [{name: 'newLevel', type: 'int', description: 'level to check for'}, {name: 'oldLevel', type: 'int', description: 'level coming from'}]}, {name: 'getPointsPerLevel', description: 'Retrieves the number of skill points gained in the group per level <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'skill points per level'}, params: []}, {name: 'getStartingAttribs', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'attribute points classes in the group start with'}, params: []}, {name: 'getStartingPoints', description: 'Retrieves the number of skill points classes in this group start with <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'starting skill points'}, params: []}, {name: 'isProfessReset', description: 'Checks whether or not classes reset upon profession in the group <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if resets upon profession, false otherwise'}, params: []}, {name: 'isShowScoreboard', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if should show the scoreboard, false otherwise'}, params: []}, {name: 'requiresPermission', description: 'Retrieves whether or not the group requires a permission to use at all <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if requires a permission, false otherwise'}, params: []}, {name: 'save', description: 'Saves the group settings to a config <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'DataSection', description: 'config to save to'}]}], fields: [{name: 'GroupSettings', description: 'Settings for class groups', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Permissions', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Permission nodes used by the plugin', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'ATTRIB', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'BACKUP', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'BASIC', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'CLASS', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'EXP', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'FORCE', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'LORE', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'LVL', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'MANA', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'Permissions', description: 'Permission nodes used by the plugin', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'POINTS', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'RELOAD', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'SKILL', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}], scope: 'public'},
        {name: 'PlayerStats', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Stat provider for the MCCore stat scoreboard', ext: 0, impl: ['StatHolder'], constructors: [{name: 'PlayerStats', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'PlayerClass', description: 'player to show stats for'}]}], methods: [{name: 'clear', description: 'Clears the initialized offline players. This is done by the API upon disable so do not call this method.', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'getNames', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'map of stats for the scoreboard'}, params: []}, {name: 'getValues', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ArrayList<Integer>', description: 'populated list of values'}, params: []}, {name: 'init', description: 'Initializes the offline players used by the scoreboard. This is done by the API on startup so do not call this method.', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'PlayerStats', description: 'Stat provider for the MCCore stat scoreboard', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Settings', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>The management class for SkillAPI\'s config.yml settings.</p>', ext: 0, impl: [], constructors: [{name: 'Settings', description: '<p>Initializes a new settings manager.</p> <p>This is already set up by SkillAPI and shouldn\'t be instantiated elsewhere. Instead, get it from SkillAPI using the SkillAPI.getSettings() method.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'SkillAPI', description: 'SkillAPI plugin reference'}]}], methods: [{name: 'canAttack', description: 'Checks whether or not something can be attacked <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if can be attacked, false otherwise'}, params: [{name: 'attacker', type: 'LivingEntity', description: 'the attacking entity'}, {name: 'target', type: 'LivingEntity', description: 'the target entity'}]}, {name: 'getActionText', description: 'Gets the text to display on the action bar <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'action bar text'}, params: []}, {name: 'getAttrGiveText', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'lore text for giving attributes'}, params: []}, {name: 'getAttrReqText', description: 'Retrieves the text used for attribute requirements on items <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'lore text for attributes'}, params: []}, {name: 'getClickTime', description: 'Retrieves the amount of seconds allowed between clicks before the combo resets <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'number of seconds before a click combo resets'}, params: []}, {name: 'getComboSize', description: 'Retrieves the max length of combos to be used <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'max length of combos to be used'}, params: []}, {name: 'getDefaultBarLayout', description: 'Retrieves the default skill bar layout <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean[]', description: 'default skill bar layout'}, params: []}, {name: 'getDefaultHealth', description: '<p>Retrieves the default health for players that do not have a class.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'default health for classless players'}, params: []}, {name: 'getFilteredBlocks', description: 'Retrieves the list of filtered blocks <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<Material>', description: 'list of blocks'}, params: []}, {name: 'getFoodBar', description: 'Gets the setting for using the food bar <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'food bar setting'}, params: []}, {name: 'getGainFreq', description: 'Retrieves the frequency of mana gain <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'the frequency of mana gain'}, params: []}, {name: 'getGroupSettings', description: 'Retrieves the settings for a class group <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'GroupSettings', description: 'settings for the class group'}, params: [{name: 'group', type: 'String', description: 'name of the group to retrieve the settings for'}]}, {name: 'getLevelBar', description: 'Gets the setting for using the level bar <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'level bar setting'}, params: []}, {name: 'getLevelText', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'text shown alongside the class level'}, params: []}, {name: 'getLevelUpSkill', description: 'Retrieves the skill used for level up effects <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'DynamicSkill', description: 'skill for level up effects'}, params: []}, {name: 'getLockedSlots', description: 'Retrieves the list of locked skill bar slots <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean[]', description: 'list of locked skill bar slots'}, params: []}, {name: 'getLoreClassText', description: 'Retrieves the text used for class requirements on items <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'lore text for class requirements'}, params: []}, {name: 'getLoreExcludeText', description: 'Retrieves the text used for excluded classes on items <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'lore text for excluded classes'}, params: []}, {name: 'getLoreLevelText', description: 'Retrieves the text used for level requirements on items <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'lore text for level requirements'}, params: []}, {name: 'getMainGroup', description: 'Retrieves the main class group for displaying prefixes or showing account information <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'main class group'}, params: []}, {name: 'getMaxAccounts', description: 'Retrieves the max accounts allowed for most players <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'max accounts allowed for most players'}, params: []}, {name: 'getMaxAccounts', description: 'Retrieves the max amount of accounts allowed for a specific player by checking permissions for additional accounts. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'number of allowed accounts'}, params: [{name: 'player', type: 'Player', description: 'player to check the max allowed accounts for'}]}, {name: 'getMessageRadius', description: 'Gets the radius in which skill messages are sent out <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'skill message radius'}, params: []}, {name: 'getPlayersPerCheck', description: 'Retrieves the number of players checked each update <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'number of players checked each update'}, params: []}, {name: 'getRequiredExp', description: 'Gets the required amount of experience at a given level <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'required experience to gain a level'}, params: [{name: 'level', type: 'int', description: 'level of the class'}]}, {name: 'getSaveFreq', description: 'Retrieves the amount of ticks in between each auto save <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'frequency of saves'}, params: []}, {name: 'getSkillText', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'lore for skill requirements'}, params: []}, {name: 'getSQLDatabase', description: 'Retrieves the name of the SQL database <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'SQL database name'}, params: []}, {name: 'getSQLHost', description: 'Retrieves the host IP for the database <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'host IP for SQL database'}, params: []}, {name: 'getSQLPass', description: 'Retrieves the password for the database credentials <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'SQL database password'}, params: []}, {name: 'getSQLPort', description: 'Retrieves the host port for the database <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'host port for SQL database'}, params: []}, {name: 'getSQLUser', description: 'Retrieves the username for the database credentials <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'SQL database username'}, params: []}, {name: 'getTitleDuration', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'duration of the title display in ticks'}, params: []}, {name: 'getTitleFadeIn', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'fade in time of the title display in ticks'}, params: []}, {name: 'getTitleFadeOut', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'fade out time of the title display in ticks'}, params: []}, {name: 'getUnassigned', description: 'Retrieves the indicator for an unassigned skill slot <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: 'unassigned indicator'}, params: []}, {name: 'getYield', description: 'Gets the experience yield of a mob <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'experience yield'}, params: [{name: 'mob', type: 'String', description: 'mob to get the yield of'}]}, {name: 'hasLevelUpEffect', description: 'Checks whether or not the plugin has a valid skill for level up effects loaded. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if one is available, false otherwise'}, params: []}, {name: 'isAllowDowngrade', description: 'Checks whether or not downgrades are allowed <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if allowed, false otherwise'}, params: []}, {name: 'isAlly', description: 'Checks whether or not something is an ally <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if an ally, false otherwise'}, params: [{name: 'attacker', type: 'LivingEntity', description: 'the attacking entity'}, {name: 'target', type: 'LivingEntity', description: 'the target entity'}]}, {name: 'isAttributesDowngrade', description: 'Checks whether or not attribute points can be refunded <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if can refund, false otherwise'}, params: []}, {name: 'isAttributesEnabled', description: 'Checks whether or not attributes are enabled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isAutoSave', description: 'Checks whether or not auto saving is enabled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isBlockCreative', description: 'Checks whether or not players in creative mode are blocked from receiving experience. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if blocked, false otherwise'}, params: []}, {name: 'isBlockEgg', description: 'Checks whether or not experience from mobs spawned via eggs are to be blocked <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if blocked, false otherwise'}, params: []}, {name: 'isBlockSpawner', description: 'Checks whether or not experience from mobs spawned via a mob spawner is to be blocked. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if blocked, false otherwise'}, params: []}, {name: 'isCheckAttributes', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if should check for attribute bonuses'}, params: []}, {name: 'isCheckLore', description: 'Checks whether or not lore requirements are enabled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isCheckSkillLore', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if should check for skill requirements'}, params: []}, {name: 'isComboLeft', description: 'Checks whether or not left clicks are enabled for combos <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isComboRight', description: 'Checks whether or not right clicks are enabled for combos <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isCombosEnabled', description: 'Checks whether or not click combos are enabled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isComboShift', description: 'Checks whether or not shift clicks are enabled for combos <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false othewise'}, params: []}, {name: 'isCustomCombosAllowed', description: 'Checks whether or not players can customize their click combos <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if can customize them, false otherwise'}, params: []}, {name: 'isDropWeapon', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'checks if weapons are dropped when hovered'}, params: []}, {name: 'isForceScaling', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if forces the SkillAPI health scaling, false otherwise'}, params: []}, {name: 'isKnockback', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'whether or not knockback should be applied when dealing 0 damage'}, params: []}, {name: 'isManaEnabled', description: 'Checks whether or not mana is enabled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isMapTreeAvailable', description: 'Checks whether or not the map tree is available in some way <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if available'}, params: []}, {name: 'isMapTreeEnabled', description: 'Checks whether or not map trees are enabled on the server <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isModifyHealth', description: 'Checks whether or not SkillAPI should modify the max health of players <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isOldHealth', description: 'Checks whether or not old health bars (fixed 10 hearts) are enabled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isOnePerClass', description: 'Retrieves whether or not accounts should be initialized with one file per class. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isShowClassLevel', description: 'Checks whether or not a player\'s class level is to be shown below their name <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if shown, false otherwise'}, params: []}, {name: 'isShowClassName', description: 'Checks whether or not a player\'s class name is to be shown next to their name <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if shown, false otherwise'}, params: []}, {name: 'isShowExpMessages', description: 'Checks whether or not messages should be displayed when a player gains experience <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isShowingAutoSkills', description: 'Checks whether or not auto-leveled skills are to be shown. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if shown, false otherwise'}, params: []}, {name: 'isShowLevelMessages', description: 'Checks whether or not messages should be displayed when a player gains a level <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isShowLossMessages', description: 'Checks whether or not messages should be displayed when a player dies and loses experience <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isShowScoreboard', description: 'Checks whether or not the stats scoreboard is to be shown <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if shown, false otherwise'}, params: []}, {name: 'isShowSkillMessages', description: 'Checks whether or not skill messages are enabled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isSkillBarCooldowns', description: 'Checks whether or not the skill bar is to display cooldowns <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isSkillBarEnabled', description: 'Checks whether or not the skill bar is enabled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isUseActionBar', description: 'Checks whether or not the action bar is being used <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if used, false otherwise'}, params: []}, {name: 'isUseOrbs', description: 'Checks whether or not experience is to be gained through vanilla experience orbs <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isUseSql', description: 'Checks whether or not the plugin is using SQL Database saving <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isWorldEnabled', description: 'Checks whether or not SkillAPI is active in the world <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if active, false otherwise'}, params: [{name: 'world', type: 'World', description: 'world to check'}]}, {name: 'isWorldEnabled', description: 'Checks whether or not SkillAPI is active in the world with the given name. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if active, false otherwise'}, params: [{name: 'world', type: 'String', description: 'world name'}]}, {name: 'loadGroupSettings', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'reload', description: '<p>Reloads the settings from SkillAPI\'s config.yml file.</p> <p>This will fill in any missing values with default values and trim any values that aren\'t supposed to be there.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'useTitle', description: 'Check whether or not to use the title display on the given message type <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if should use title display, false otherwise'}, params: [{name: 'type', type: 'TitleType', description: 'type of message to check for'}]}], fields: [{name: 'Settings', description: '<p>The management class for SkillAPI\'s config.yml settings.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'ArmorCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Checks the player\'s armor for matching items', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ArmorCondition', description: 'Checks the player\'s armor for matching items', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'AttributeCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target to be a player who is given class', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'AttributeCondition', description: 'A condition for dynamic skills that requires the target to be a player who is given class', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'BiomeCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target to be in a specified biome', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'BiomeCondition', description: 'A condition for dynamic skills that requires the target to be in a specified biome', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'BlockCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target to have a specified held item', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'BlockCondition', description: 'A condition for dynamic skills that requires the target to have a specified held item', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ChanceCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires a chance to succeed', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ChanceCondition', description: 'A condition for dynamic skills that requires a chance to succeed', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ClassCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target to be a player who is given class', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ClassCondition', description: 'A condition for dynamic skills that requires the target to be a player who is given class', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ClassLevelCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the caster\'s class level to be within a range', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ClassLevelCondition', description: 'A condition for dynamic skills that requires the caster\'s class level to be within a range', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CombatCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target to be a player who\'s combat status matches the settings', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'CombatCondition', description: 'A condition for dynamic skills that requires the target to be a player who\'s combat status matches the settings', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CrouchCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'SkillAPI com.sucy.skill.dynamic.condition.CrouchCondition <br><br>The MIT License (MIT) <br><br>Copyright (c) 2016 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'CrouchCondition', description: 'SkillAPI com.sucy.skill.dynamic.condition.CrouchCondition <br><br>The MIT License (MIT) <br><br>Copyright (c) 2016 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'DirectionCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target or caster to be facing a direction relative to the other', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'DirectionCondition', description: 'A condition for dynamic skills that requires the target or caster to be facing a direction relative to the other', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ElevationCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target to fit the elevation requirement', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ElevationCondition', description: 'A condition for dynamic skills that requires the target to fit the elevation requirement', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'FireCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target to be on fire', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'FireCondition', description: 'A condition for dynamic skills that requires the target to be on fire', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'FlagCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target to have a specified flag active', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'FlagCondition', description: 'A condition for dynamic skills that requires the target to have a specified flag active', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'HealthCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target\'s health to fit the requirement', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'HealthCondition', description: 'A condition for dynamic skills that requires the target\'s health to fit the requirement', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'InventoryCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target to have a specified item', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'InventoryCondition', description: 'A condition for dynamic skills that requires the target to have a specified item', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ItemCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target to have a specified held item', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ItemCondition', description: 'A condition for dynamic skills that requires the target to have a specified held item', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'LightCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the lighting at the target\'s location to be within a range', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'LightCondition', description: 'A condition for dynamic skills that requires the lighting at the target\'s location to be within a range', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'LoreCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target to have a specified potion effect', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'LoreCondition', description: 'A condition for dynamic skills that requires the target to have a specified potion effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ManaCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target\'s mana to fit the requirement', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ManaCondition', description: 'A condition for dynamic skills that requires the target\'s mana to fit the requirement', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'NameCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target to have a specified potion effect', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'NameCondition', description: 'A condition for dynamic skills that requires the target to have a specified potion effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'OffhandCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Item condition for a player\'s off hand', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'OffhandCondition', description: 'Item condition for a player\'s off hand', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PotionCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target to have a specified potion effect', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'PotionCondition', description: 'A condition for dynamic skills that requires the target to have a specified potion effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'SkillLevelCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the caster\'s skill level to be within a range', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'SkillLevelCondition', description: 'A condition for dynamic skills that requires the caster\'s skill level to be within a range', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'StatusCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target to have a status condition', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'StatusCondition', description: 'A condition for dynamic skills that requires the target to have a status condition', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'TimeCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the game time to match the settings', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'TimeCondition', description: 'A condition for dynamic skills that requires the game time to match the settings', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ToolCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target to have a specified potion effect', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ToolCondition', description: 'A condition for dynamic skills that requires the target to have a specified potion effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ValueCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target to have a specified flag active', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ValueCondition', description: 'A condition for dynamic skills that requires the target to have a specified flag active', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'WaterCondition', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A condition for dynamic skills that requires the target to have a specified potion effect', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'WaterCondition', description: 'A condition for dynamic skills that requires the target to have a specified potion effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'AttributeMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies a flag to each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'AttributeMechanic', description: 'Applies a flag to each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'BlockMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Mechanic that changes blocks for a duration before returning them to what they were', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}, {name: 'isPending', description: 'Checks whether or not the location is modified by a block mechanic <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if modified, false otherwise'}, params: [{name: 'loc', type: 'Location', description: 'location to check'}]}, {name: 'revertAll', description: 'Reverts all block changes', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'BlockMechanic', description: 'Mechanic that changes blocks for a duration before returning them to what they were', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CancelMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Cancels the event that caused the trigger to go off', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'CancelMechanic', description: 'Cancels the event that caused the trigger to go off', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ChannelMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Executes child components after a delay, applying "channeling" rules', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'final LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'final int', description: 'level of the skill'}, {name: 'targets', type: 'final List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ChannelMechanic', description: 'Executes child components after a delay, applying "channeling" rules', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CleanseMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Cleanses a target of negative potion or status effects', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'CleanseMechanic', description: 'Cleanses a target of negative potion or status effects', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CommandMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Executes a command for each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'CommandMechanic', description: 'Executes a command for each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CooldownMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Lowers the cooldowns of the caster\'s skills', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'CooldownMechanic', description: 'Lowers the cooldowns of the caster\'s skills', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'DamageBuffMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies a flag to each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'DamageBuffMechanic', description: 'Applies a flag to each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'DamageLoreMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Deals damage based on a held item\'s lore to each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'DamageLoreMechanic', description: 'Deals damage based on a held item\'s lore to each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'DamageMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Deals damage to each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'DamageMechanic', description: 'Deals damage to each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'DefenseBuffMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies a flag to each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'DefenseBuffMechanic', description: 'Applies a flag to each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'DelayMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Executes child components after a delay', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'final LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'final int', description: 'level of the skill'}, {name: 'targets', type: 'final List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'DelayMechanic', description: 'Executes child components after a delay', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'DisguiseMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Disguises each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'DisguiseMechanic', description: 'Disguises each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ExplosionMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Creates an explosion at the target\'s location', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ExplosionMechanic', description: 'Creates an explosion at the target\'s location', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'FireMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Executes child components after a delay', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'FireMechanic', description: 'Executes child components after a delay', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'FlagClearMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies a flag to each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'FlagClearMechanic', description: 'Applies a flag to each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'FlagMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies a flag to each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'FlagMechanic', description: 'Applies a flag to each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'FlagToggleMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies a flag to each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'FlagToggleMechanic', description: 'Applies a flag to each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'HealMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Heals each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'HealMechanic', description: 'Heals each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ImmunityMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies a damage immunity flag to each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ImmunityMechanic', description: 'Applies a damage immunity flag to each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'InterruptMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Interrupts any channels that may be being performed by the targets', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'InterruptMechanic', description: 'Interrupts any channels that may be being performed by the targets', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ItemMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Gives an item to each player target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ItemMechanic', description: 'Gives an item to each player target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ItemProjectileMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Heals each target', ext: 'EffectComponent', impl: ['ProjectileCallback'], constructors: [], methods: [{name: 'callback', description: 'The callback for the projectiles that applies child components <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'projectile', type: 'CustomProjectile', description: 'projectile calling back for'}, {name: 'hit', type: 'LivingEntity', description: 'the entity hit by the projectile, if any'}]}, {name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ItemProjectileMechanic', description: 'Heals each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ItemRemoveMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Removes an item to from each player target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ItemRemoveMechanic', description: 'Removes an item to from each player target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'LaunchMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Launches the target in a given direction relative to their forward direction', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'LaunchMechanic', description: 'Launches the target in a given direction relative to their forward direction', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'LightningMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Strikes lightning about each target with an offset', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'LightningMechanic', description: 'Strikes lightning about each target with an offset', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ManaMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Gives mana to each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ManaMechanic', description: 'Gives mana to each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'MessageMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Sends a message to each player target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'MessageMechanic', description: 'Sends a message to each player target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ParticleAnimationMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Plays a particle effect', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ParticleAnimationMechanic', description: 'Plays a particle effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ParticleMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Plays a particle effect', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ParticleMechanic', description: 'Plays a particle effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ParticleProjectileMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Heals each target', ext: 'EffectComponent', impl: ['ProjectileCallback'], constructors: [], methods: [{name: 'callback', description: 'The callback for the projectiles that applies child components <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'projectile', type: 'CustomProjectile', description: 'projectile calling back for'}, {name: 'hit', type: 'LivingEntity', description: 'the entity hit by the projectile, if any'}]}, {name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ParticleProjectileMechanic', description: 'Heals each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PassiveMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Executes child components continuously', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}, {name: 'stopAll', description: 'Stops all passive tasks', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'stopTasks', description: 'Stops all passive tasks for the player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'LivingEntity', description: 'player to cancel tasks for'}, {name: 'skill', type: 'String', description: 'skill to cancel'}]}], fields: [{name: 'PassiveMechanic', description: 'Executes child components continuously', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PermissionMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies a flag to each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'PermissionMechanic', description: 'Applies a flag to each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PotionMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Executes child components after a delay', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'PotionMechanic', description: 'Executes child components after a delay', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PotionProjectileMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Heals each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'callback', description: 'The callback for the projectiles that applies child components <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'projectile', type: 'ThrownPotion', description: 'projectile calling back for'}, {name: 'hit', type: 'Collection<LivingEntity>', description: 'the entity hit by the projectile, if any'}]}, {name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'PotionProjectileMechanic', description: 'Heals each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ProjectileMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Heals each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'callback', description: 'The callback for the projectiles that applies child components <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'projectile', type: 'Projectile', description: 'projectile calling back for'}, {name: 'hit', type: 'LivingEntity', description: 'the entity hit by the projectile, if any'}]}, {name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ProjectileMechanic', description: 'Heals each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PurgeMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Purges a target of positive potion or status effects', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'PurgeMechanic', description: 'Purges a target of positive potion or status effects', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PushMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Launches the target in a given direction relative to their forward direction', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'PushMechanic', description: 'Launches the target in a given direction relative to their forward direction', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'RememberTargetsMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies a flag to each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'RememberTargetsMechanic', description: 'Applies a flag to each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'RepeatMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Executes child components multiple times', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}, {name: 'stopAll', description: 'Stops all passive tasks', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'stopTasks', description: 'Stops all repeat tasks for the player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'LivingEntity', description: 'player to cancel tasks for'}, {name: 'skill', type: 'String', description: 'skill to cancel'}]}], fields: [{name: 'RepeatMechanic', description: 'Executes child components multiple times', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'SoundMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Plays a particle effect', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'SoundMechanic', description: 'Plays a particle effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'SpeedMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies a flag to each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'SpeedMechanic', description: 'Applies a flag to each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'StatusMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies a flag to each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'StatusMechanic', description: 'Applies a flag to each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'TauntMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Mechanic for taunting mobs', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'TauntMechanic', description: 'Mechanic for taunting mobs', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ValueAddMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Adds to a cast data value', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ValueAddMechanic', description: 'Adds to a cast data value', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ValueAttributeMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Adds to a cast data value', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ValueAttributeMechanic', description: 'Adds to a cast data value', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ValueLocationMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Adds to a cast data value', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ValueLocationMechanic', description: 'Adds to a cast data value', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ValueLoreMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Adds to a cast data value', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ValueLoreMechanic', description: 'Adds to a cast data value', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ValueMultiplyMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Adds to a cast data value', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ValueMultiplyMechanic', description: 'Adds to a cast data value', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ValueRandomMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Adds to a cast data value', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ValueRandomMechanic', description: 'Adds to a cast data value', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ValueSetMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Adds to a cast data value', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ValueSetMechanic', description: 'Adds to a cast data value', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'WarpLocMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Strikes lightning about each target with an offset', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'WarpLocMechanic', description: 'Strikes lightning about each target with an offset', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'WarpMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Strikes lightning about each target with an offset', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'WarpMechanic', description: 'Strikes lightning about each target with an offset', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'WarpRandomMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Strikes lightning about each target with an offset', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'WarpRandomMechanic', description: 'Strikes lightning about each target with an offset', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'WarpSwapMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Strikes lightning about each target with an offset', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'WarpSwapMechanic', description: 'Strikes lightning about each target with an offset', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'WarpTargetMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Strikes lightning about each target with an offset', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'WarpTargetMechanic', description: 'Strikes lightning about each target with an offset', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'WarpValueMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies a flag to each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'WarpValueMechanic', description: 'Applies a flag to each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'WolfMechanic', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies a flag to each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}, {name: 'removeWolves', description: 'Removes any wolves summoned by the given player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to desummon wolves for'}]}, {name: 'removeWolves', description: 'Removes all of the currently summoned wolves. This would be used to clean up before the plugin is disabled or the server is shut down.', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'LEVEL', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'SKILL_META', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'WolfMechanic', description: 'Applies a flag to each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'AreaTarget', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies child components to the closest all nearby entities around each of the current targets.', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'AreaTarget', description: 'Applies child components to the closest all nearby entities around each of the current targets.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ConeTarget', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies child components to the closest all nearby entities around each of the current targets.', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'ConeTarget', description: 'Applies child components to the closest all nearby entities around each of the current targets.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'LinearTarget', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies child components to the entities in a line in front of each of the provided targets.', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'LinearTarget', description: 'Applies child components to the entities in a line in front of each of the provided targets.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'LocationTarget', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies child components to a location using the caster\'s faced direction', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'LocationTarget', description: 'Applies child components to a location using the caster\'s faced direction', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'NearestTarget', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies child components to the closest entities to the caster within a given range', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'NearestTarget', description: 'Applies child components to the closest entities to the caster within a given range', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'OffsetTarget', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies child effects to a location offset from the current targets', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'OffsetTarget', description: 'Applies child effects to a location offset from the current targets', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'RememberTarget', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies a flag to each target', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'final LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'final int', description: 'level of the skill'}, {name: 'targets', type: 'final List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'RememberTarget', description: 'Applies a flag to each target', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'SelfTarget', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies child components to the caster', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'SelfTarget', description: 'Applies child components to the caster', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'SingleTarget', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Applies child components to the closest linear entity of each of the provided targets.', ext: 'EffectComponent', impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes the component <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if applied to something, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to apply to'}]}], fields: [{name: 'SingleTarget', description: 'Applies child components to the closest linear entity of each of the provided targets.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'DynamicClass', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>A basic implementation of RPGClass that loads from the dynamic folder instead of the normal one. There\'s not really a difference between normal classes, just this is used repeatedly and is added based off configs versus coded ones which need to be manually registered.</p> <p>You should not use this class as it is meant for dynamic usage and any other usage would only be an extra layer.</p>', ext: 'RPGClass', impl: [], constructors: [{name: 'DynamicClass', description: 'Constructs a new dynamic class <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'API reference'}, {name: 'key', type: 'String', description: 'key for the class'}]}], methods: [], fields: [{name: 'DynamicClass', description: '<p>A basic implementation of RPGClass that loads from the dynamic folder instead of the normal one. There\'s not really a difference between normal classes, just this is used repeatedly and is added based off configs versus coded ones which need to be manually registered.</p> <p>You should not use this class as it is meant for dynamic usage and any other usage would only be an extra layer.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'DynamicSkill', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A skill implementation for the Dynamic system', ext: 'Skill', impl: ['Listener', 'PassiveSkill', 'SkillShot'], constructors: [{name: 'DynamicSkill', description: 'Initializes a new dynamic skill <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'name', type: 'String', description: 'name of the skill'}]}], methods: [{name: 'canCast', description: 'Checks whether or not the dynamic skill can be cast <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if can cast, false otherwise'}, params: []}, {name: 'cancelTrigger', description: 'Cancels the event causing a trigger to go off', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'cast', description: 'Casts the skill if applicable <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if casted successfully, false if conditions weren\'t met or no effects are using the cast trigger'}, params: [{name: 'user', type: 'LivingEntity', description: 'user of the skill'}, {name: 'level', type: 'int', description: 'skill level'}]}, {name: 'clearCastData', description: 'Clears any stored cast data for the entity <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to clear cast data for'}]}, {name: 'getActiveLevel', description: 'Retrieves the active level of the caster for the skill <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'active level of the skill'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}]}, {name: 'getAttr', description: 'Retrieves an attribute while supporting dynamic skill attribute paths. Paths are set up by the "icon-key" setting in components. An invalid path will instead return a value of 0. If a path is not provided, this returns a normal attribute on the skill. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'Object', description: 'attribute value or 0 if invalid dynamic path'}, params: [{name: 'caster', type: 'LivingEntity', description: 'owner of the skill'}, {name: 'key', type: 'String', description: 'attribute key'}, {name: 'level', type: 'int', description: 'skill level'}]}, {name: 'getAttrName', description: 'Retrieves the formatted name of an attribute which ignores the dynamic path overhead. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'String', description: 'formatted attribute name'}, params: [{name: 'key', type: 'String', description: 'attribute key'}]}, {name: 'getCastData', description: 'Retrieves the cast data for the caster <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HashMap<String,Object>', description: 'cast data for the caster'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster to get the data for'}]}, {name: 'initialize', description: 'Initializes any corresponding effects when the skill is unlocked/enabled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'user', type: 'LivingEntity', description: 'user to initialize the effects for'}, {name: 'level', type: 'int', description: 'skill level'}]}, {name: 'isActive', description: 'Checks whether or not the caster\'s passives are currently active <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if active, false otherwise'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster to check for'}]}, {name: 'load', description: 'Loads dynamic components in addition to the normal values <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'DataSection', description: 'config data to load from'}]}, {name: 'onCrouch', description: 'Applies crouch triggers <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerToggleSneakEvent', description: 'event details'}]}, {name: 'onDeath', description: 'Applies the death/kill trigger effects <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityDeathEvent', description: 'event details'}]}, {name: 'onEnvironmental', description: 'Environmental damage trigger <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityDamageEvent', description: 'event details'}]}, {name: 'onLand', description: 'Land trigger <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerLandEvent', description: 'event details'}]}, {name: 'onLaunch', description: 'Cancels firing projectiles when the launcher is stunned or disarmed. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'ProjectileLaunchEvent', description: 'event details'}]}, {name: 'onPhysical', description: 'Applies physical damage triggers <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PhysicalDamageEvent', description: 'event details'}]}, {name: 'onSkillDamage', description: 'Applies skill damage triggers <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'SkillDamageEvent', description: 'event details'}]}, {name: 'save', description: 'Saves the skill back to the config, appending component data on top of the normal skill data <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'DataSection', description: 'config to save to'}]}, {name: 'setAttribKey', description: 'Sets an attribute key for obtaining attributes used in the skill indicator. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key string'}, {name: 'component', type: 'EffectComponent', description: 'component to grab attributes from'}]}, {name: 'stopEffects', description: 'Removes active users from the map <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'user', type: 'LivingEntity', description: 'user to stop the effects for'}, {name: 'level', type: 'int', description: 'skill level'}]}, {name: 'update', description: 'Updates the skill effects <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'user', type: 'LivingEntity', description: 'user to refresh the effect for'}, {name: 'prevLevel', type: 'int', description: 'previous skill level'}, {name: 'newLevel', type: 'int', description: 'new skill level'}]}], fields: [{name: 'DynamicSkill', description: 'A skill implementation for the Dynamic system', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'EffectComponent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 1, description: 'A component for dynamic skills which takes care of one effect', ext: 0, impl: [], constructors: [], methods: [{name: 'attr', description: 'Retrieves an attribute value while applying attribute data if enabled and a player is using the skill <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'double', description: 'the value with attribute modifications if applicable'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'key', type: 'String', description: 'key of the value to grab'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'fallback', type: 'double', description: 'default value for the attribute'}, {name: 'self', type: 'boolean', description: 'whether or not the skill is targeting the caster'}]}, {name: 'execute', description: 'Executes the component (to be implemented) <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'public', returnValue: {type: 'boolean', description: 'true if executed, false if conditions not met'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to execute on'}]}, {name: 'executeChildren', description: 'Executes the children of the component using the given targets <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'boolean', description: 'true if executed, false if conditions not met'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}, {name: 'level', type: 'int', description: 'level of the skill'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets to execute on'}]}, {name: 'getKey', description: 'Retrieves the config key for the component <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'config key of the component'}, params: []}, {name: 'getNum', description: 'Retrieves a numerical value while using non-numerical values as keys for the cast data. If the value doesn\'t exist, this will return the default value. If it is a key that doesn\'t have an attached value, it will return 0. Otherwise, it will return the appropriate value. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'double', description: 'the settings value or, if not a number, the cast data value'}, params: [{name: 'caster', type: 'LivingEntity', description: 'the caster of the skill'}, {name: 'key', type: 'String', description: 'key of the value'}, {name: 'fallback', type: 'double', description: 'fallback value in case the settings don\'t have it'}]}, {name: 'getSettings', description: 'Retrieves the settings of the dynamic component <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Settings', description: 'settings of the dynamic component'}, params: []}, {name: 'getSkillData', description: 'Gets the skill data for the caster <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'PlayerSkill', description: 'skill data for the caster or null if not found'}, params: [{name: 'caster', type: 'LivingEntity', description: 'caster of the skill'}]}, {name: 'getType', description: 'Retrieves the type of the component <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'component type'}, params: []}, {name: 'load', description: 'Loads component data from the configuration <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'skill', type: 'DynamicSkill', description: 'owning skill of the component'}, {name: 'config', type: 'DataSection', description: 'config data to load from'}]}, {name: 'save', description: 'Saves the component and its children to the config <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'DataSection', description: 'config to save to'}]}], fields: [{name: 'children', isStatic: 0, isFinal: 1, isAbstract: 0, type: 'ArrayList<EffectComponent>', scope: 'public'}, {name: 'EffectComponent', description: 'A component for dynamic skills which takes care of one effect', isStatic: 0, isFinal: 0, isAbstract: 1, type: '', scope: 'public'}, {name: 'settings', description: 'The settings for the component', isStatic: 0, isFinal: 1, isAbstract: 0, type: 'Settings', scope: 'protected'}, {name: 'skill', description: 'Parent class of the component', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'DynamicSkill', scope: 'protected'}], scope: 'public'},
        {name: 'ItemChecker', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles checking items for dynamic effects', ext: 0, impl: [], constructors: [], methods: [{name: 'check', description: 'Checks an individual item to see if it matches the settings <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if passes all conditions, false otherwise'}, params: [{name: 'item', type: 'ItemStack', description: 'item to check'}, {name: 'level', type: 'int', description: 'level of the effect'}, {name: 'settings', type: 'Settings', description: 'settings to apply'}]}, {name: 'check', description: 'Checks the player inventory for items matching the settings <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if all conditions met, false otherwise'}, params: [{name: 'player', type: 'Player', description: 'player to check'}, {name: 'level', type: 'int', description: 'level of the effect'}, {name: 'settings', type: 'Settings', description: 'settings to apply'}, {name: 'remove', type: 'boolean', description: 'whether or not to remove matching items'}]}, {name: 'checkLore', description: 'Checks the lore of an item <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if matches, false otherwise'}, params: [{name: 'item', type: 'ItemStack', description: 'item to check'}, {name: 'target', type: 'String', description: 'lore text desired'}, {name: 'regex', type: 'boolean', description: 'whether or not the target is a regex pattern'}]}, {name: 'checkName', description: 'Checks the display name of the item <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if matches, false otherwise'}, params: [{name: 'item', type: 'ItemStack', description: 'item to check'}, {name: 'target', type: 'String', description: 'display name desired'}, {name: 'regex', type: 'boolean', description: 'whether or not the target is a regex pattern'}]}], fields: [{name: 'ItemChecker', description: 'Handles checking items for dynamic effects', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'TempEntity', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Temporary dummy entity used for targeting a location in the dynamic system', ext: 0, impl: ['LivingEntity'], constructors: [{name: 'TempEntity', description: 'Sets up a new dummy entity <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'loc', type: 'Location', description: 'location to represent'}]}], methods: [{name: '_INVALID_damage', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'i', type: 'int', description: ''}]}, {name: '_INVALID_damage', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'i', type: 'int', description: ''}, {name: 'entity', type: 'Entity', description: ''}]}, {name: '_INVALID_getHealth', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: '_INVALID_getLastDamage', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: '_INVALID_getMaxHealth', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: '_INVALID_setHealth', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'i', type: 'int', description: ''}]}, {name: '_INVALID_setLastDamage', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'i', type: 'int', description: ''}]}, {name: '_INVALID_setMaxHealth', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'i', type: 'int', description: ''}]}, {name: 'addAttachment', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PermissionAttachment', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: ''}, {name: 's', type: 'String', description: ''}, {name: 'b', type: 'boolean', description: ''}]}, {name: 'addAttachment', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PermissionAttachment', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: ''}]}, {name: 'addAttachment', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PermissionAttachment', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: ''}, {name: 'i', type: 'int', description: ''}]}, {name: 'addAttachment', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PermissionAttachment', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: ''}, {name: 's', type: 'String', description: ''}, {name: 'b', type: 'boolean', description: ''}, {name: 'i', type: 'int', description: ''}]}, {name: 'addPotionEffect', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'potionEffect', type: 'PotionEffect', description: ''}, {name: 'b', type: 'boolean', description: ''}]}, {name: 'addPotionEffect', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'potionEffect', type: 'PotionEffect', description: ''}]}, {name: 'addPotionEffects', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'collection', type: 'Collection<PotionEffect>', description: ''}]}, {name: 'damage', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'v', type: 'double', description: ''}]}, {name: 'damage', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'v', type: 'double', description: ''}, {name: 'entity', type: 'Entity', description: ''}]}, {name: 'eject', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'getActivePotionEffects', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Collection<PotionEffect>', description: ''}, params: []}, {name: 'getAttribute', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'AttributeInstance', description: ''}, params: [{name: 'attribute', type: 'Attribute', description: ''}]}, {name: 'getCanPickupItems', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'getCustomName', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: ''}, params: []}, {name: 'getEffectivePermissions', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Set<PermissionAttachmentInfo>', description: ''}, params: []}, {name: 'getEntityId', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getEquipment', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'EntityEquipment', description: ''}, params: []}, {name: 'getEyeHeight', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: ''}, params: []}, {name: 'getEyeHeight', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: ''}, params: [{name: 'b', type: 'boolean', description: ''}]}, {name: 'getEyeLocation', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Location', description: ''}, params: []}, {name: 'getFallDistance', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'float', description: ''}, params: []}, {name: 'getFireTicks', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getHealth', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: ''}, params: []}, {name: 'getKiller', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player', description: ''}, params: []}, {name: 'getLastDamage', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: ''}, params: []}, {name: 'getLastDamageCause', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'EntityDamageEvent', description: ''}, params: []}, {name: 'getLastTwoTargetBlocks', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<Block>', description: ''}, params: [{name: 'set', type: 'Set<Material>', description: ''}, {name: 'i', type: 'int', description: ''}]}, {name: 'getLastTwoTargetBlocks', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<Block>', description: ''}, params: [{name: 'hashSet', type: 'HashSet<Byte>', description: ''}, {name: 'i', type: 'int', description: ''}]}, {name: 'getLeashHolder', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Entity', description: ''}, params: []}, {name: 'getLineOfSight', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<Block>', description: ''}, params: [{name: 'set', type: 'Set<Material>', description: ''}, {name: 'i', type: 'int', description: ''}]}, {name: 'getLineOfSight', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<Block>', description: ''}, params: [{name: 'hashSet', type: 'HashSet<Byte>', description: ''}, {name: 'i', type: 'int', description: ''}]}, {name: 'getLocation', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Location', description: ''}, params: []}, {name: 'getLocation', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Location', description: ''}, params: [{name: 'location', type: 'Location', description: ''}]}, {name: 'getMaxFireTicks', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getMaxHealth', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: ''}, params: []}, {name: 'getMaximumAir', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getMaximumNoDamageTicks', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getMetadata', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<MetadataValue>', description: ''}, params: [{name: 's', type: 'String', description: ''}]}, {name: 'getName', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: ''}, params: []}, {name: 'getNearbyEntities', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<Entity>', description: ''}, params: [{name: 'x', type: 'double', description: ''}, {name: 'y', type: 'double', description: ''}, {name: 'z', type: 'double', description: ''}]}, {name: 'getNoDamageTicks', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getPassenger', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Entity', description: ''}, params: []}, {name: 'getRemainingAir', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getRemoveWhenFarAway', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'getServer', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Server', description: ''}, params: []}, {name: 'getTargetBlock', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Block', description: ''}, params: [{name: 'set', type: 'Set<Material>', description: ''}, {name: 'i', type: 'int', description: ''}]}, {name: 'getTargetBlock', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Block', description: ''}, params: [{name: 'hashSet', type: 'HashSet<Byte>', description: ''}, {name: 'i', type: 'int', description: ''}]}, {name: 'getTicksLived', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getType', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'EntityType', description: ''}, params: []}, {name: 'getUniqueId', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'UUID', description: ''}, params: []}, {name: 'getVehicle', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Entity', description: ''}, params: []}, {name: 'getVelocity', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Vector', description: ''}, params: []}, {name: 'getWorld', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'World', description: ''}, params: []}, {name: 'hasLineOfSight', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'entity', type: 'Entity', description: ''}]}, {name: 'hasMetadata', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 's', type: 'String', description: ''}]}, {name: 'hasPermission', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'permission', type: 'Permission', description: ''}]}, {name: 'hasPermission', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 's', type: 'String', description: ''}]}, {name: 'hasPotionEffect', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'potionEffectType', type: 'PotionEffectType', description: ''}]}, {name: 'isCustomNameVisible', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'isDead', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'isEmpty', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'isGlowing', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'isInsideVehicle', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'isLeashed', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'isOnGround', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'isOp', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'isPermissionSet', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'permission', type: 'Permission', description: ''}]}, {name: 'isPermissionSet', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 's', type: 'String', description: ''}]}, {name: 'isValid', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'leaveVehicle', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'playEffect', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'entityEffect', type: 'EntityEffect', description: ''}]}, {name: 'recalculatePermissions', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'remove', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'removeAttachment', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'permissionAttachment', type: 'PermissionAttachment', description: ''}]}, {name: 'removeMetadata', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 's', type: 'String', description: ''}, {name: 'plugin', type: 'Plugin', description: ''}]}, {name: 'removePotionEffect', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'potionEffectType', type: 'PotionEffectType', description: ''}]}, {name: 'resetMaxHealth', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'sendMessage', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'strings', type: 'String[]', description: ''}]}, {name: 'sendMessage', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 's', type: 'String', description: ''}]}, {name: 'setCanPickupItems', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'b', type: 'boolean', description: ''}]}, {name: 'setCustomName', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 's', type: 'String', description: ''}]}, {name: 'setCustomNameVisible', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'b', type: 'boolean', description: ''}]}, {name: 'setFallDistance', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'v', type: 'float', description: ''}]}, {name: 'setFireTicks', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'i', type: 'int', description: ''}]}, {name: 'setGlowing', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'b', type: 'boolean', description: ''}]}, {name: 'setHealth', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'v', type: 'double', description: ''}]}, {name: 'setLastDamage', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'v', type: 'double', description: ''}]}, {name: 'setLastDamageCause', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'entityDamageEvent', type: 'EntityDamageEvent', description: ''}]}, {name: 'setLeashHolder', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'entity', type: 'Entity', description: ''}]}, {name: 'setMaxHealth', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'v', type: 'double', description: ''}]}, {name: 'setMaximumAir', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'i', type: 'int', description: ''}]}, {name: 'setMaximumNoDamageTicks', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'i', type: 'int', description: ''}]}, {name: 'setMetadata', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 's', type: 'String', description: ''}, {name: 'metadataValue', type: 'MetadataValue', description: ''}]}, {name: 'setNoDamageTicks', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'i', type: 'int', description: ''}]}, {name: 'setOp', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'b', type: 'boolean', description: ''}]}, {name: 'setPassenger', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'entity', type: 'Entity', description: ''}]}, {name: 'setRemainingAir', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'i', type: 'int', description: ''}]}, {name: 'setRemoveWhenFarAway', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'b', type: 'boolean', description: ''}]}, {name: 'setTicksLived', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'i', type: 'int', description: ''}]}, {name: 'setVelocity', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'vector', type: 'Vector', description: ''}]}, {name: 'shootArrow', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Arrow', description: ''}, params: []}, {name: 'spigot', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Spigot', description: ''}, params: []}, {name: 'teleport', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'entity', type: 'Entity', description: ''}]}, {name: 'teleport', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'entity', type: 'Entity', description: ''}, {name: 'teleportCause', type: 'PlayerTeleportEvent.TeleportCause', description: ''}]}, {name: 'teleport', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'location', type: 'Location', description: ''}]}, {name: 'teleport', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'location', type: 'Location', description: ''}, {name: 'teleportCause', type: 'PlayerTeleportEvent.TeleportCause', description: ''}]}, {name: 'throwEgg', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Egg', description: ''}, params: []}, {name: 'throwSnowball', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Snowball', description: ''}, params: []}], fields: [{name: 'T', isStatic: 0, isFinal: 0, isAbstract: 0, type: '<TextendsProjectile>', scope: 'public'}, {name: 'T', isStatic: 0, isFinal: 0, isAbstract: 0, type: '<TextendsProjectile>', scope: 'public'}, {name: 'TempEntity', description: 'Temporary dummy entity used for targeting a location in the dynamic system', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'Menu', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Manages schemes for the map menus', ext: 0, impl: [], constructors: [], methods: [{name: 'initialize', description: 'Sets up the schemes for SkillAPI <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'SkillAPI reference'}]}], fields: [{name: 'BACK_0', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'BACK_1', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'BACKGROUND', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'DETAIL', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'DETAIL_MENU', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'SkillDetailMenu', scope: 'public'}, {name: 'DOWN_0', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'DOWN_1', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'FONT', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'LIST', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'LIST_MENU', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'SkillListMenu', scope: 'public'}, {name: 'Menu', description: 'Manages schemes for the map menus', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'MORE_0', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'MORE_1', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'NAMEPLATE', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'SELECTOR', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'SKILL_TREE', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'TITLE', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'UP_0', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'UP_1', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}], scope: 'public'},
        {name: 'SkillDetailMenu', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'SkillAPI com.sucy.skill.gui.SkillDetailMenu <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', ext: 'MapMenu', impl: [], constructors: [{name: 'SkillDetailMenu', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: ''}]}], methods: [{name: 'onDown', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: ''}]}, {name: 'onLeft', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: ''}]}, {name: 'onRight', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: ''}]}, {name: 'onSelect', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: ''}]}, {name: 'onUp', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: ''}]}, {name: 'render', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'mapBuffer', type: 'MapBuffer', description: ''}, {name: 'player', type: 'Player', description: ''}]}, {name: 'setup', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: ''}]}], fields: [{name: 'SkillDetailMenu', description: 'SkillAPI com.sucy.skill.gui.SkillDetailMenu <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'SkillListMenu', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'SkillAPI com.sucy.skill.gui.SkillListMenu <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', ext: 'MapMenu', impl: [], constructors: [{name: 'SkillListMenu', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: ''}]}], methods: [{name: 'getSkill', description: 'Gets the selected skill of a player <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerSkill', description: 'player\'s selection or null if hasn\'t selected one'}, params: [{name: 'player', type: 'Player', description: 'player to get the selection of'}]}, {name: 'onDown', description: 'Moves to the next skill <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to move for'}]}, {name: 'onLeft', description: 'Jumping back 4 skills <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to jump back for'}]}, {name: 'onRight', description: 'Jumping forward 4 skills <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to jump forward for'}]}, {name: 'onSelect', description: 'Selects the current skill for extra details <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player selecting a skill'}]}, {name: 'onUp', description: 'Moves to the previous skill <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to move for'}]}, {name: 'render', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'mapBuffer', type: 'MapBuffer', description: ''}, {name: 'player', type: 'Player', description: ''}]}, {name: 'setup', description: 'Gets the player ready for the menu <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to prepare for the menu'}]}], fields: [{name: 'SkillListMenu', description: 'SkillAPI com.sucy.skill.gui.SkillListMenu <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'DisguiseHook', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles calling functions from Lib\'s Disguise', ext: 0, impl: [], constructors: [], methods: [{name: 'disguiseMisc', description: 'Disguises the target as a miscellaneous thing <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'target', type: 'LivingEntity', description: 'target to disguise'}, {name: 'type', type: 'String', description: 'disguise type'}, {name: 'data', type: 'int', description: 'disguise data value'}]}, {name: 'disguiseMob', description: 'Disguises the target as a mob <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'target', type: 'LivingEntity', description: 'target to disguise'}, {name: 'type', type: 'String', description: 'type of mob to disguise as'}, {name: 'adult', type: 'boolean', description: 'whether or not the mob is an adult'}]}, {name: 'disguisePlayer', description: 'Disguises the target as a player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'target', type: 'LivingEntity', description: 'target to disguise'}, {name: 'player', type: 'String', description: 'player to disguise as'}]}, {name: 'removeDisguise', description: 'Removes all disguises from the target <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'target', type: 'LivingEntity', description: 'target to remove disguises from'}]}], fields: [{name: 'DisguiseHook', description: 'Handles calling functions from Lib\'s Disguise', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'NoCheatHook', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles plugin calls to NoCheatPlus to get around it blocking skill effects', ext: 0, impl: [], constructors: [], methods: [{name: 'exempt', description: 'Exempts the player from NCP functionality <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to exempt'}]}, {name: 'unexempt', description: 'Unexempts the player from NCP functionality <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to unexempt'}]}], fields: [{name: 'NoCheatHook', description: 'Handles plugin calls to NoCheatPlus to get around it blocking skill effects', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PluginChecker', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handler for checking whether or not hooked plugins are present and active before using related code.', ext: 0, impl: [], constructors: [], methods: [{name: 'isDisguiseActive', description: 'Checks whether or not Lib\'s Disguises is active <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if active'}, params: []}, {name: 'isNoCheatActive', description: 'Checks whether or not NoCheatPlus is active on the server <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if active, false otherwise'}, params: []}, {name: 'isVaultActive', description: 'Checks if vault is active on the server <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if active with permissions plugin, false otherwise'}, params: []}], fields: [{name: 'PluginChecker', description: 'Handler for checking whether or not hooked plugins are present and active before using related code.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'VaultHook', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Manages setting permissions through vault', ext: 0, impl: [], constructors: [], methods: [{name: 'add', description: 'Adds a permission to the player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to add to'}, {name: 'node', type: 'String', description: 'permission node to add'}]}, {name: 'has', description: 'Checks whether or not the player has the permission <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the player has it, false otherwise'}, params: [{name: 'player', type: 'Player', description: 'player to check for'}, {name: 'node', type: 'String', description: 'permission node to remove'}]}, {name: 'isValid', description: 'Checks whether or not the Vault reference is valid with a permissions plugin <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if valid, false otherwise'}, params: []}, {name: 'remove', description: 'Removes a permission from the player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to remove from'}, {name: 'node', type: 'String', description: 'permission node to remove'}]}], fields: [{name: 'VaultHook', description: 'Manages setting permissions through vault', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'ErrorNodes', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Error message language nodes', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'ErrorNodes', description: 'Error message language nodes', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'GUINodes', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'SkillAPI com.sucy.skill.language.GUINodes <br><br>The MIT License (MIT) <br><br>Copyright (c) 2016 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'GUINodes', description: 'SkillAPI com.sucy.skill.language.GUINodes <br><br>The MIT License (MIT) <br><br>Copyright (c) 2016 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'NotificationNodes', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Default message language nodes', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'NotificationNodes', description: 'Default message language nodes', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'RPGFilter', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Various text filters used by SkillAPI', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'ACCOUNT', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'CLASS', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'COOLDOWN', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'COST', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'DURATION', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'EXP', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'GROUP', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'ITEM', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'LEVEL', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'LIST', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'MANA', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'MAX', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'MISSING', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'NAME', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'POINTS', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'PROFESSION', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'RPGFilter', description: 'Various text filters used by SkillAPI', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SCHEME', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'SKILL', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'TYPE', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}], scope: 'public'},
        {name: 'SkillNodes', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Nodes for the language file pertaining to the skill tree</p> <p>This is primarily for the API retrieving config messages. You shouldn\'t need to use these values at all.</p>', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'SkillNodes', description: '<p>Nodes for the language file pertaining to the skill tree</p> <p>This is primarily for the API retrieving config messages. You shouldn\'t need to use these values at all.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'AttributeListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Listener for managing applying attribute bonuses for players', ext: 0, impl: ['Listener'], constructors: [], methods: [{name: 'cleanup', description: 'Cleans up the listener on shutdown', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'clearBonuses', description: 'Clears stored bonuses for the given player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to clear bonuses for'}]}, {name: 'onClick', description: 'Handles attribute menu interaction <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'InventoryClickEvent', description: 'event details'}]}, {name: 'onInvest', description: 'Applies health and mana attribute bonuses on upgrading the attribute <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerUpAttributeEvent', description: 'event details'}]}, {name: 'onJoin', description: 'Gives players bonus stats on login', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerJoinEvent', description: ''}]}, {name: 'onLevelUp', description: 'Applies health and mana bonus attributes <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerLevelUpEvent', description: 'event details'}]}, {name: 'onManaRegen', description: 'Apply attributes to mana regen <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerManaGainEvent', description: 'event details'}]}, {name: 'onPhysicalDamage', description: 'Apply physical damage/defense attribute buffs <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PhysicalDamageEvent', description: 'event details'}]}, {name: 'onQuit', description: 'Clears stored bonuses for a player when they quit <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerQuitEvent', description: 'event details'}]}, {name: 'onRespawn', description: 'Updates attributes on respawn <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerRespawnEvent', description: 'event details'}]}, {name: 'onSkillDamage', description: 'Apply skill damage/defense attribute buffs <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'SkillDamageEvent', description: 'event details'}]}, {name: 'refreshSpeed', description: 'Refreshes player speed after buffs expire <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to refresh'}]}, {name: 'updatePlayer', description: 'Updates the stats of a player based on their current attributes <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'data', type: 'PlayerData', description: 'player to update'}]}], fields: [{name: 'AttributeListener', description: 'Listener for managing applying attribute bonuses for players', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'MENU_KEY', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}], scope: 'public'},
        {name: 'BarListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles interactions with skill bars. This shouldn\'t be use by other plugins as it is handled by the API.', ext: 0, impl: ['Listener'], constructors: [{name: 'BarListener', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: []}], methods: [{name: 'onAssign', description: 'Event for assigning skills to the skill bar <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'InventoryClickEvent', description: 'event details'}]}, {name: 'onCast', description: 'Applies skill bar actions when pressing the number keys <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerItemHeldEvent', description: 'event details'}]}, {name: 'onChangeMode', description: 'Clears or sets up the skill bar upon changing from or to creative mode <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerGameModeChangeEvent', description: 'event details'}]}, {name: 'onDeath', description: 'Clears the skill bar on death <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerDeathEvent', description: 'event details'}]}, {name: 'onDowngrade', description: 'Updates a player\'s skill bar when downgrading a skill to level 0 <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final PlayerSkillDowngradeEvent', description: 'event details'}]}, {name: 'onJoin', description: 'Sets up skill bars on joining <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerJoinEvent', description: 'event details'}]}, {name: 'onProfess', description: 'Manages setting up and clearing the skill bar when a player changes professions <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerClassChangeEvent', description: 'event details'}]}, {name: 'onQuit', description: 'Clears skill bars upon quitting the game <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerQuitEvent', description: 'event details'}]}, {name: 'onRespawn', description: 'Sets the skill bar back up on respawn <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerRespawnEvent', description: 'event details'}]}, {name: 'onUnlock', description: 'Adds unlocked skills to the skill bar if applicable <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerSkillUnlockEvent', description: 'event details'}]}, {name: 'onUpgrade', description: 'Updates the skill bar when a skill is upgraded <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerSkillUpgradeEvent', description: 'event details'}]}], fields: [{name: 'BarListener', description: 'Handles interactions with skill bars. This shouldn\'t be use by other plugins as it is handled by the API.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CastListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A listener that handles casting skills through binds. This shouldn\'t be use by other plugins as it is handled by the API.', ext: 0, impl: ['Listener'], constructors: [], methods: [{name: 'onInteract', description: 'Handles interact events to check when a player right clicks with a bound item to cast a skill. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerInteractEvent', description: 'event details'}]}], fields: [{name: 'CastListener', description: 'A listener that handles casting skills through binds. This shouldn\'t be use by other plugins as it is handled by the API.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ClickListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles transferring click actions by the player to combos that cast skills.', ext: 0, impl: ['Listener'], constructors: [], methods: [{name: 'onClick', description: 'Registers clicks as they happen <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerInteractEvent', description: 'event details'}]}, {name: 'onShiftClick', description: 'Registers shift clicks as they happen <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerToggleSneakEvent', description: 'event details'}]}], fields: [{name: 'ClickListener', description: 'Handles transferring click actions by the player to combos that cast skills.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ItemListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Listener that handles weapon item lore requirements', ext: 0, impl: ['Listener'], constructors: [], methods: [{name: 'onAttack', description: 'Cancels left clicks on disabled items <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityDamageByEntityEvent', description: 'event details'}]}, {name: 'onQuit', description: 'Clear attribute buff data on quit <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerQuitEvent', description: 'event details'}]}, {name: 'onShoot', description: 'Cancels firing a bow with a disabled weapon <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityShootBowEvent', description: 'event details'}]}], fields: [{name: 'ItemListener', description: 'Listener that handles weapon item lore requirements', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'KillListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Tracks who kills what entities and awards experience accordingly', ext: 0, impl: ['Listener'], constructors: [], methods: [{name: 'onKill', description: 'Grants experience upon killing a monster and blocks experience when the monster originated from a blocked source. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityDeathEvent', description: 'event details'}]}, {name: 'onPhysical', description: 'Keeps track of killers when dealing physical damage <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PhysicalDamageEvent', description: 'event details'}]}, {name: 'onSpawn', description: 'Marks spawned entities with how they spawned to block experience from certain methods <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'CreatureSpawnEvent', description: 'event details'}]}, {name: 'onSpell', description: 'Keeps track of killers when dealing damage with skills <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'SkillDamageEvent', description: 'event details'}]}, {name: 'onTrue', description: 'Keeps track of killers when dealing true damage with skills <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'TrueDamageEvent', description: 'event details'}]}, {name: 'onUnload', description: 'Removes entities from the map on unload <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'ChunkUnloadEvent', description: 'event details'}]}], fields: [{name: 'KillListener', description: 'Tracks who kills what entities and awards experience accordingly', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ListenerUtil', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Helper class for listeners', ext: 0, impl: [], constructors: [], methods: [{name: 'getDamager', description: 'Retrieves a damager from an entity damage event which will get the shooter of projectiles if it was a projectile hitting them or converts the Entity damager to a LivingEntity if applicable. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'LivingEntity', description: 'LivingEntity damager of the event or null if not found'}, params: [{name: 'event', type: 'EntityDamageByEntityEvent', description: 'event to grab the damager from'}]}, {name: 'getName', description: 'Gets a simple name of the entity <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'simple name of the entity'}, params: [{name: 'entity', type: 'Entity', description: 'entity to get the name of'}]}], fields: [{name: 'ListenerUtil', description: 'Helper class for listeners', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'MainListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'The main listener for SkillAPI  that handles general mechanics such as loading/clearing data, controlling experience gains, and enabling/disabling passive abilities.', ext: 0, impl: ['Listener'], constructors: [], methods: [{name: 'onBreak', description: 'Handles experience when a block is broken <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'BlockBreakEvent', description: 'event details'}]}, {name: 'onCombat', description: 'Handles marking players as in combat <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityDamageByEntityEvent', description: 'event details'}]}, {name: 'onDamage', description: 'Damage type immunities <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityDamageEvent', description: 'event details'}]}, {name: 'onDamage', description: 'Applies damage and defense buffs when something takes or deals damage to something else. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityDamageByEntityEvent', description: 'event details'}]}, {name: 'onDeath', description: 'Stops passives an applies death penalties when a player dies. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerDeathEvent', description: 'event details'}]}, {name: 'onExpBottleBreak', description: 'Handles experience when a Bottle o\' Enchanting breaks <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'ExpBottleEvent', description: 'event details'}]}, {name: 'onExpChange', description: 'Prevents experience orbs from modifying the level bar when it is used for displaying class level. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerExpChangeEvent', description: 'event details'}]}, {name: 'onJoin', description: 'Starts passives and applies class data when a player logs in. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerJoinEvent', description: 'event details'}]}, {name: 'onLogin', description: 'Loads player data asynchronously when a player tries to log in <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'AsyncPlayerPreLoginEvent', description: 'event details'}]}, {name: 'onPhysicalDamage', description: 'Launches physical damage events to differentiate skill damage from physical damage <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityDamageByEntityEvent', description: 'event details'}]}, {name: 'onQuit', description: 'Saves player data when they log out and stops passives <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerQuitEvent', description: 'event details'}]}, {name: 'onRespawn', description: 'Starts passive abilities again after respawning <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerRespawnEvent', description: 'event details'}]}, {name: 'onSaturationHeal', description: 'Cancels saturation heal <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityRegainHealthEvent', description: 'event details'}]}, {name: 'onSmelt', description: 'Handles experience when ore is smelted in a furnace <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'FurnaceExtractEvent', description: 'event details'}]}, {name: 'onStarve', description: 'Cancels food damaging the player when the bar is being used for GUI features instead of normal hunger. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityDamageEvent', description: 'event details'}]}, {name: 'onWorldChange', description: 'Applies or removes SkillAPI features from a player upon switching worlds <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerChangedWorldEvent', description: 'event details'}]}], fields: [{name: 'MainListener', description: 'The main listener for SkillAPI  that handles general mechanics such as loading/clearing data, controlling experience gains, and enabling/disabling passive abilities.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'MechanicListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'The listener for handling events related to dynamic mechanics', ext: 0, impl: ['Listener'], constructors: [], methods: [{name: 'cleanup', description: 'Cleans up listener data on shutdown', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'onApply', description: 'Applies effects when specific flag keys are set <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'FlagApplyEvent', description: 'event details'}]}, {name: 'onBreak', description: 'Can\'t break blocks from block mechanics <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'BlockBreakEvent', description: 'event details'}]}, {name: 'onChangeWorld', description: 'Remove wolves of a player upon changing worlds <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerChangedWorldEvent', description: 'event details'}]}, {name: 'onDeath', description: 'Remove wolves of a dead player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerDeathEvent', description: 'event details'}]}, {name: 'onExpire', description: 'Clears speed modifiers when the flag expires <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'FlagExpireEvent', description: 'event details'}]}, {name: 'onExplode', description: 'Stop explosions of projectiles fired from skills <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityExplodeEvent', description: 'event details'}]}, {name: 'onLand', description: 'Applies projectile callbacks when landing on the ground <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'ProjectileHitEvent', description: 'event details'}]}, {name: 'onMove', description: 'Checks for landing on the ground <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerMoveEvent', description: 'event details'}]}, {name: 'onQuit', description: 'Resets walk speed and clears them from the map when quitting <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerQuitEvent', description: 'event details'}]}, {name: 'onShoot', description: 'Applies projectile callbacks when striking an enemy <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityDamageByEntityEvent', description: 'event details'}]}, {name: 'onSplash', description: 'Handles when a potion projectile hits things <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PotionSplashEvent', description: 'event details'}]}, {name: 'onSummonDamage', description: 'Handles when summoned monsters deal damage <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityDamageByEntityEvent', description: 'event details'}]}], fields: [{name: 'DISGUISE_KEY', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'MechanicListener', description: 'The listener for handling events related to dynamic mechanics', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'P_CALL', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'POTION_PROJECTILE', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'SPEED_KEY', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'SUMMON_DAMAGE', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}], scope: 'public'},
        {name: 'StatusListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Listener for applying default status flags for the API. You should not use this class as it is already set up by the API.', ext: 0, impl: ['Listener'], constructors: [], methods: [{name: 'cleanup', description: 'Cleans up the listener data on shutdown', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'onCast', description: 'Cancels players casting skills while stunned or silenced <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerCastSkillEvent', description: 'event details'}]}, {name: 'onDamage', description: 'Cancels damage when an attacker is disarmed. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityDamageByEntityEvent', description: 'event details'}]}, {name: 'onDamaged', description: 'Cancels damage when a defender is invincible or inverting damage <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityDamageEvent', description: 'event details'}]}, {name: 'onFlag', description: 'Applies a slow potion to mobs when stunned/rooted due to them not having a move event like the players. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'FlagApplyEvent', description: 'event details'}]}, {name: 'onInterrupt', description: 'Applies interrupt effects, stopping channeling. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'FlagApplyEvent', description: 'event details'}]}, {name: 'onLaunch', description: 'Cancels firing projectiles when the launcher is stunned or disarmed. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'ProjectileLaunchEvent', description: 'event details'}]}, {name: 'onMove', description: 'Cancels player movement when stunned or rooted <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerMoveEvent', description: 'event details'}]}, {name: 'onQuit', description: 'Clears data for players leaving the server <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerQuitEvent', description: 'event details'}]}, {name: 'onTrueDamage', description: 'Cancels damage when a defender is invincible or inverting damage <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'TrueDamageEvent', description: 'event details'}]}], fields: [{name: 'StatusListener', description: 'Listener for applying default status flags for the API. You should not use this class as it is already set up by the API.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'TreeListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Listener for Skill Tree click events', ext: 0, impl: ['Listener'], constructors: [], methods: [{name: 'onClick', description: 'Handles skill tree interaction <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'InventoryClickEvent', description: 'event details'}]}], fields: [{name: 'CLASS_LIST_KEY', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'TreeListener', description: 'Listener for Skill Tree click events', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'Logger', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles logging messages of varying levels', ext: 0, impl: [], constructors: [], methods: [{name: 'bug', description: 'Displays an error message for a bug <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'message', type: 'String', description: 'error message'}]}, {name: 'invalid', description: 'Displays an error message for an invalid setting <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'message', type: 'String', description: 'error message'}]}, {name: 'loadLevels', description: 'Loads all logging level settings from the config data <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'DataSection', description: 'config data to load from'}]}, {name: 'log', description: 'Logs a message, ignoring any active logging levels <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'message', type: 'String', description: 'message to log'}]}, {name: 'log', description: 'Logs a message under the given category if it meets the level requirement. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'category key'}, {name: 'level', type: 'int', description: 'logging level'}, {name: 'message', type: 'String', description: 'message to send'}]}, {name: 'log', description: 'Logs a message under the given category if it meets the level requirement. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'LogType', description: 'category key'}, {name: 'level', type: 'int', description: 'logging level'}, {name: 'message', type: 'String', description: 'message to send'}]}, {name: 'setLevel', description: 'Sets the active logging level for a given category <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'category'}, {name: 'level', type: 'int', description: 'logging level'}]}], fields: [{name: 'Logger', description: 'Handles logging messages of varying levels', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'AttributeManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles loading and accessing individual attributes from the configuration.', ext: 0, impl: [], constructors: [{name: 'AttributeManager', description: 'Sets up the attribute manager, loading the attribute data from the configuration. This is handled by SkillAPI automatically so other plugins should not instantiate this class. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'SkillAPI reference'}]}], methods: [{name: 'getAttribute', description: 'Retrieves an attribute template <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Attribute', description: 'template for the attribute'}, params: [{name: 'key', type: 'String', description: 'attribute key'}]}, {name: 'getKeys', description: 'Retrieves the available attribute keys <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Set<String>', description: 'set of available attribute keys'}, params: []}], fields: [{name: 'Attribute', description: 'A single attribute template', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'AttributeManager', description: 'Handles loading and accessing individual attributes from the configuration.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'AttributeValue', description: 'Represents one formula modifier for an attribute that can have conditions', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'HEALTH', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'MANA', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'MANA_REGEN', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'MOVE_SPEED', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'PHYSICAL_DAMAGE', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'PHYSICAL_DEFENSE', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'SKILL_DAMAGE', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'SKILL_DEFENSE', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}], scope: 'public'},
        {name: 'ClassBoardManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Manages prefixes for classes - Only works if ChatAPI is installed -', ext: 0, impl: [], constructors: [], methods: [{name: 'clear', description: 'Clears the prefix for a player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'VersionPlayer', description: 'player reference'}]}, {name: 'clear', description: 'Clears a class prefix <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'String', description: 'player name'}]}, {name: 'clearAll', description: 'Clears all scoreboards for the plugin', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'registerClass', description: 'Registers a class with the MCCore scoreboards <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'c', type: 'RPGClass', description: 'class to register'}]}, {name: 'registerText', description: 'Registers the text below player names', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'update', description: 'Updates scoreboard information for the player data <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'PlayerData', description: 'player name'}, {name: 'prefix', type: 'String', description: 'prefix text'}, {name: 'braceColor', type: 'ChatColor', description: 'color of braces'}]}, {name: 'updateLevel', description: 'Updates the player\'s level in the scoreboards <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'data', type: 'PlayerData', description: 'player\'s data to use for the update'}]}], fields: [{name: 'ClassBoardManager', description: 'Manages prefixes for classes - Only works if ChatAPI is installed -', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Sets up commands for the plugin', ext: 0, impl: [], constructors: [{name: 'CmdManager', description: 'Initializes a new command manager. This is handled by the API and shouldn\'t be used by other plugins. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'SkillAPI reference'}]}], methods: [{name: 'clear', description: 'Unregisters all commands for SkillAPI from the server', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'initialize', description: 'Initializes commands with MCCore\'s CommandManager', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'CmdManager', description: 'Sets up commands for the plugin', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ComboManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Manages click combos with what combos are active and what skills result from various combinations', ext: 0, impl: [], constructors: [{name: 'ComboManager', description: 'Initializes the combo manager, grabbing settings from the configuration to prepare data', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: []}], methods: [{name: 'conflicts', description: 'Compares two combo IDs to see if they conflict <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if conflicts, false otherwise'}, params: [{name: 'c1', type: 'int', description: 'first combo ID'}, {name: 'c2', type: 'int', description: 'second combo ID'}]}, {name: 'convertCombo', description: 'Converts a click combination to an ID <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'combo ID'}, params: [{name: 'clicks', type: 'Click[]', description: 'clicks to convert'}, {name: 'amount', type: 'int', description: 'number of clicks to convert'}]}, {name: 'convertCombo', description: 'Converts a click combination to an ID <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'combo ID'}, params: [{name: 'clicks', type: 'Click[]', description: 'clicks to convert'}]}, {name: 'convertCombo', description: 'Converts a click combination to an ID <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'combo ID'}, params: [{name: 'clicks', type: 'Collection<Click>', description: 'clicks to convert'}]}, {name: 'convertId', description: 'Converts a combo ID to clicks <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<Click>', description: 'click combination or null if invalid'}, params: [{name: 'id', type: 'int', description: 'combo ID'}]}, {name: 'getComboSize', description: 'Retrieves the accepted size of combos <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'the accepted size of combos'}, params: []}, {name: 'getComboString', description: 'Retrieves a formatted display of the combo based on the language config <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'formatted string for the combo'}, params: [{name: 'clicks', type: 'List<Click>', description: 'clicks of the combo'}]}, {name: 'getComboString', description: 'Retrieves a formatted display of the combo based on the language config <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'formatted string for the combo'}, params: [{name: 'combo', type: 'int', description: 'the ID of the combo'}]}, {name: 'getSaveString', description: 'Retrieves a formatted display of the combo used to save the combo to disk <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'formatted string for the combo'}, params: [{name: 'clicks', type: 'List<Click>', description: 'clicks of the combo'}]}, {name: 'getSaveString', description: 'Retrieves a formatted display of the combo used to save the combo to disk <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'formatted string for the combo'}, params: [{name: 'combo', type: 'int', description: 'the ID of the combo'}]}, {name: 'isClickEnabled', description: 'Checks whether or not the click with the given ID is enabled <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: [{name: 'id', type: 'int', description: 'ID of the click'}]}, {name: 'isValidCombo', description: 'Checks whether or not the combo is a valid one <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if valid, false otherwise'}, params: [{name: 'id', type: 'int', description: 'ID of the combo'}]}, {name: 'isValidDefaultCombo', description: 'Checks whether or not the combo is a valid one <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if valid, false otherwise'}, params: [{name: 'id', type: 'int', description: 'ID of the combo'}]}, {name: 'parseCombo', description: 'Parses a combo from a string using spaces as breaks <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'ID of the combo or -1 if invalid'}, params: [{name: 'combo', type: 'String', description: 'combo string'}]}, {name: 'reverse', description: 'Reverses a combo order <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'reversed combo ID'}, params: [{name: 'id', type: 'int', description: 'combo ID'}]}], fields: [{name: 'ComboManager', description: 'Manages click combos with what combos are active and what skills result from various combinations', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'RegistrationManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Skill API Registration Manager.</p> <p>This handles loading skill and class data from cofiguration files and fetching them from other plugins while validating everything to make sure it should be added.</p>', ext: 0, impl: [], constructors: [{name: 'RegistrationManager', description: '<p>Creates a new Registration Manager for handling registering new classes or skills.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'SkillAPI reference'}]}], methods: [{name: 'initialize', description: 'Initializes the registration manager, fetching skills and classes from configuration files and other plugins.', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'validate', description: '<p>Validates a class, making sure it is being registered during the appropriate time, it isn\'t null, and it doesn\'t conflict with other registered classes.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'RPGClass', description: 'the class if valid, null otherwise'}, params: [{name: 'rpgClass', type: 'RPGClass', description: 'class to validate'}]}, {name: 'validate', description: '<p>Validates a skill, making sure it is being registered during the appropriate time, it isn\'t null, and it doesn\'t conflict with other registered skills.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Skill', description: 'the class if valid, null otherwise'}, params: [{name: 'skill', type: 'Skill', description: 'skill to validate'}]}], fields: [{name: 'Mode', description: 'The registration modes used by the manager. These values are used to check what can be registered at any given time.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'RegistrationManager', description: '<p>Skill API Registration Manager.</p> <p>This handles loading skill and class data from cofiguration files and fetching them from other plugins while validating everything to make sure it should be added.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ResourceManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Manages embedded resources within the .jar', ext: 0, impl: [], constructors: [], methods: [{name: 'copyQuestsModule', description: '<p>Places the SkillAPI module for Quests into the proper directory</p>', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'copyResource', description: 'Copies a resource embedded in the jar into the given folder <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'name', type: 'String', description: 'name of the file'}, {name: 'folder', type: 'String', description: 'folder to put the file in'}]}], fields: [{name: 'ResourceManager', description: 'Manages embedded resources within the .jar', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'TitleManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles accessing the Title display resource', ext: 0, impl: [], constructors: [], methods: [{name: 'show', description: 'Shows a message using the Title display <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to send to'}, {name: 'type', type: 'TitleType', description: 'type of message'}, {name: 'msgKey', type: 'String', description: 'language config key for the message'}, {name: 'filters', type: 'CustomFilter...', description: 'filters to apply to the message'}]}], fields: [{name: 'TitleManager', description: 'Handles accessing the Title display resource', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'CooldownTask', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles updating cooldown values on skill bars for players', ext: 'BukkitRunnable', impl: [], constructors: [{name: 'CooldownTask', description: 'Initializes a new cooldown task. This shouldn\'t be used by other plugins as it is already set up by the API and additional copies would create extra processing for no real gain. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'SkillAPI reference'}]}], methods: [{name: 'run', description: 'Updates the cooldowns on skill bars each second', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'CooldownTask', description: 'Handles updating cooldown values on skill bars for players', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'GUITask', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Task that handles updating GUI elements such as level bar, food bar, and action bar according to the config.yml content.', ext: 'BukkitRunnable', impl: [], constructors: [{name: 'GUITask', description: 'Sets up the task, running if any of the GUI options are enabled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'API reference'}]}], methods: [{name: 'isRunning', description: 'Checks whether or not the task is running <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if running, false otherwise'}, params: []}, {name: 'run', description: 'Runs the tasks, updating GUI elements for players', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'GUITask', description: 'Task that handles updating GUI elements such as level bar, food bar, and action bar according to the config.yml content.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'InventoryTask', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Repeating task to check for equipment requirements', ext: 'BukkitRunnable', impl: [], constructors: [{name: 'InventoryTask', description: 'Task constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'p', type: 'SkillAPI', description: 'API reference'}, {name: 'playersPerCheck', type: 'int', description: 'how many players to check each tick'}]}], methods: [{name: 'cancel', description: 'Clears the plugin reference on cancel', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'cannotUse', description: '<p>Checks if the player cannot use the item</p> <p>If SkillAPI is not enabled or it\'s lore requirement setting is disabled, this will always return false</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if cannot use, false otherwise'}, params: [{name: 'player', type: 'PlayerData', description: 'player to check for'}, {name: 'item', type: 'ItemStack', description: 'item to check'}]}, {name: 'check', description: 'Checks a player for item requirements and stat bonuses <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to check'}]}, {name: 'clear', description: 'Removes attribute buff data for a player (should only be called by the API) <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'playerId', type: 'UUID', description: 'player UUID'}]}, {name: 'run', description: 'Checks player equipment for requirements', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'InventoryTask', description: 'Repeating task to check for equipment requirements', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ManaTask', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Restores mana to all players over time.</p> <p>This task is run by the API and you should not use this task yourself.</p>', ext: 'BukkitRunnable', impl: [], constructors: [{name: 'ManaTask', description: '<p>Starts a new task for regenerating mana over time. The task is started automatically so don\'t initialize this class unless wanting to start a new task.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'SkillAPI', description: 'SkillAPI reference'}]}], methods: [{name: 'run', description: '<p>Checks all players for mana regeneration each interval</p>', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'ManaTask', description: '<p>Restores mana to all players over time.</p> <p>This task is run by the API and you should not use this task yourself.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'RemoveTask', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A simple task for removing an entity after a duration', ext: 'BukkitRunnable', impl: [], constructors: [{name: 'RemoveTask', description: 'Initializes a new task to remove the entity after the given number of ticks. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'entities', type: 'List<Entity>', description: 'entities to remove'}, {name: 'ticks', type: 'int', description: 'ticks to wait before removing the entity'}]}, {name: 'RemoveTask', description: 'Initializes a new task to remove the entity after the given number of ticks. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'entity', type: 'Entity', description: 'entity to remove'}, {name: 'ticks', type: 'int', description: 'ticks to wait before removing the entity'}]}], methods: [{name: 'isOwnedBy', description: 'Checks if the owner of the tameable entity is the given player <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if owned by the player, false otherwise'}, params: [{name: 'player', type: 'Player', description: 'player to compare against'}]}, {name: 'run', description: 'Removes the entity once the time is up', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'RemoveTask', description: 'A simple task for removing an entity after a duration', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'SaveTask', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles auto saving periodically', ext: 'BukkitRunnable', impl: [], constructors: [{name: 'SaveTask', description: 'Sets up the save task. This shouldn\'t be used by other plugins as it is set up by the API. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'API reference'}]}], methods: [{name: 'run', description: 'Saves all player data', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'SaveTask', description: 'Handles auto saving periodically', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ScoreboardTask', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'SkillAPI com.sucy.skill.task.ScoreboardTask <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', ext: 'BukkitRunnable', impl: [], constructors: [{name: 'ScoreboardTask', description: 'Prepares the task <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'data', type: 'PlayerData', description: 'data of player to update for'}]}], methods: [{name: 'run', description: 'Applies the update', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'ScoreboardTask', description: 'SkillAPI com.sucy.skill.task.ScoreboardTask <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'BasicHorizontalTree', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A basic implementation of a horizontally ascending skill tree', ext: 'InventoryTree', impl: [], constructors: [{name: 'BasicHorizontalTree', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'api reference'}, {name: 'tree', type: 'RPGClass', description: 'class reference'}]}], methods: [{name: 'arrange', description: 'Arranges the skill tree', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'skills', type: 'List<Skill>', description: ''}]}], fields: [{name: 'BasicHorizontalTree', description: 'A basic implementation of a horizontally ascending skill tree', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'BasicVerticalTree', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A basic implementation of a horizontally ascending skill tree', ext: 'InventoryTree', impl: [], constructors: [{name: 'BasicVerticalTree', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'api reference'}, {name: 'tree', type: 'RPGClass', description: 'class reference'}]}], methods: [{name: 'arrange', description: 'Arranges the skill tree <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'skills', type: 'List<Skill>', description: ''}]}], fields: [{name: 'BasicVerticalTree', description: 'A basic implementation of a horizontally ascending skill tree', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'FloodTree', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Root class for tree implementations based on levels</p> <p>This is still in development to make it work as intended</p>', ext: 'InventoryTree', impl: [], constructors: [{name: 'FloodTree', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'api reference'}, {name: 'tree', type: 'RPGClass', description: 'class reference'}]}], methods: [{name: 'arrange', description: 'Arranges the skill tree <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'void', description: ''}, params: [{name: 'skills', type: 'List<Skill>', description: 'skills to arrange'}]}], fields: [{name: 'FloodTree', description: '<p>Root class for tree implementations based on levels</p> <p>This is still in development to make it work as intended</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'InventoryTree', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 1, description: 'A skill tree manager for classes', ext: 'SkillTree', impl: [], constructors: [{name: 'InventoryTree', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'api reference'}, {name: 'tree', type: 'RPGClass', description: ''}]}], methods: [{name: 'arrange', description: 'Arranges the skill tree <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'checkClick', description: 'Checks a click for actions <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'whether or not the click should be cancelled (when it was a skill or link)'}, params: [{name: 'slot', type: 'int', description: 'slot that was clicked'}]}, {name: 'getInventory', description: 'Generates a new skill tree inventory <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Inventory', description: 'skill tree inventory'}, params: [{name: 'player', type: 'PlayerData', description: 'player data to show'}]}, {name: 'getSkill', description: 'Gets the skill attached to a slot <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Skill', description: 'skill for the slot'}, params: [{name: 'slot', type: 'int', description: 'slot to retrieve for'}]}, {name: 'getSkillSlots', description: 'Retrieves the entire map of occupied skill slots for the skill tree <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HashMap<Integer,Skill>', description: 'map of occupied skill slots'}, params: []}, {name: 'hasSkill', description: 'Checks if the class has the skill registered <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if registered, false otherwise'}, params: [{name: 'skill', type: 'Skill', description: 'skill to check'}]}, {name: 'isSkill', description: 'Checks if the slot points to a skill <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if a skill, false otherwise'}, params: [{name: 'player', type: 'HumanEntity', description: ''}, {name: 'slot', type: 'int', description: 'slot to check'}]}, {name: 'show', description: 'Shows the player the skill tree so they can view/manage their skills. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to show'}]}, {name: 'update', description: 'Updates a skill in the view <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'PlayerData', description: 'player'}]}], fields: [{name: 'comparator', description: 'Comparator for skills for most trees', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'Comparator<Skill>', scope: 'protected'}, {name: 'height', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'int', scope: 'protected'}, {name: 'INVENTORY_KEY', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'InventoryTree', description: 'A skill tree manager for classes', isStatic: 0, isFinal: 0, isAbstract: 1, type: '', scope: 'public'}, {name: 'skillSlots', isStatic: 0, isFinal: 1, isAbstract: 0, type: 'HashMap<Integer,Skill>', scope: 'protected'}], scope: 'public'},
        {name: 'LevelHorizontalTree', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A horizontal level tree implementation', ext: 'LevelTree', impl: [], constructors: [{name: 'LevelHorizontalTree', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'api reference'}, {name: 'tree', type: 'RPGClass', description: 'tree reference'}]}], methods: [{name: 'getPerTierLimit', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'int', description: 'skills allowed per row'}, params: []}], fields: [{name: 'LevelHorizontalTree', description: 'A horizontal level tree implementation', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'LevelTree', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 1, description: '<p>Root class for tree implementations based on levels</p> <p>This is still in development to make it work as intended</p>', ext: 'InventoryTree', impl: [], constructors: [{name: 'LevelTree', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'api reference'}, {name: 'tree', type: 'RPGClass', description: 'class reference'}]}], methods: [{name: 'arrange', description: 'Arranges the skill tree <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'void', description: ''}, params: [{name: 'skills', type: 'List<Skill>', description: 'skills to arrange'}]}, {name: 'getPerTierLimit', description: 'Maximum number of skills per tier allowed <br><br', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'protected', returnValue: {type: 'int', description: 'number of skills per tier'}, params: []}, {name: 'getTierLimit', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'int', description: 'maximum number of tiers allowed'}, params: []}], fields: [{name: 'LevelTree', description: '<p>Root class for tree implementations based on levels</p> <p>This is still in development to make it work as intended</p>', isStatic: 0, isFinal: 0, isAbstract: 1, type: '', scope: 'public'}], scope: 'public'},
        {name: 'LevelVerticalTree', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A horizontal level tree implementation', ext: 'LevelTree', impl: [], constructors: [{name: 'LevelVerticalTree', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'api reference'}, {name: 'tree', type: 'RPGClass', description: 'tree reference'}]}], methods: [{name: 'getPerTierLimit', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'int', description: 'skills allowed per row'}, params: []}], fields: [{name: 'LevelVerticalTree', description: 'A horizontal level tree implementation', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'RequirementTree', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Tree implementation based on requirement chains', ext: 'InventoryTree', impl: [], constructors: [{name: 'RequirementTree', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'api reference'}, {name: 'tree', type: 'RPGClass', description: 'class reference'}]}], methods: [{name: 'arrange', description: 'Arranges the skill tree <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'skills', type: 'List<Skill>', description: ''}]}], fields: [{name: 'RequirementTree', description: 'Tree implementation based on requirement chains', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'MapTree', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Represents a Skill Tree that uses a map for its GUI', ext: 'SkillTree', impl: [], constructors: [{name: 'MapTree', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'api reference'}, {name: 'tree', type: 'RPGClass', description: ''}]}], methods: [{name: 'arrange', description: 'Arranges the skill tree <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'skills', type: 'List<Skill>', description: 'skills to arrange'}]}, {name: 'getSkills', description: 'Retrieves the list of skills in the tree <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ArrayList<Skill>', description: 'list of skills'}, params: []}, {name: 'hasSkill', description: 'Checks if the class has the skill registered <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if registered, false otherwise'}, params: [{name: 'skill', type: 'Skill', description: 'skill to check'}]}], fields: [{name: 'IDENTIFIER', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'MapTree', description: 'Represents a Skill Tree that uses a map for its GUI', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'SkillTree', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 1, description: 'Represents a skill tree that contains an arrangement of a class\'s skills for a player to browse and level up or refund skills.', ext: 0, impl: [], constructors: [{name: 'SkillTree', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'api reference'}, {name: 'tree', type: 'RPGClass', description: ''}]}], methods: [{name: 'arrange', description: 'Arranges the skill tree <br><br', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'protected', returnValue: {type: 'void', description: ''}, params: [{name: 'skills', type: 'List<Skill>', description: 'skills to arrange'}]}, {name: 'arrange', description: 'Arranges the skill tree <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'canShow', description: 'Checks whether or not the player can be shown the skill <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if can be shown, false otherwise'}, params: [{name: 'player', type: 'Player', description: 'player to check for'}, {name: 'skill', type: 'Skill', description: 'skill to check for permissions'}]}, {name: 'hasSkill', description: 'Checks if the class has the skill registered <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'public', returnValue: {type: 'boolean', description: 'true if registered, false otherwise'}, params: [{name: 'skill', type: 'Skill', description: 'skill to check'}]}], fields: [{name: 'api', isStatic: 0, isFinal: 1, isAbstract: 0, type: 'SkillAPI', scope: 'protected'}, {name: 'SkillTree', description: 'Represents a skill tree that contains an arrangement of a class\'s skills for a player to browse and level up or refund skills.', isStatic: 0, isFinal: 0, isAbstract: 1, type: '', scope: 'public'}, {name: 'tree', isStatic: 0, isFinal: 1, isAbstract: 0, type: 'RPGClass', scope: 'protected'}], scope: 'public'}    ],
    [
        {name: 'SkillAPI', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>The main class of the plugin which has the accessor methods into most of the API.</p> <p>You can retrieve a reference to this through Bukkit the same way as any other plugin.</p>', ext: 'JavaPlugin', impl: [], constructors: [], methods: [{name: 'addClass', description: 'Registers a new class with SkillAPI. If this is called outside of the method provided in SkillPlugin, this will throw an error. You should implement SkillPlugin in your main class and call this from the provided "registerClasses" method. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'rpgClass', type: 'RPGClass', description: 'class to register'}]}, {name: 'addClasses', description: 'Registers a new class with SkillAPI. If this is called outside of the method provided in SkillPlugin, this will throw an error. You should implement SkillPlugin in your main class and call this from the provided "registerClasses" method. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'classes', type: 'RPGClass...', description: 'classes to register'}]}, {name: 'addDynamicClass', description: 'Adds a dynamic class which ignores validation. This should only be used by the API as other plugins should use the regular addClass. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'rpgClass', type: 'DynamicClass', description: 'dynamic class to add'}]}, {name: 'addSkill', description: 'Registers a new skill with SkillAPI. If this is called outside of the method provided in SkillPlugin, this will throw an error. You should implement SkillPlugin in your main class and call this from the provided "registerSkills" method. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'skill', type: 'Skill', description: 'skill to register'}]}, {name: 'addSkills', description: 'Registers multiple new skills with SkillAPI. If this is called outside of the method provided in SkillPlugin, this will throw an error. You should implement SkillPlugin in your main class and call this from the provided "registerSkills" method. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'skills', type: 'Skill...', description: 'skills to register'}]}, {name: 'getAttributeManager', description: 'Retrieves the attribute manager for SkillAPI <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'AttributeManager', description: 'attribute manager'}, params: []}, {name: 'getBaseClasses', description: 'Retrieves a list of base classes that don\'t profess from another class <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ArrayList<RPGClass>', description: 'the list of base classes'}, params: [{name: 'group', type: 'String', description: ''}]}, {name: 'getClass', description: 'Retrieves a class by name. If no skill is found with the name, null is returned instead. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'RPGClass', description: 'class with the name or null if not found'}, params: [{name: 'name', type: 'String', description: 'name of the class'}]}, {name: 'getClasses', description: 'Retrieves the registered class data for SkillAPI. It is recommended that you don\'t edit this map. Instead, use "addClass" and "addClasses" instead. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HashMap<String,RPGClass>', description: 'the map of registered skills'}, params: []}, {name: 'getComboManager', description: 'Retrieves the manager for click cast combos <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ComboManager', description: 'click combo manager'}, params: []}, {name: 'getGroups', description: 'Retrieves the list of active class groups used by registered classes <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'list of active class groups'}, params: []}, {name: 'getLanguage', description: 'Retrieves the language file data for SkillAPI <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'CommentedLanguageConfig', description: 'SkillAPI language file data'}, params: []}, {name: 'getMeta', description: 'Retrieves metadata from an entity <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Object', description: 'the stored value'}, params: [{name: 'target', type: 'Metadatable', description: 'entity to retrieve from'}, {name: 'key', type: 'String', description: 'key the value was stored under'}]}, {name: 'getMetaDouble', description: 'Retrieves metadata from an entity <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'the stored value'}, params: [{name: 'target', type: 'Metadatable', description: 'entity to retrieve from'}, {name: 'key', type: 'String', description: 'key the value was stored under'}]}, {name: 'getMetaInt', description: 'Retrieves metadata from an entity <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'the stored value'}, params: [{name: 'target', type: 'Metadatable', description: 'entity to retrieve from'}, {name: 'key', type: 'String', description: 'key the value was stored under'}]}, {name: 'getPlayerAccountData', description: 'Retrieves all class data for the player. This includes the active and all inactive accounts the player has. If no data is found, a new set of data will be created and returned. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerAccounts', description: 'the class data of the player'}, params: [{name: 'player', type: 'OfflinePlayer', description: 'player to get the data for'}]}, {name: 'getPlayerAccountData', description: 'Retrieves all the player data of SkillAPI. It is recommended not to modify this map. Instead, use helper methods within individual player data. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HashMap<String,PlayerAccounts>', description: 'all SkillAPI player data'}, params: []}, {name: 'getPlayerData', description: 'Retrieves the active class data for the player. If no data is found for the player, a new set of data will be created and returned. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerData', description: 'the class data of the player'}, params: [{name: 'player', type: 'OfflinePlayer', description: 'player to get the data for'}]}, {name: 'getSettings', description: 'Retrieves the settings data controlling SkillAPI <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Settings', description: 'SkillAPI settings data'}, params: []}, {name: 'getSkill', description: 'Retrieves a skill by name. If no skill is found with the name, null is returned instead. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Skill', description: 'skill with the name or null if not found'}, params: [{name: 'name', type: 'String', description: 'name of the skill'}]}, {name: 'getSkills', description: 'Retrieves the registered skill data for SkillAPI. It is recommended that you don\'t edit this map. Instead, use "addSkill" and "addSkills" instead. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HashMap<String,Skill>', description: 'the map of registered skills'}, params: []}, {name: 'hasPlayerData', description: 'Checks whether or not SkillAPI currently has loaded data for the given player. This returning false doesn\'t necessarily mean the player doesn\'t have any data at all, just not data that is currently loaded. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if has loaded data, false otherwise'}, params: [{name: 'player', type: 'OfflinePlayer', description: 'player to check for'}]}, {name: 'isClassRegistered', description: 'Checks whether or not a class is registered. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if registered, false otherwise'}, params: [{name: 'name', type: 'String', description: 'name of the class'}]}, {name: 'isClassRegistered', description: 'Checks whether or not a class is registered. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if registered, false otherwise'}, params: [{name: 'playerClass', type: 'PlayerClass', description: 'the class to check'}]}, {name: 'isClassRegistered', description: 'Checks whether or not a class is registered. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if registered, false otherwise'}, params: [{name: 'rpgClass', type: 'RPGClass', description: 'the class to check'}]}, {name: 'isLoaded', description: 'Checks whether or not SkillAPI has all its data loaded and running. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if loaded and set up, false otherwise'}, params: []}, {name: 'isSkillRegistered', description: 'Checks whether or not a skill is registered. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if registered, false otherwise'}, params: [{name: 'name', type: 'String', description: 'name of the skill'}]}, {name: 'isSkillRegistered', description: 'Checks whether or not a skill is registered <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if registered, false otherwise'}, params: [{name: 'skill', type: 'Skill', description: 'the skill to check'}]}, {name: 'isSkillRegistered', description: 'Checks whether or not a skill is registered <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if registered, false otherwise'}, params: [{name: 'skill', type: 'PlayerSkill', description: 'the skill to check'}]}, {name: 'loadPlayerData', description: 'Loads the data for a player when they join the server. This is handled by the API and doesn\'t need to be used elsewhere unless you want to load a player\'s data without them logging on. This should be run asynchronously since it is loading configuration files. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerAccounts', description: ''}, params: [{name: 'player', type: 'OfflinePlayer', description: 'player to load the data for'}]}, {name: 'onDisable', description: '<p>Disables SkillAPI, saving data before unloading everything and disconnecting listeners. This should not be called by other plugins.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'onEnable', description: '<p>Enables SkillAPI, setting up listeners, managers, and loading data. This should not be called by other plugins.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'reload', description: 'Reloads the plugin', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'removeMeta', description: 'Removes metadata from an entity <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'target', type: 'Metadatable', description: 'entity to remove from'}, {name: 'key', type: 'String', description: 'key metadata was stored under'}]}, {name: 'saveData', description: 'Saves all player data to the configs. This should be called asynchronously to avoid problems with the main server loop.', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'schedule', description: 'Schedules a delayed task <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'runnable', type: 'BukkitRunnable', description: 'the task to schedule'}, {name: 'delay', type: 'int', description: 'the delay in ticks'}]}, {name: 'schedule', description: 'Schedules a delayed task <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'runnable', type: 'Runnable', description: 'the task to schedule'}, {name: 'delay', type: 'int', description: 'the delay in ticks'}]}, {name: 'schedule', description: 'Schedules a repeating task <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'runnable', type: 'BukkitRunnable', description: 'the task to schedule'}, {name: 'delay', type: 'int', description: 'the delay in ticks before the first tick'}, {name: 'period', type: 'int', description: 'how often to run in ticks'}]}, {name: 'setMeta', description: 'Sets a value to an entity\'s metadata <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'target', type: 'Metadatable', description: 'entity to set to'}, {name: 'key', type: 'String', description: 'key to store under'}, {name: 'value', type: 'Object', description: 'value to store'}]}, {name: 'unloadPlayerData', description: 'Unloads player data from memory, saving it to the config first and then removing it from the map. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'final OfflinePlayer', description: 'player to unload data for'}]}], fields: [{name: 'classes', isStatic: 0, isFinal: 1, isAbstract: 0, type: 'HashMap<String,RPGClass>', scope: 'public'}, {name: 'groups', isStatic: 0, isFinal: 1, isAbstract: 0, type: 'ArrayList<String>', scope: 'public'}, {name: 'players', isStatic: 0, isFinal: 1, isAbstract: 0, type: 'HashMap<String,PlayerAccounts>', scope: 'public'}, {name: 'SkillAPI', description: '<p>The main class of the plugin which has the accessor methods into most of the API.</p> <p>You can retrieve a reference to this through Bukkit the same way as any other plugin.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'skills', isStatic: 0, isFinal: 1, isAbstract: 0, type: 'HashMap<String,Skill>', scope: 'public'}], scope: 'public'}    ]
];
var INTERFACES = [
    [
    ],
    [
        {name: 'TreeType', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Interface class for extensions of the available skill trees. Simply implement this to provide the SkillTree implementation and then set a class\'s tree type.', ext: 0, impl: [], constructors: [], methods: [{name: 'getTree', description: 'Retrieves a new instance of a skill tree using the given type. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'InventoryTree', description: 'skill tree instance'}, params: [{name: 'api', type: 'SkillAPI', description: '- SkillAPI reference'}, {name: 'parent', type: 'RPGClass', description: '- Parent class to organize'}]}], fields: [{name: 'TreeType', description: 'Interface class for extensions of the available skill trees. Simply implement this to provide the SkillTree implementation and then set a class\'s tree type.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
        {name: 'ProjectileCallback', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Callback interface for receiving when/what a specific projectile hits', ext: 0, impl: [], constructors: [], methods: [{name: 'callback', description: 'The callback method for when a projectile hits something or lands on the ground. This is not called when the projectile expires. If the projectile landed on the ground without hitting anything, the "hit" living entity will be null. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'projectile', type: 'CustomProjectile', description: 'projectile calling back for'}, {name: 'hit', type: 'LivingEntity', description: 'the entity hit by the projectile, if any'}]}], fields: [{name: 'ProjectileCallback', description: 'Callback interface for receiving when/what a specific projectile hits', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'PassiveSkill', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Interface for skills that cannot be cast but instead apply effects continuously such as buffs or increased stats.</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'initialize', description: '<p>Applies effects when the API starts up or when the player logs in. There will never be effects already applied before this (unless you start it prematurely) so you can just apply them without checking to remove previous effects.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'user', type: 'LivingEntity', description: 'user to initialize the effects for'}, {name: 'level', type: 'int', description: 'skill level'}]}, {name: 'stopEffects', description: '<p>Stops the effects when the player goes offline or loses the skill</p> <p>This could entail stopping tasks you use for the skill, resetting health or other stats, or other lasting effects you use.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'user', type: 'LivingEntity', description: 'user to stop the effects for'}, {name: 'level', type: 'int', description: 'skill level'}]}, {name: 'update', description: '<p>Applies the skill effects when a player upgrades the skill in their skill tree</p> <p>The skill may or not be already unlocked so include the proper checks if you are going to be removing previous effects.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'user', type: 'LivingEntity', description: 'user to refresh the effect for'}, {name: 'prevLevel', type: 'int', description: 'previous skill level'}, {name: 'newLevel', type: 'int', description: 'new skill level'}]}], fields: [{name: 'PassiveSkill', description: '<p>Interface for skills that cannot be cast but instead apply effects continuously such as buffs or increased stats.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'SkillShot', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Interface for skills that can be cast without a direct target</p> <p>Common applications would include firing projectiles, self-targeting skills, and AOE abilities around yourself or where you are looking</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'cast', description: 'Casts the skill <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if could cast, false otherwise'}, params: [{name: 'user', type: 'LivingEntity', description: 'user of the skill'}, {name: 'level', type: 'int', description: 'skill level'}]}], fields: [{name: 'SkillShot', description: '<p>Interface for skills that can be cast without a direct target</p> <p>Common applications would include firing projectiles, self-targeting skills, and AOE abilities around yourself or where you are looking</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'TargetSkill', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Interface for skills that require a specific target to cast</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'cast', description: 'Casts the skill <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if could cast, false otherwise'}, params: [{name: 'user', type: 'LivingEntity', description: 'user of the skill'}, {name: 'target', type: 'LivingEntity', description: 'target of the skill'}, {name: 'level', type: 'int', description: 'skill level'}, {name: 'ally', type: 'boolean', description: 'whether or not the target is an ally'}]}], fields: [{name: 'TargetSkill', description: '<p>Interface for skills that require a specific target to cast</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
        {name: 'SkillPlugin', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Interface for plugins that define new classes and skills</p> <p>Make sure to only add the appropriate type in each method (e.g. adding classes in the registerClasses method and skills in the registerSkills method). It keeps the API working nicely!</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'registerClasses', description: '<p>Method to add new classes to the game</p> <p>Use api.addClasses(RPGClass ... classes) to add them</p> <p>This is called after registerSkills</p>', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: ''}]}, {name: 'registerSkills', description: '<p>Method to add new skills to the game</p> <p>Use api.addSkills(Skill ... skills) to add them</p> <p>This is called before registerClasses so if you want to keep a reference of the API, you can store the api reference into one of your own fields</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'api', type: 'SkillAPI', description: 'the api reference'}]}], fields: [{name: 'SkillPlugin', description: '<p>Interface for plugins that define new classes and skills</p> <p>Make sure to only add the appropriate type in each method (e.g. adding classes in the registerClasses method and skills in the registerSkills method). It keeps the API working nicely!</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ]
];
var ENUMS = [
    [
    ],
    [
        {name: 'DefaultTreeType', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Types of SkillTrees that are available for classes/skills to use', ext: 0, impl: ['TreeType'], constructors: [], methods: [], fields: [{name: 'BASIC_HORIZONTAL', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'BASIC_VERTICAL', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'DefaultTreeType', description: 'Retrieves a tree type by enum value name <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'DefaultTreeType', description: 'Types of SkillTrees that are available for classes/skills to use', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'FLOOD', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'InventoryTree', description: 'Retrieves the skill tree depending on the enum value <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LEVEL_HORIZONTAL', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LEVEL_VERTICAL', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'REQUIREMENT', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'Direction', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Direction used in the Particle class that are defined by what directions it uses for 2D shapes', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'Direction', description: 'Direction used in the Particle class that are defined by what directions it uses for 2D shapes', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'XY', description: 'X-axis and Y-axis', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'XZ', description: 'X-axis and Z-axis', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'YZ', description: 'Y-axis and Z-axis', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ExpSource', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>A collection of reasons why a player would gain experience</p> <p>This is used when gaining experience to determine where it came from so some effects can act differently accordingly.</p>', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'BLOCK_BREAK', description: 'Experience resulted from breaking a block', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'BLOCK_PLACE', description: 'Experience resulted from placing a block', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'COMMAND', description: 'Experience resulted from an issued command', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'CRAFT', description: 'Experience resulted from crafting an item', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'EXP_BOTTLE', description: 'Experience from Bottles o\' Enchanting', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'ExpSource', description: '<p>A collection of reasons why a player would gain experience</p> <p>This is used when gaining experience to determine where it came from so some effects can act differently accordingly.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'int', description: '<p>Retrieves the ID of the experience source.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'MOB', description: 'Experience resulted from defeating a monster', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'QUEST', description: 'Experience from a quest', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SMELT', description: 'Experience from smelting ore', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SPECIAL', description: 'Experience resulted from an unspecified reason', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ManaCost', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>A collection of possible reasons mana was deducted from a player.</p> <p>This is used when deducting mana from a player to allow effects to react differently depending on why it is being deducted.</p>', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'ManaCost', description: '<p>A collection of possible reasons mana was deducted from a player.</p> <p>This is used when deducting mana from a player to allow effects to react differently depending on why it is being deducted.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SKILL_CAST', description: 'The player cast a skill that used some mana', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SKILL_EFFECT', description: 'The player was affected by a skill effect that reduced their mana', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SPECIAL', description: 'The player lost mana for some unspecified reason', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ManaSource', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>A collection of possible reasons mana was gained by a player.</p> <p>This is used when giving mana to a player to allow effects to react differently depending on why it is being added.</p>', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'COMMAND', description: 'A command restored some of their mana', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'ManaSource', description: '<p>A collection of possible reasons mana was gained by a player.</p> <p>This is used when giving mana to a player to allow effects to react differently depending on why it is being added.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'REGEN', description: 'The player regenerated some mana back passively', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SKILL', description: 'A skill effect replenished some of their mana', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SPECIAL', description: 'The player gained mana for an unspecified reason', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PointSource', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>A collection of possible reasons skill points were gained by a player.</p> <p>This is used when giving skill points to a player to allow effects to react differently depending on why it is being added.</p>', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'COMMAND', description: 'A command gave the player additional skill points', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'INITIALIZATION', description: 'The skill points are from the player\'s data being initialized on startup', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LEVEL', description: 'The player leveled up to get more skill points', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'PointSource', description: '<p>A collection of possible reasons skill points were gained by a player.</p> <p>This is used when giving skill points to a player to allow effects to react differently depending on why it is being added.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'REFUND', description: 'The player downgraded a skill and was refunded the skill points', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SPECIAL', description: 'The player was given skill points for an unspecified reason', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'SkillStatus', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Statuses for a skill in relation to a player', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'MISSING_MANA', description: 'The player requires more mana before using the skill', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'ON_COOLDOWN', description: 'The skill is currently on cooldown', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'READY', description: 'The skill is ready to be used', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SkillStatus', description: 'Statuses for a skill in relation to a player', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'TreeType', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Types of skill tree arrangements that can be used in the configuration.</p>', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'BASIC_HORIZONTAL', description: 'A basic arrangement that puts base skills on the left, and the skills that require those directly to the right of them.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'BASIC_VERTICAL', description: 'A basic arrangement that puts base skills at the top, and the skills that require those directly below them.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LEVEL_HORIZONTAL', description: 'Arranges skills by their initial level requirement, putting lowest level skills to the left and higher level skills to the right.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LEVEL_VERTICAL', description: 'Arranges skills by their initial level requirement, putting lowest level skills at the top and higher level skills at the bottom.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'REQUIREMENT', description: 'Arranges basic skills not needed by other skills on the left hand side, other basic skills at the top right, and the skills that require those below them.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'String', description: 'Retrieves the configuration key for the skill tree arrangement <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'TreeType', description: '<p>Types of skill tree arrangements that can be used in the configuration.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
        {name: 'BuffType', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'SkillAPI com.sucy.skill.api.util.BuffType <br><br>The MIT License (MIT) <br><br>Copyright (c) 2016 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'BuffType', description: 'SkillAPI com.sucy.skill.api.util.BuffType <br><br>The MIT License (MIT) <br><br>Copyright (c) 2016 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'DAMAGE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'DEFENSE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SKILL_DAMAGE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SKILL_DEFENSE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
    ],
    [
    ],
    [
        {name: 'Click', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Represents a single click in a click combination', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'Click', description: 'Retrieves a Click by name. If an invalid name is provided, this will return null instead. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Click', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Click', description: 'Retrieves a Click by ID. If an invalid ID is provided, this will instead return null. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Click', description: 'Represents a single click in a click combination', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'int', isStatic: 1, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'int', description: 'Gets the ID of the click type used in compiling combos <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'int', isStatic: 1, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'int', isStatic: 1, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'LEFT', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'RIGHT', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SHIFT', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'String', description: 'Retrieves the formatted name of the click type <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'TitleType', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Supported message types for the Title display', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'EXP_GAINED', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'EXP_LOST', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LEVEL_UP', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'STATUS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'TitleType', description: 'Supported message types for the Title display', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
    ],
    [
    ],
    [
        {name: 'Trigger', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Possible triggers for dynamic skill effects', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'CAST', description: 'Trigger effects when a player casts the skill', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'CLEANUP', description: 'Trigger effects when the player quits or unlearns the skill', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'CROUCH', description: 'Trigger effects when the player crouches', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'DEATH', description: 'Trigger effects when the player dies', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'ENVIRONMENT_DAMAGE', description: 'Trigger effects when the player takes environmental damage', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'INITIALIZE', description: 'Trigger effects when the skill is available', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'KILL', description: 'Trigger effects upon killing something', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LAND', description: 'Trigger effects upon hitting the ground', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LAUNCH', description: 'Trigger effects when launching a projectile', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'PHYSICAL_DAMAGE', description: 'Trigger effects when the player inflicts non-skill damage', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SKILL_DAMAGE', description: 'Trigger effects when the player inflicts skill damage', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'TOOK_PHYSICAL_DAMAGE', description: 'Trigger effects when taking non-skill damage', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'TOOK_SKILL_DAMAGE', description: 'Trigger effects when taking skill damage', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Trigger', description: 'Possible triggers for dynamic skill effects', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'TriggerComponent', description: 'Component for triggers that can contain needed data and child components', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'TriggerComponent', description: 'Retrieves a new component for the trigger <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
        {name: 'LogType', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Different categories of logging', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'ATTRIBUTE_LOAD', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'BUFF', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'GUI', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LogType', description: 'Different categories of logging', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'MANA', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'REGISTRATION', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'String', description: 'The key for the logging type matching the config.yml vale <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ]
];
var EXCEPTIONS = [
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
        {name: 'SkillTreeException', type: 'exception', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Exception for generating skill trees', ext: 'Exception', impl: [], constructors: [{name: 'SkillTreeException', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'message', type: 'String', description: 'exception message'}]}], methods: [], fields: [{name: 'SkillTreeException', description: 'Exception for generating skill trees', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ]
];
var ANNOTATIONS = [
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ]
];
var ALL_CLASSES = ['com.sucy.skill.api.util:ActionBar', 'com.sucy.skill.dynamic.target:AreaTarget', 'com.sucy.skill.dynamic.condition:ArmorCondition', 'com.sucy.skill.dynamic.condition:AttributeCondition', 'com.sucy.skill.listener:AttributeListener', 'com.sucy.skill.manager:AttributeManager', 'com.sucy.skill.dynamic.mechanic:AttributeMechanic', 'com.sucy.skill.listener:BarListener', 'com.sucy.skill.tree.basic:BasicHorizontalTree', 'com.sucy.skill.tree.basic:BasicVerticalTree', 'com.sucy.skill.dynamic.condition:BiomeCondition', 'com.sucy.skill.dynamic.condition:BlockCondition', 'com.sucy.skill.dynamic.mechanic:BlockMechanic', 'com.sucy.skill.api.util:Buff', 'com.sucy.skill.api.util:BuffData', 'com.sucy.skill.api.util:BuffManager', 'com.sucy.skill.api.util:BuffType', 'com.sucy.skill.dynamic.mechanic:CancelMechanic', 'com.sucy.skill.listener:CastListener', 'com.sucy.skill.dynamic.condition:ChanceCondition', 'com.sucy.skill.dynamic.mechanic:ChannelMechanic', 'com.sucy.skill.api.classes:ClassAttribute', 'com.sucy.skill.manager:ClassBoardManager', 'com.sucy.skill.dynamic.condition:ClassCondition', 'com.sucy.skill.dynamic.condition:ClassLevelCondition', 'com.sucy.skill.dynamic.mechanic:CleanseMechanic', 'com.sucy.skill.data:Click', 'com.sucy.skill.listener:ClickListener', 'com.sucy.skill.cmd:CmdAccount', 'com.sucy.skill.cmd:CmdAP', 'com.sucy.skill.cmd:CmdAttribute', 'com.sucy.skill.cmd:CmdBackup', 'com.sucy.skill.cmd:CmdBar', 'com.sucy.skill.cmd:CmdBind', 'com.sucy.skill.cmd:CmdCast', 'com.sucy.skill.cmd:CmdClearBinds', 'com.sucy.skill.cmd:CmdCombo', 'com.sucy.skill.cmd:CmdExp', 'com.sucy.skill.cmd:CmdForceAccount', 'com.sucy.skill.cmd:CmdForceAttr', 'com.sucy.skill.cmd:CmdForceCast', 'com.sucy.skill.cmd:CmdForceProfess', 'com.sucy.skill.cmd:CmdForceReset', 'com.sucy.skill.cmd:CmdInfo', 'com.sucy.skill.cmd:CmdLevel', 'com.sucy.skill.cmd:CmdList', 'com.sucy.skill.cmd:CmdLore', 'com.sucy.skill.cmd:CmdMana', 'com.sucy.skill.manager:CmdManager', 'com.sucy.skill.cmd:CmdOptions', 'com.sucy.skill.cmd:CmdPoints', 'com.sucy.skill.cmd:CmdProfess', 'com.sucy.skill.cmd:CmdReload', 'com.sucy.skill.cmd:CmdReset', 'com.sucy.skill.cmd:CmdScheme', 'com.sucy.skill.cmd:CmdSkill', 'com.sucy.skill.cmd:CmdSkillMap', 'com.sucy.skill.cmd:CmdUnbind', 'com.sucy.skill.api.util:Combat', 'com.sucy.skill.dynamic.condition:CombatCondition', 'com.sucy.skill.manager:ComboManager', 'com.sucy.skill.dynamic.mechanic:CommandMechanic', 'com.sucy.skill.dynamic.target:ConeTarget', 'com.sucy.skill.data.io:ConfigIO', 'com.sucy.skill.dynamic.mechanic:CooldownMechanic', 'com.sucy.skill.task:CooldownTask', 'com.sucy.skill.dynamic.condition:CrouchCondition', 'com.sucy.skill.api.projectile:CustomProjectile', 'com.sucy.skill.dynamic.mechanic:DamageBuffMechanic', 'com.sucy.skill.dynamic.mechanic:DamageLoreMechanic', 'com.sucy.skill.api.util:DamageLoreRemover', 'com.sucy.skill.dynamic.mechanic:DamageMechanic', 'com.sucy.skill.api.util:Data', 'com.sucy.skill.api.classes:DefaultTreeType', 'com.sucy.skill.dynamic.mechanic:DefenseBuffMechanic', 'com.sucy.skill.dynamic.mechanic:DelayMechanic', 'com.sucy.skill.api.enums:Direction', 'com.sucy.skill.dynamic.condition:DirectionCondition', 'com.sucy.skill.hook:DisguiseHook', 'com.sucy.skill.dynamic.mechanic:DisguiseMechanic', 'com.sucy.skill.dynamic:DynamicClass', 'com.sucy.skill.dynamic:DynamicSkill', 'com.sucy.skill.dynamic:EffectComponent', 'com.sucy.skill.dynamic.condition:ElevationCondition', 'com.sucy.skill.language:ErrorNodes', 'com.sucy.skill.data:ExpFormula', 'com.sucy.skill.dynamic.mechanic:ExplosionMechanic', 'com.sucy.skill.api.enums:ExpSource', 'com.sucy.skill.dynamic.condition:FireCondition', 'com.sucy.skill.dynamic.mechanic:FireMechanic', 'com.sucy.skill.api.event:FlagApplyEvent', 'com.sucy.skill.dynamic.mechanic:FlagClearMechanic', 'com.sucy.skill.dynamic.condition:FlagCondition', 'com.sucy.skill.api.util:FlagData', 'com.sucy.skill.api.event:FlagExpireEvent', 'com.sucy.skill.api.util:FlagManager', 'com.sucy.skill.dynamic.mechanic:FlagMechanic', 'com.sucy.skill.dynamic.mechanic:FlagToggleMechanic', 'com.sucy.skill.tree.basic:FloodTree', 'com.sucy.skill.data:Formula', 'com.sucy.skill.data:GroupSettings', 'com.sucy.skill.language:GUINodes', 'com.sucy.skill.task:GUITask', 'com.sucy.skill.dynamic.mechanic:HealMechanic', 'com.sucy.skill.dynamic.condition:HealthCondition', 'com.sucy.skill.dynamic.mechanic:ImmunityMechanic', 'com.sucy.skill.dynamic.mechanic:InterruptMechanic', 'com.sucy.skill.dynamic.condition:InventoryCondition', 'com.sucy.skill.task:InventoryTask', 'com.sucy.skill.tree.basic:InventoryTree', 'com.sucy.skill.data.io:IOManager', 'com.sucy.skill.dynamic:ItemChecker', 'com.sucy.skill.dynamic.condition:ItemCondition', 'com.sucy.skill.listener:ItemListener', 'com.sucy.skill.dynamic.mechanic:ItemMechanic', 'com.sucy.skill.api.projectile:ItemProjectile', 'com.sucy.skill.api.event:ItemProjectileHitEvent', 'com.sucy.skill.api.event:ItemProjectileLandEvent', 'com.sucy.skill.api.event:ItemProjectileLaunchEvent', 'com.sucy.skill.dynamic.mechanic:ItemProjectileMechanic', 'com.sucy.skill.dynamic.mechanic:ItemRemoveMechanic', 'com.sucy.skill.listener:KillListener', 'com.sucy.skill.dynamic.mechanic:LaunchMechanic', 'com.sucy.skill.tree.basic:LevelHorizontalTree', 'com.sucy.skill.tree.basic:LevelTree', 'com.sucy.skill.tree.basic:LevelVerticalTree', 'com.sucy.skill.dynamic.condition:LightCondition', 'com.sucy.skill.dynamic.mechanic:LightningMechanic', 'com.sucy.skill.dynamic.target:LinearTarget', 'com.sucy.skill.listener:ListenerUtil', 'com.sucy.skill.dynamic.target:LocationTarget', 'com.sucy.skill.log:Logger', 'com.sucy.skill.log:LogType', 'com.sucy.skill.dynamic.condition:LoreCondition', 'com.sucy.skill.listener:MainListener', 'com.sucy.skill.dynamic.condition:ManaCondition', 'com.sucy.skill.api.enums:ManaCost', 'com.sucy.skill.dynamic.mechanic:ManaMechanic', 'com.sucy.skill.api.enums:ManaSource', 'com.sucy.skill.task:ManaTask', 'com.sucy.skill.tree.map:MapTree', 'com.sucy.skill.listener:MechanicListener', 'com.sucy.skill.gui:Menu', 'com.sucy.skill.dynamic.mechanic:MessageMechanic', 'com.sucy.skill.dynamic.condition:NameCondition', 'com.sucy.skill.dynamic.target:NearestTarget', 'com.sucy.skill.hook:NoCheatHook', 'com.sucy.skill.language:NotificationNodes', 'com.sucy.skill.api.util:NumberParser', 'com.sucy.skill.dynamic.condition:OffhandCondition', 'com.sucy.skill.dynamic.target:OffsetTarget', 'com.sucy.skill.dynamic.mechanic:ParticleAnimationMechanic', 'com.sucy.skill.api.util:ParticleHelper', 'com.sucy.skill.dynamic.mechanic:ParticleMechanic', 'com.sucy.skill.api.projectile:ParticleProjectile', 'com.sucy.skill.api.event:ParticleProjectileExpireEvent', 'com.sucy.skill.api.event:ParticleProjectileHitEvent', 'com.sucy.skill.api.event:ParticleProjectileLandEvent', 'com.sucy.skill.api.event:ParticleProjectileLaunchEvent', 'com.sucy.skill.dynamic.mechanic:ParticleProjectileMechanic', 'com.sucy.skill.dynamic.mechanic:PassiveMechanic', 'com.sucy.skill.api.skills:PassiveSkill', 'com.sucy.skill.dynamic.mechanic:PermissionMechanic', 'com.sucy.skill.data:Permissions', 'com.sucy.skill.api.event:PhysicalDamageEvent', 'com.sucy.skill.api.event:PlayerAccountChangeEvent', 'com.sucy.skill.api.player:PlayerAccounts', 'com.sucy.skill.api.event:PlayerCastSkillEvent', 'com.sucy.skill.api.player:PlayerClass', 'com.sucy.skill.api.event:PlayerClassChangeEvent', 'com.sucy.skill.api.event:PlayerComboFinishEvent', 'com.sucy.skill.api.player:PlayerCombos', 'com.sucy.skill.api.player:PlayerData', 'com.sucy.skill.api.event:PlayerExperienceGainEvent', 'com.sucy.skill.api.event:PlayerExperienceLostEvent', 'com.sucy.skill.api.event:PlayerGainSkillPointsEvent', 'com.sucy.skill.api.event:PlayerLandEvent', 'com.sucy.skill.api.event:PlayerLevelUpEvent', 'com.sucy.skill.api.event:PlayerManaGainEvent', 'com.sucy.skill.api.event:PlayerManaLossEvent', 'com.sucy.skill.api.event:PlayerRefundAttributeEvent', 'com.sucy.skill.api.player:PlayerSkill', 'com.sucy.skill.api.player:PlayerSkillBar', 'com.sucy.skill.api.event:PlayerSkillDowngradeEvent', 'com.sucy.skill.api.event:PlayerSkillUnlockEvent', 'com.sucy.skill.api.event:PlayerSkillUpgradeEvent', 'com.sucy.skill.data:PlayerStats', 'com.sucy.skill.api.event:PlayerUpAttributeEvent', 'com.sucy.skill.hook:PluginChecker', 'com.sucy.skill.api.enums:PointSource', 'com.sucy.skill.dynamic.condition:PotionCondition', 'com.sucy.skill.dynamic.mechanic:PotionMechanic', 'com.sucy.skill.dynamic.mechanic:PotionProjectileMechanic', 'com.sucy.skill.api.projectile:ProjectileCallback', 'com.sucy.skill.dynamic.mechanic:ProjectileMechanic', 'com.sucy.skill.dynamic.mechanic:PurgeMechanic', 'com.sucy.skill.dynamic.mechanic:PushMechanic', 'com.sucy.skill.api:ReadOnlySettings', 'com.sucy.skill.manager:RegistrationManager', 'com.sucy.skill.dynamic.target:RememberTarget', 'com.sucy.skill.dynamic.mechanic:RememberTargetsMechanic', 'com.sucy.skill.task:RemoveTask', 'com.sucy.skill.dynamic.mechanic:RepeatMechanic', 'com.sucy.skill.tree.basic:RequirementTree', 'com.sucy.skill.manager:ResourceManager', 'com.sucy.skill.api.classes:RPGClass', 'com.sucy.skill.language:RPGFilter', 'com.sucy.skill.task:SaveTask', 'com.sucy.skill.task:ScoreboardTask', 'com.sucy.skill.dynamic.target:SelfTarget', 'com.sucy.skill.data:Settings', 'com.sucy.skill.api:Settings', 'com.sucy.skill.dynamic.target:SingleTarget', 'com.sucy.skill.api.skills:Skill', 'com.sucy.skill:SkillAPI', 'com.sucy.skill.api.skills:SkillAttribute', 'com.sucy.skill.api.event:SkillDamageEvent', 'com.sucy.skill.gui:SkillDetailMenu', 'com.sucy.skill.api.event:SkillHealEvent', 'com.sucy.skill.dynamic.condition:SkillLevelCondition', 'com.sucy.skill.gui:SkillListMenu', 'com.sucy.skill.language:SkillNodes', 'com.sucy.skill.api:SkillPlugin', 'com.sucy.skill.api.skills:SkillShot', 'com.sucy.skill.api.enums:SkillStatus', 'com.sucy.skill.tree:SkillTree', 'com.sucy.skill.api.exception:SkillTreeException', 'com.sucy.skill.dynamic.mechanic:SoundMechanic', 'com.sucy.skill.dynamic.mechanic:SpeedMechanic', 'com.sucy.skill.data.io:SQLIO', 'com.sucy.skill.dynamic.condition:StatusCondition', 'com.sucy.skill.api.util:StatusFlag', 'com.sucy.skill.listener:StatusListener', 'com.sucy.skill.dynamic.mechanic:StatusMechanic', 'com.sucy.skill.api.skills:TargetSkill', 'com.sucy.skill.dynamic.mechanic:TauntMechanic', 'com.sucy.skill.dynamic:TempEntity', 'com.sucy.skill.dynamic.condition:TimeCondition', 'be.maximvdw.titlemotd.ui:Title', 'com.sucy.skill.manager:TitleManager', 'com.sucy.skill.data:TitleType', 'com.sucy.skill.dynamic.condition:ToolCondition', 'com.sucy.skill.listener:TreeListener', 'com.sucy.skill.api.classes:TreeType', 'com.sucy.skill.api.enums:TreeType', 'com.sucy.skill.dynamic:Trigger', 'com.sucy.skill.api.event:TrueDamageEvent', 'com.sucy.skill.dynamic.mechanic:ValueAddMechanic', 'com.sucy.skill.dynamic.mechanic:ValueAttributeMechanic', 'com.sucy.skill.dynamic.condition:ValueCondition', 'com.sucy.skill.dynamic.mechanic:ValueLocationMechanic', 'com.sucy.skill.dynamic.mechanic:ValueLoreMechanic', 'com.sucy.skill.dynamic.mechanic:ValueMultiplyMechanic', 'com.sucy.skill.dynamic.mechanic:ValueRandomMechanic', 'com.sucy.skill.dynamic.mechanic:ValueSetMechanic', 'com.sucy.skill.hook:VaultHook', 'com.sucy.skill.dynamic.mechanic:WarpLocMechanic', 'com.sucy.skill.dynamic.mechanic:WarpMechanic', 'com.sucy.skill.dynamic.mechanic:WarpRandomMechanic', 'com.sucy.skill.dynamic.mechanic:WarpSwapMechanic', 'com.sucy.skill.dynamic.mechanic:WarpTargetMechanic', 'com.sucy.skill.dynamic.mechanic:WarpValueMechanic', 'com.sucy.skill.dynamic.condition:WaterCondition', 'com.sucy.skill.dynamic.mechanic:WolfMechanic'];
